
lab_7.elf:     file format elf32-littlenios2
lab_7.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000e3bc memsz 0x0000e3bc flags r-x
    LOAD off    0x0000f3dc vaddr 0x0800e3dc paddr 0x08010038 align 2**12
         filesz 0x00001c5c memsz 0x00001c5c flags rw-
    LOAD off    0x00011c94 vaddr 0x08011c94 paddr 0x08011c94 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000de64  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000348  0800e094  0800e094  0000f094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c5c  0800e3dc  08010038  0000f3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  08011c94  08011c94  00011c94  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00011038  2**0
                  CONTENTS
  7 .sdram        00000000  08011df4  08011df4  00011038  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00011038  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b60  00000000  00000000  00011060  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001654d  00000000  00000000  00011bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000062b3  00000000  00000000  0002810d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000839c  00000000  00000000  0002e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001850  00000000  00000000  0003675c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000032b7  00000000  00000000  00037fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00015095  00000000  00000000  0003b263  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000502f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001408  00000000  00000000  00050338  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00054192  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00054195  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000541a1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000541a2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000541a3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000541a7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000541ab  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000541af  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000541b8  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000541c1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000007  00000000  00000000  000541ca  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002d  00000000  00000000  000541d1  2**0
                  CONTENTS, READONLY
 30 .jdi          00004d71  00000000  00000000  000541fe  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00090c18  00000000  00000000  00058f6f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
0800e094 l    d  .rodata	00000000 .rodata
0800e3dc l    d  .rwdata	00000000 .rwdata
08011c94 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08011df4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab_7_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
0800fff8 l     O .rwdata	00000004 vga_ctrl
0800e3dc l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800e12a l     O .rodata	00000010 zeroes.4389
0800e13a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
08002ee0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 impure.c
0800e54c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0800e990 l     O .rwdata	00000020 lc_ctype_charset
0800e970 l     O .rwdata	00000020 lc_message_charset
0800e9b0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
0800e16c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800e290 l     O .rodata	00000010 zeroes.4333
0800e2a0 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
0800bcd8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08010010 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800bf68 l     F .text	00000034 alt_dev_reg
0800edf0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800c25c l     F .text	0000020c altera_avalon_jtag_uart_irq
0800c468 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800caa0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0800ce18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0800cf4c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800cf78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800d3d8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800d538 l     F .text	0000003c alt_get_errno
0800d574 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08011cc8 g     O .bss	00000004 alt_instruction_exception_handler
080061e4 g     F .text	00000074 _mprec_log10
080062d0 g     F .text	0000008c __any_on
0800e178 g     O .rodata	00000028 __mprec_tinytens
0800bdc4 g     F .text	0000007c alt_main
08011cf4 g     O .bss	00000100 alt_irq
08010038 g       *ABS*	00000000 __flash_rwdata_start
0800a6b0 g     F .text	00000088 .hidden __eqdf2
08011df4 g       *ABS*	00000000 __alt_heap_start
08004790 g     F .text	0000007c _setlocale_r
0800be64 g     F .text	00000024 __malloc_unlock
08007f80 g     F .text	0000015c memmove
080052a4 g     F .text	000000a8 _Balloc
0800a738 g     F .text	000000dc .hidden __gtdf2
0800d9e4 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08011cac g     O .bss	00000004 errno
080066d0 g     F .text	000013a0 ___svfiprintf_internal_r
08011cb4 g     O .bss	00000004 alt_argv
08017ff8 g       *ABS*	00000000 _gp
0800bf38 g     F .text	00000030 usleep
08000420 g     F .text	00000050 textVGAColorClr
0800fe78 g     O .rwdata	00000180 alt_fd_list
0800da08 g     F .text	00000090 alt_find_dev
0800515c g     F .text	00000148 memcpy
0800baf0 g     F .text	000000dc .hidden __floatsidf
0800d4bc g     F .text	0000007c alt_io_redirect
0800a814 g     F .text	000000f4 .hidden __ltdf2
0800e094 g       *ABS*	00000000 __DTOR_END__
0800dc64 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800635c g     F .text	00000074 __fpclassifyd
08006140 g     F .text	000000a4 __ratio
0800c660 g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08000968 g     F .text	00000064 .hidden __udivsi3
0800e1c8 g     O .rodata	000000c8 __mprec_tens
0800480c g     F .text	0000000c __locale_charset
08011ca8 g     O .bss	00000004 __malloc_top_pad
08010004 g     O .rwdata	00000004 __mb_cur_max
0800483c g     F .text	0000000c _localeconv_r
080056d8 g     F .text	0000003c __i2b
080063d0 g     F .text	00000054 _sbrk_r
08010024 g     O .rwdata	00000004 alt_max_fd
08011ca4 g     O .bss	00000004 __malloc_max_sbrked_mem
08009434 g     F .text	000008ac .hidden __adddf3
08005ee8 g     F .text	0000010c __b2d
08008e70 g     F .text	000005c4 .hidden __umoddi3
0800fffc g     O .rwdata	00000004 _global_impure_ptr
08008204 g     F .text	00000564 _realloc_r
08011df4 g       *ABS*	00000000 __bss_end
0800d2e8 g     F .text	000000f0 alt_iic_isr_register
0800d8dc g     F .text	00000108 alt_tick
08008874 g     F .text	000005fc .hidden __udivdi3
0800e1a0 g     O .rodata	00000028 __mprec_bigtens
080054bc g     F .text	00000104 __s2b
0800bbcc g     F .text	000000a8 .hidden __floatunsidf
08005c28 g     F .text	00000060 __mcmp
0800d29c g     F .text	0000004c alt_ic_irq_enabled
0800d840 g     F .text	0000009c alt_alarm_stop
08011cbc g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
0800fe50 g     O .rwdata	00000028 alt_dev_null
0800cf2c g     F .text	00000020 alt_dcache_flush_all
080055c0 g     F .text	00000068 __hi0bits
0800ba70 g     F .text	00000080 .hidden __fixdfsi
08010038 g       *ABS*	00000000 __ram_rwdata_end
0801001c g     O .rwdata	00000008 alt_dev_list
0800e3dc g       *ABS*	00000000 __ram_rodata_end
0800a814 g     F .text	000000f4 .hidden __ledf2
080059a0 g     F .text	00000140 __pow5mult
08011c9c g     O .bss	00000004 __nlocale_changed
080009cc g     F .text	00000058 .hidden __umodsi3
08011df4 g       *ABS*	00000000 end
0800c19c g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0800e094 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800cb18 g     F .text	0000007c alt_avalon_timer_sc_init
0800bc74 g     F .text	00000064 .hidden __clzsi2
0800c87c g     F .text	00000224 altera_avalon_jtag_uart_write
08005078 g     F .text	000000e4 memchr
08000ac8 g     F .text	00000058 _sprintf_r
08007c70 g     F .text	00000310 _free_r
08004818 g     F .text	00000010 __locale_mb_cur_max
0800dee0 g     F .text	00000180 __call_exitprocs
08011c98 g     O .bss	00000004 __mlocale_changed
08010008 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
08011cc0 g     O .bss	00000004 _alt_tick_rate
08000a64 g     F .text	00000064 rand
08005ae0 g     F .text	00000148 __lshift
08011cc4 g     O .bss	00000004 _alt_nticks
0800bfd4 g     F .text	00000064 alt_sys_init
08006500 g     F .text	000001d0 __ssprint_r
0800ddc8 g     F .text	00000118 __register_exitproc
08005714 g     F .text	0000028c __multiply
0800c508 g     F .text	00000068 altera_avalon_jtag_uart_close
08000a24 g     F .text	00000028 .hidden __mulsi3
0800e3dc g       *ABS*	00000000 __ram_rwdata_start
0800e094 g       *ABS*	00000000 __ram_rodata_start
08011ccc g     O .bss	00000028 __malloc_current_mallinfo
08005ff4 g     F .text	0000014c __d2b
0800c038 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800dba0 g     F .text	000000c4 alt_get_fd
0800ccc0 g     F .text	00000158 alt_busy_sleep
0800dd4c g     F .text	0000007c memcmp
0800c0f8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08011df4 g       *ABS*	00000000 __alt_stack_base
0800c148 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08009ce0 g     F .text	000009d0 .hidden __divdf3
08006258 g     F .text	00000078 __copybits
0800e9e8 g     O .rwdata	00000408 __malloc_av_
0800a908 g     F .text	0000086c .hidden __muldf3
0800da98 g     F .text	00000108 alt_find_file
0800cfb4 g     F .text	000000a4 alt_dev_llist_insert
0800be40 g     F .text	00000024 __malloc_lock
0800be88 g     F .text	000000b0 sbrk
08000c24 g     F .text	000022bc ___svfprintf_internal_r
08007a70 g     F .text	000000dc _calloc_r
08011c94 g       *ABS*	00000000 __bss_start
080080dc g     F .text	00000128 memset
08000600 g     F .text	00000270 main
08011cb8 g     O .bss	00000004 alt_envp
08011ca0 g     O .bss	00000004 __malloc_max_total_mem
0800c098 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08000a4c g     F .text	00000018 srand
0c000000 g       *ABS*	00000000 __alt_heap_limit
08003108 g     F .text	00001688 _dtoa_r
0800486c g     F .text	0000080c _malloc_r
08010028 g     O .rwdata	00000004 alt_errno
08000870 g     F .text	00000084 .hidden __divsi3
08000580 g     F .text	00000080 setColorPalette
08007b4c g     F .text	00000124 _malloc_trim_r
0800e094 g       *ABS*	00000000 __CTOR_END__
08006424 g     F .text	000000dc strcmp
0800e094 g       *ABS*	00000000 __flash_rodata_start
0800e094 g       *ABS*	00000000 __DTOR_LIST__
0800a6b0 g     F .text	00000088 .hidden __nedf2
0800bf9c g     F .text	00000038 alt_irq_init
0800d7bc g     F .text	00000084 alt_release_fd
08000b20 g     F .text	0000006c sprintf
0800e2b0 g     O .rodata	00000100 .hidden __clz_tab
08011c94 g     O .bss	00000004 _PathLocale
0800dd00 g     F .text	00000014 atexit
08004848 g     F .text	00000018 setlocale
08010000 g     O .rwdata	00000004 _impure_ptr
08011cb0 g     O .bss	00000004 alt_argc
0800d0b8 g     F .text	00000060 _do_dtors
08004834 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08005e84 g     F .text	00000064 __ulp
08010014 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08004860 g     F .text	0000000c localeconv
0800d138 g     F .text	00000050 alt_ic_isr_register
08010038 g       *ABS*	00000000 _edata
08011df4 g       *ABS*	00000000 _end
08000230 g       *ABS*	00000000 __ram_exceptions_end
0800c570 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08000470 g     F .text	00000110 textVGADrawColorText
0800d210 g     F .text	0000008c alt_ic_irq_disable
0801000c g     O .rwdata	00000004 __malloc_trim_threshold
08004828 g     F .text	0000000c __locale_msgcharset
0800dd14 g     F .text	00000038 exit
08005c88 g     F .text	000001fc __mdiff
080008f4 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800e060 g     F .text	00000034 _exit
0800cb94 g     F .text	0000012c alt_alarm_start
08008768 g     F .text	0000010c .hidden __muldi3
08000b8c g     F .text	00000098 strlen
0800d660 g     F .text	0000015c open
0800a738 g     F .text	000000dc .hidden __gedf2
0800d118 g     F .text	00000020 alt_icache_flush_all
0801002c g     O .rwdata	00000004 alt_priority_mask
0800d188 g     F .text	00000088 alt_ic_irq_enable
0800b174 g     F .text	000008fc .hidden __subdf3
08005628 g     F .text	000000b0 __lo0bits
08010030 g     O .rwdata	00000008 alt_alarm_list
0800d058 g     F .text	00000060 _do_ctors
0800ce54 g     F .text	000000d8 close
0800026c g     F .text	000001b4 paletteTest
0800bd40 g     F .text	00000084 alt_load
08005374 g     F .text	00000148 __multadd
0800534c g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10873d04 	addi	r2,r2,7412
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10873d04 	addi	r2,r2,7412
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a73417 	ldw	r2,-25392(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a73417 	ldw	r2,-25392(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d69ffe14 	ori	gp,gp,32760
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	10872514 	ori	r2,r2,7316

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18c77d14 	ori	r3,r3,7668

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	800bd400 	call	800bd40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	800bdc40 	call	800bdc4 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <paletteTest>:
#include <string.h>
#include <alt_types.h>
#include "text_mode_vga_color.h"

void paletteTest()
{
 800026c:	defffa04 	addi	sp,sp,-24
 8000270:	dfc00515 	stw	ra,20(sp)
 8000274:	df000415 	stw	fp,16(sp)
 8000278:	dc400315 	stw	r17,12(sp)
 800027c:	dc000215 	stw	r16,8(sp)
 8000280:	df000404 	addi	fp,sp,16
	textVGAColorClr();
 8000284:	80004200 	call	8000420 <textVGAColorClr>
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);
 8000288:	00800044 	movi	r2,1
 800028c:	d8800015 	stw	r2,0(sp)
 8000290:	000f883a 	mov	r7,zero
 8000294:	000d883a 	mov	r6,zero
 8000298:	000b883a 	mov	r5,zero
 800029c:	01020074 	movhi	r4,2049
 80002a0:	21382504 	addi	r4,r4,-8044
 80002a4:	80004700 	call	8000470 <textVGADrawColorText>

	for (int i = 0; i < 100; i ++)
 80002a8:	e03ffd15 	stw	zero,-12(fp)
 80002ac:	00005106 	br	80003f4 <paletteTest+0x188>
	{
		usleep (20000);
 80002b0:	01138804 	movi	r4,20000
 80002b4:	800bf380 	call	800bf38 <usleep>
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
 80002b8:	8000a640 	call	8000a64 <rand>
 80002bc:	1007883a 	mov	r3,r2
 80002c0:	00a00034 	movhi	r2,32768
 80002c4:	108003c4 	addi	r2,r2,15
 80002c8:	1884703a 	and	r2,r3,r2
 80002cc:	1000040e 	bge	r2,zero,80002e0 <paletteTest+0x74>
 80002d0:	10bfffc4 	addi	r2,r2,-1
 80002d4:	00fffc04 	movi	r3,-16
 80002d8:	10c4b03a 	or	r2,r2,r3
 80002dc:	10800044 	addi	r2,r2,1
 80002e0:	14003fcc 	andi	r16,r2,255
 80002e4:	8000a640 	call	8000a64 <rand>
 80002e8:	1007883a 	mov	r3,r2
 80002ec:	00a00034 	movhi	r2,32768
 80002f0:	108003c4 	addi	r2,r2,15
 80002f4:	1884703a 	and	r2,r3,r2
 80002f8:	1000040e 	bge	r2,zero,800030c <paletteTest+0xa0>
 80002fc:	10bfffc4 	addi	r2,r2,-1
 8000300:	00fffc04 	movi	r3,-16
 8000304:	10c4b03a 	or	r2,r2,r3
 8000308:	10800044 	addi	r2,r2,1
 800030c:	14403fcc 	andi	r17,r2,255
 8000310:	8000a640 	call	8000a64 <rand>
 8000314:	1007883a 	mov	r3,r2
 8000318:	00a00034 	movhi	r2,32768
 800031c:	108003c4 	addi	r2,r2,15
 8000320:	1884703a 	and	r2,r3,r2
 8000324:	1000040e 	bge	r2,zero,8000338 <paletteTest+0xcc>
 8000328:	10bfffc4 	addi	r2,r2,-1
 800032c:	00fffc04 	movi	r3,-16
 8000330:	10c4b03a 	or	r2,r2,r3
 8000334:	10800044 	addi	r2,r2,1
 8000338:	10803fcc 	andi	r2,r2,255
 800033c:	100f883a 	mov	r7,r2
 8000340:	880d883a 	mov	r6,r17
 8000344:	800b883a 	mov	r5,r16
 8000348:	0009883a 	mov	r4,zero
 800034c:	80005800 	call	8000580 <setColorPalette>
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
 8000350:	8000a640 	call	8000a64 <rand>
 8000354:	1007883a 	mov	r3,r2
 8000358:	00a00034 	movhi	r2,32768
 800035c:	108003c4 	addi	r2,r2,15
 8000360:	1884703a 	and	r2,r3,r2
 8000364:	1000040e 	bge	r2,zero,8000378 <paletteTest+0x10c>
 8000368:	10bfffc4 	addi	r2,r2,-1
 800036c:	00fffc04 	movi	r3,-16
 8000370:	10c4b03a 	or	r2,r2,r3
 8000374:	10800044 	addi	r2,r2,1
 8000378:	14003fcc 	andi	r16,r2,255
 800037c:	8000a640 	call	8000a64 <rand>
 8000380:	1007883a 	mov	r3,r2
 8000384:	00a00034 	movhi	r2,32768
 8000388:	108003c4 	addi	r2,r2,15
 800038c:	1884703a 	and	r2,r3,r2
 8000390:	1000040e 	bge	r2,zero,80003a4 <paletteTest+0x138>
 8000394:	10bfffc4 	addi	r2,r2,-1
 8000398:	00fffc04 	movi	r3,-16
 800039c:	10c4b03a 	or	r2,r2,r3
 80003a0:	10800044 	addi	r2,r2,1
 80003a4:	14403fcc 	andi	r17,r2,255
 80003a8:	8000a640 	call	8000a64 <rand>
 80003ac:	1007883a 	mov	r3,r2
 80003b0:	00a00034 	movhi	r2,32768
 80003b4:	108003c4 	addi	r2,r2,15
 80003b8:	1884703a 	and	r2,r3,r2
 80003bc:	1000040e 	bge	r2,zero,80003d0 <paletteTest+0x164>
 80003c0:	10bfffc4 	addi	r2,r2,-1
 80003c4:	00fffc04 	movi	r3,-16
 80003c8:	10c4b03a 	or	r2,r2,r3
 80003cc:	10800044 	addi	r2,r2,1
 80003d0:	10803fcc 	andi	r2,r2,255
 80003d4:	100f883a 	mov	r7,r2
 80003d8:	880d883a 	mov	r6,r17
 80003dc:	800b883a 	mov	r5,r16
 80003e0:	01000044 	movi	r4,1
 80003e4:	80005800 	call	8000580 <setColorPalette>
void paletteTest()
{
	textVGAColorClr();
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);

	for (int i = 0; i < 100; i ++)
 80003e8:	e0bffd17 	ldw	r2,-12(fp)
 80003ec:	10800044 	addi	r2,r2,1
 80003f0:	e0bffd15 	stw	r2,-12(fp)
 80003f4:	e0bffd17 	ldw	r2,-12(fp)
 80003f8:	10801910 	cmplti	r2,r2,100
 80003fc:	103fac1e 	bne	r2,zero,80002b0 <__alt_data_end+0xfc0002b0>
		usleep (20000);
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
	}

}
 8000400:	0001883a 	nop
 8000404:	e6fffe04 	addi	sp,fp,-8
 8000408:	dfc00317 	ldw	ra,12(sp)
 800040c:	df000217 	ldw	fp,8(sp)
 8000410:	dc400117 	ldw	r17,4(sp)
 8000414:	dc000017 	ldw	r16,0(sp)
 8000418:	dec00404 	addi	sp,sp,16
 800041c:	f800283a 	ret

08000420 <textVGAColorClr>:

void textVGAColorClr()
{
 8000420:	defffe04 	addi	sp,sp,-8
 8000424:	df000115 	stw	fp,4(sp)
 8000428:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 800042c:	e03fff15 	stw	zero,-4(fp)
 8000430:	00000706 	br	8000450 <textVGAColorClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 8000434:	d0e00017 	ldw	r3,-32768(gp)
 8000438:	e0bfff17 	ldw	r2,-4(fp)
 800043c:	1885883a 	add	r2,r3,r2
 8000440:	10000005 	stb	zero,0(r2)

}

void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 8000444:	e0bfff17 	ldw	r2,-4(fp)
 8000448:	10800044 	addi	r2,r2,1
 800044c:	e0bfff15 	stw	r2,-4(fp)
 8000450:	e0bfff17 	ldw	r2,-4(fp)
 8000454:	1084b010 	cmplti	r2,r2,4800
 8000458:	103ff61e 	bne	r2,zero,8000434 <__alt_data_end+0xfc000434>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
 800045c:	0001883a 	nop
 8000460:	e037883a 	mov	sp,fp
 8000464:	df000017 	ldw	fp,0(sp)
 8000468:	dec00104 	addi	sp,sp,4
 800046c:	f800283a 	ret

08000470 <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
 8000470:	defff704 	addi	sp,sp,-36
 8000474:	dfc00815 	stw	ra,32(sp)
 8000478:	df000715 	stw	fp,28(sp)
 800047c:	dc000615 	stw	r16,24(sp)
 8000480:	df000704 	addi	fp,sp,28
 8000484:	e13ffa15 	stw	r4,-24(fp)
 8000488:	e17ffb15 	stw	r5,-20(fp)
 800048c:	e1bffc15 	stw	r6,-16(fp)
 8000490:	3807883a 	mov	r3,r7
 8000494:	e0800217 	ldw	r2,8(fp)
 8000498:	e0fffd05 	stb	r3,-12(fp)
 800049c:	e0bffe05 	stb	r2,-8(fp)
	int i = 0;
 80004a0:	e03ff915 	stw	zero,-28(fp)
	while (str[i]!=0)
 80004a4:	00002706 	br	8000544 <textVGADrawColorText+0xd4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
 80004a8:	d4200017 	ldw	r16,-32768(gp)
 80004ac:	01401404 	movi	r5,80
 80004b0:	e13ffc17 	ldw	r4,-16(fp)
 80004b4:	8000a240 	call	8000a24 <__mulsi3>
 80004b8:	1007883a 	mov	r3,r2
 80004bc:	e0bffb17 	ldw	r2,-20(fp)
 80004c0:	1887883a 	add	r3,r3,r2
 80004c4:	e0bff917 	ldw	r2,-28(fp)
 80004c8:	1885883a 	add	r2,r3,r2
 80004cc:	1085883a 	add	r2,r2,r2
 80004d0:	1009883a 	mov	r4,r2
 80004d4:	e0bffe03 	ldbu	r2,-8(fp)
 80004d8:	1004913a 	slli	r2,r2,4
 80004dc:	1007883a 	mov	r3,r2
 80004e0:	e0bffd03 	ldbu	r2,-12(fp)
 80004e4:	1884b03a 	or	r2,r3,r2
 80004e8:	1007883a 	mov	r3,r2
 80004ec:	8105883a 	add	r2,r16,r4
 80004f0:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
 80004f4:	d4200017 	ldw	r16,-32768(gp)
 80004f8:	01401404 	movi	r5,80
 80004fc:	e13ffc17 	ldw	r4,-16(fp)
 8000500:	8000a240 	call	8000a24 <__mulsi3>
 8000504:	1007883a 	mov	r3,r2
 8000508:	e0bffb17 	ldw	r2,-20(fp)
 800050c:	1887883a 	add	r3,r3,r2
 8000510:	e0bff917 	ldw	r2,-28(fp)
 8000514:	1885883a 	add	r2,r3,r2
 8000518:	1085883a 	add	r2,r2,r2
 800051c:	10800044 	addi	r2,r2,1
 8000520:	e0fff917 	ldw	r3,-28(fp)
 8000524:	e13ffa17 	ldw	r4,-24(fp)
 8000528:	20c7883a 	add	r3,r4,r3
 800052c:	18c00003 	ldbu	r3,0(r3)
 8000530:	8085883a 	add	r2,r16,r2
 8000534:	10c00005 	stb	r3,0(r2)
		i++;
 8000538:	e0bff917 	ldw	r2,-28(fp)
 800053c:	10800044 	addi	r2,r2,1
 8000540:	e0bff915 	stw	r2,-28(fp)
}

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	int i = 0;
	while (str[i]!=0)
 8000544:	e0bff917 	ldw	r2,-28(fp)
 8000548:	e0fffa17 	ldw	r3,-24(fp)
 800054c:	1885883a 	add	r2,r3,r2
 8000550:	10800003 	ldbu	r2,0(r2)
 8000554:	10803fcc 	andi	r2,r2,255
 8000558:	1080201c 	xori	r2,r2,128
 800055c:	10bfe004 	addi	r2,r2,-128
 8000560:	103fd11e 	bne	r2,zero,80004a8 <__alt_data_end+0xfc0004a8>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
		i++;
	}
}
 8000564:	0001883a 	nop
 8000568:	e6ffff04 	addi	sp,fp,-4
 800056c:	dfc00217 	ldw	ra,8(sp)
 8000570:	df000117 	ldw	fp,4(sp)
 8000574:	dc000017 	ldw	r16,0(sp)
 8000578:	dec00304 	addi	sp,sp,12
 800057c:	f800283a 	ret

08000580 <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
 8000580:	defffb04 	addi	sp,sp,-20
 8000584:	df000415 	stw	fp,16(sp)
 8000588:	df000404 	addi	fp,sp,16
 800058c:	2011883a 	mov	r8,r4
 8000590:	2809883a 	mov	r4,r5
 8000594:	3007883a 	mov	r3,r6
 8000598:	3805883a 	mov	r2,r7
 800059c:	e23ffc05 	stb	r8,-16(fp)
 80005a0:	e13ffd05 	stb	r4,-12(fp)
 80005a4:	e0fffe05 	stb	r3,-8(fp)
 80005a8:	e0bfff05 	stb	r2,-4(fp)
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)

		//vga_ctrl->PALETTE[color] = red << 9 | green << 5 | blue << 1;
	vga_ctrl->PALETTE[color] = red << 9 | green << 5 | blue << 1;
 80005ac:	d0e00017 	ldw	r3,-32768(gp)
 80005b0:	e13ffc03 	ldbu	r4,-16(fp)
 80005b4:	e0bffd03 	ldbu	r2,-12(fp)
 80005b8:	100a927a 	slli	r5,r2,9
 80005bc:	e0bffe03 	ldbu	r2,-8(fp)
 80005c0:	1004917a 	slli	r2,r2,5
 80005c4:	288ab03a 	or	r5,r5,r2
 80005c8:	e0bfff03 	ldbu	r2,-4(fp)
 80005cc:	1085883a 	add	r2,r2,r2
 80005d0:	2884b03a 	or	r2,r5,r2
 80005d4:	100b883a 	mov	r5,r2
 80005d8:	20820004 	addi	r2,r4,2048
 80005dc:	1085883a 	add	r2,r2,r2
 80005e0:	1085883a 	add	r2,r2,r2
 80005e4:	1885883a 	add	r2,r3,r2
 80005e8:	11400015 	stw	r5,0(r2)

}
 80005ec:	0001883a 	nop
 80005f0:	e037883a 	mov	sp,fp
 80005f4:	df000017 	ldw	fp,0(sp)
 80005f8:	dec00104 	addi	sp,sp,4
 80005fc:	f800283a 	ret

08000600 <main>:


int main()
{
 8000600:	deffe004 	addi	sp,sp,-128
 8000604:	dfc01f15 	stw	ra,124(sp)
 8000608:	df001e15 	stw	fp,120(sp)
 800060c:	dcc01d15 	stw	r19,116(sp)
 8000610:	dc801c15 	stw	r18,112(sp)
 8000614:	dc401b15 	stw	r17,108(sp)
 8000618:	dc001a15 	stw	r16,104(sp)
 800061c:	df001e04 	addi	fp,sp,120
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
 8000620:	80004200 	call	8000420 <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
 8000624:	e03fe515 	stw	zero,-108(fp)
 8000628:	00002806 	br	80006cc <main+0xcc>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 800062c:	e0bfe517 	ldw	r2,-108(fp)
 8000630:	14403fcc 	andi	r17,r2,255
 8000634:	04020074 	movhi	r16,2049
 8000638:	8438f704 	addi	r16,r16,-7204
 800063c:	e0bfe517 	ldw	r2,-108(fp)
 8000640:	014005c4 	movi	r5,23
 8000644:	1009883a 	mov	r4,r2
 8000648:	8000a240 	call	8000a24 <__mulsi3>
 800064c:	8085883a 	add	r2,r16,r2
 8000650:	10800504 	addi	r2,r2,20
 8000654:	10800003 	ldbu	r2,0(r2)
 8000658:	14803fcc 	andi	r18,r2,255
 800065c:	04020074 	movhi	r16,2049
 8000660:	8438f704 	addi	r16,r16,-7204
 8000664:	e0bfe517 	ldw	r2,-108(fp)
 8000668:	014005c4 	movi	r5,23
 800066c:	1009883a 	mov	r4,r2
 8000670:	8000a240 	call	8000a24 <__mulsi3>
 8000674:	8085883a 	add	r2,r16,r2
 8000678:	10800544 	addi	r2,r2,21
 800067c:	10800003 	ldbu	r2,0(r2)
 8000680:	14c03fcc 	andi	r19,r2,255
 8000684:	04020074 	movhi	r16,2049
 8000688:	8438f704 	addi	r16,r16,-7204
 800068c:	e0bfe517 	ldw	r2,-108(fp)
 8000690:	014005c4 	movi	r5,23
 8000694:	1009883a 	mov	r4,r2
 8000698:	8000a240 	call	8000a24 <__mulsi3>
 800069c:	8085883a 	add	r2,r16,r2
 80006a0:	10800584 	addi	r2,r2,22
 80006a4:	10800003 	ldbu	r2,0(r2)
 80006a8:	10803fcc 	andi	r2,r2,255
 80006ac:	100f883a 	mov	r7,r2
 80006b0:	980d883a 	mov	r6,r19
 80006b4:	900b883a 	mov	r5,r18
 80006b8:	8809883a 	mov	r4,r17
 80006bc:	80005800 	call	8000580 <setColorPalette>
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
 80006c0:	e0bfe517 	ldw	r2,-108(fp)
 80006c4:	10800044 	addi	r2,r2,1
 80006c8:	e0bfe515 	stw	r2,-108(fp)
 80006cc:	e0bfe517 	ldw	r2,-108(fp)
 80006d0:	10800410 	cmplti	r2,r2,16
 80006d4:	103fd51e 	bne	r2,zero,800062c <__alt_data_end+0xfc00062c>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	paletteTest ();
 80006d8:	800026c0 	call	800026c <paletteTest>
	while (1)
	{
		fg = rand() % 16;
 80006dc:	8000a640 	call	8000a64 <rand>
 80006e0:	1007883a 	mov	r3,r2
 80006e4:	00a00034 	movhi	r2,32768
 80006e8:	108003c4 	addi	r2,r2,15
 80006ec:	1884703a 	and	r2,r3,r2
 80006f0:	1000040e 	bge	r2,zero,8000704 <main+0x104>
 80006f4:	10bfffc4 	addi	r2,r2,-1
 80006f8:	00fffc04 	movi	r3,-16
 80006fc:	10c4b03a 	or	r2,r2,r3
 8000700:	10800044 	addi	r2,r2,1
 8000704:	e0bfe315 	stw	r2,-116(fp)
		bg = rand() % 16;
 8000708:	8000a640 	call	8000a64 <rand>
 800070c:	1007883a 	mov	r3,r2
 8000710:	00a00034 	movhi	r2,32768
 8000714:	108003c4 	addi	r2,r2,15
 8000718:	1884703a 	and	r2,r3,r2
 800071c:	1000040e 	bge	r2,zero,8000730 <main+0x130>
 8000720:	10bfffc4 	addi	r2,r2,-1
 8000724:	00fffc04 	movi	r3,-16
 8000728:	10c4b03a 	or	r2,r2,r3
 800072c:	10800044 	addi	r2,r2,1
 8000730:	e0bfe415 	stw	r2,-112(fp)
		while (fg == bg)
 8000734:	00001606 	br	8000790 <main+0x190>
		{
			fg = rand() % 16;
 8000738:	8000a640 	call	8000a64 <rand>
 800073c:	1007883a 	mov	r3,r2
 8000740:	00a00034 	movhi	r2,32768
 8000744:	108003c4 	addi	r2,r2,15
 8000748:	1884703a 	and	r2,r3,r2
 800074c:	1000040e 	bge	r2,zero,8000760 <main+0x160>
 8000750:	10bfffc4 	addi	r2,r2,-1
 8000754:	00fffc04 	movi	r3,-16
 8000758:	10c4b03a 	or	r2,r2,r3
 800075c:	10800044 	addi	r2,r2,1
 8000760:	e0bfe315 	stw	r2,-116(fp)
			bg = rand() % 16;
 8000764:	8000a640 	call	8000a64 <rand>
 8000768:	1007883a 	mov	r3,r2
 800076c:	00a00034 	movhi	r2,32768
 8000770:	108003c4 	addi	r2,r2,15
 8000774:	1884703a 	and	r2,r3,r2
 8000778:	1000040e 	bge	r2,zero,800078c <main+0x18c>
 800077c:	10bfffc4 	addi	r2,r2,-1
 8000780:	00fffc04 	movi	r3,-16
 8000784:	10c4b03a 	or	r2,r2,r3
 8000788:	10800044 	addi	r2,r2,1
 800078c:	e0bfe415 	stw	r2,-112(fp)
	paletteTest ();
	while (1)
	{
		fg = rand() % 16;
		bg = rand() % 16;
		while (fg == bg)
 8000790:	e0ffe317 	ldw	r3,-116(fp)
 8000794:	e0bfe417 	ldw	r2,-112(fp)
 8000798:	18bfe726 	beq	r3,r2,8000738 <__alt_data_end+0xfc000738>
		{
			fg = rand() % 16;
			bg = rand() % 16;
		}
		sprintf(color_string, "Drawing %s text with %s background", colors[fg].name, colors[bg].name);
 800079c:	014005c4 	movi	r5,23
 80007a0:	e13fe317 	ldw	r4,-116(fp)
 80007a4:	8000a240 	call	8000a24 <__mulsi3>
 80007a8:	1007883a 	mov	r3,r2
 80007ac:	00820074 	movhi	r2,2049
 80007b0:	10b8f704 	addi	r2,r2,-7204
 80007b4:	18a1883a 	add	r16,r3,r2
 80007b8:	014005c4 	movi	r5,23
 80007bc:	e13fe417 	ldw	r4,-112(fp)
 80007c0:	8000a240 	call	8000a24 <__mulsi3>
 80007c4:	1007883a 	mov	r3,r2
 80007c8:	00820074 	movhi	r2,2049
 80007cc:	10b8f704 	addi	r2,r2,-7204
 80007d0:	1887883a 	add	r3,r3,r2
 80007d4:	e0bfe804 	addi	r2,fp,-96
 80007d8:	180f883a 	mov	r7,r3
 80007dc:	800d883a 	mov	r6,r16
 80007e0:	01420074 	movhi	r5,2049
 80007e4:	29783104 	addi	r5,r5,-7996
 80007e8:	1009883a 	mov	r4,r2
 80007ec:	8000b200 	call	8000b20 <sprintf>
		x = rand() % (80-strlen(color_string));
 80007f0:	8000a640 	call	8000a64 <rand>
 80007f4:	1021883a 	mov	r16,r2
 80007f8:	e0bfe804 	addi	r2,fp,-96
 80007fc:	1009883a 	mov	r4,r2
 8000800:	8000b8c0 	call	8000b8c <strlen>
 8000804:	1007883a 	mov	r3,r2
 8000808:	00801404 	movi	r2,80
 800080c:	10c5c83a 	sub	r2,r2,r3
 8000810:	100b883a 	mov	r5,r2
 8000814:	8009883a 	mov	r4,r16
 8000818:	80009cc0 	call	80009cc <__umodsi3>
 800081c:	e0bfe615 	stw	r2,-104(fp)
		y = rand() % 30;
 8000820:	8000a640 	call	8000a64 <rand>
 8000824:	01400784 	movi	r5,30
 8000828:	1009883a 	mov	r4,r2
 800082c:	80008f40 	call	80008f4 <__modsi3>
 8000830:	e0bfe715 	stw	r2,-100(fp)
		textVGADrawColorText (color_string, x, y, bg, fg);
 8000834:	e0bfe417 	ldw	r2,-112(fp)
 8000838:	11003fcc 	andi	r4,r2,255
 800083c:	e0bfe317 	ldw	r2,-116(fp)
 8000840:	10803fcc 	andi	r2,r2,255
 8000844:	e0ffe804 	addi	r3,fp,-96
 8000848:	d8800015 	stw	r2,0(sp)
 800084c:	200f883a 	mov	r7,r4
 8000850:	e1bfe717 	ldw	r6,-100(fp)
 8000854:	e17fe617 	ldw	r5,-104(fp)
 8000858:	1809883a 	mov	r4,r3
 800085c:	80004700 	call	8000470 <textVGADrawColorText>
		usleep (100000);
 8000860:	010000b4 	movhi	r4,2
 8000864:	2121a804 	addi	r4,r4,-31072
 8000868:	800bf380 	call	800bf38 <usleep>
	}
 800086c:	003f9b06 	br	80006dc <__alt_data_end+0xfc0006dc>

08000870 <__divsi3>:
 8000870:	20001b16 	blt	r4,zero,80008e0 <__divsi3+0x70>
 8000874:	000f883a 	mov	r7,zero
 8000878:	28001616 	blt	r5,zero,80008d4 <__divsi3+0x64>
 800087c:	200d883a 	mov	r6,r4
 8000880:	29001a2e 	bgeu	r5,r4,80008ec <__divsi3+0x7c>
 8000884:	00800804 	movi	r2,32
 8000888:	00c00044 	movi	r3,1
 800088c:	00000106 	br	8000894 <__divsi3+0x24>
 8000890:	10000d26 	beq	r2,zero,80008c8 <__divsi3+0x58>
 8000894:	294b883a 	add	r5,r5,r5
 8000898:	10bfffc4 	addi	r2,r2,-1
 800089c:	18c7883a 	add	r3,r3,r3
 80008a0:	293ffb36 	bltu	r5,r4,8000890 <__alt_data_end+0xfc000890>
 80008a4:	0005883a 	mov	r2,zero
 80008a8:	18000726 	beq	r3,zero,80008c8 <__divsi3+0x58>
 80008ac:	0005883a 	mov	r2,zero
 80008b0:	31400236 	bltu	r6,r5,80008bc <__divsi3+0x4c>
 80008b4:	314dc83a 	sub	r6,r6,r5
 80008b8:	10c4b03a 	or	r2,r2,r3
 80008bc:	1806d07a 	srli	r3,r3,1
 80008c0:	280ad07a 	srli	r5,r5,1
 80008c4:	183ffa1e 	bne	r3,zero,80008b0 <__alt_data_end+0xfc0008b0>
 80008c8:	38000126 	beq	r7,zero,80008d0 <__divsi3+0x60>
 80008cc:	0085c83a 	sub	r2,zero,r2
 80008d0:	f800283a 	ret
 80008d4:	014bc83a 	sub	r5,zero,r5
 80008d8:	39c0005c 	xori	r7,r7,1
 80008dc:	003fe706 	br	800087c <__alt_data_end+0xfc00087c>
 80008e0:	0109c83a 	sub	r4,zero,r4
 80008e4:	01c00044 	movi	r7,1
 80008e8:	003fe306 	br	8000878 <__alt_data_end+0xfc000878>
 80008ec:	00c00044 	movi	r3,1
 80008f0:	003fee06 	br	80008ac <__alt_data_end+0xfc0008ac>

080008f4 <__modsi3>:
 80008f4:	20001716 	blt	r4,zero,8000954 <__modsi3+0x60>
 80008f8:	000f883a 	mov	r7,zero
 80008fc:	2005883a 	mov	r2,r4
 8000900:	28001216 	blt	r5,zero,800094c <__modsi3+0x58>
 8000904:	2900162e 	bgeu	r5,r4,8000960 <__modsi3+0x6c>
 8000908:	01800804 	movi	r6,32
 800090c:	00c00044 	movi	r3,1
 8000910:	00000106 	br	8000918 <__modsi3+0x24>
 8000914:	30000a26 	beq	r6,zero,8000940 <__modsi3+0x4c>
 8000918:	294b883a 	add	r5,r5,r5
 800091c:	31bfffc4 	addi	r6,r6,-1
 8000920:	18c7883a 	add	r3,r3,r3
 8000924:	293ffb36 	bltu	r5,r4,8000914 <__alt_data_end+0xfc000914>
 8000928:	18000526 	beq	r3,zero,8000940 <__modsi3+0x4c>
 800092c:	1806d07a 	srli	r3,r3,1
 8000930:	11400136 	bltu	r2,r5,8000938 <__modsi3+0x44>
 8000934:	1145c83a 	sub	r2,r2,r5
 8000938:	280ad07a 	srli	r5,r5,1
 800093c:	183ffb1e 	bne	r3,zero,800092c <__alt_data_end+0xfc00092c>
 8000940:	38000126 	beq	r7,zero,8000948 <__modsi3+0x54>
 8000944:	0085c83a 	sub	r2,zero,r2
 8000948:	f800283a 	ret
 800094c:	014bc83a 	sub	r5,zero,r5
 8000950:	003fec06 	br	8000904 <__alt_data_end+0xfc000904>
 8000954:	0109c83a 	sub	r4,zero,r4
 8000958:	01c00044 	movi	r7,1
 800095c:	003fe706 	br	80008fc <__alt_data_end+0xfc0008fc>
 8000960:	00c00044 	movi	r3,1
 8000964:	003ff106 	br	800092c <__alt_data_end+0xfc00092c>

08000968 <__udivsi3>:
 8000968:	200d883a 	mov	r6,r4
 800096c:	2900152e 	bgeu	r5,r4,80009c4 <__udivsi3+0x5c>
 8000970:	28001416 	blt	r5,zero,80009c4 <__udivsi3+0x5c>
 8000974:	00800804 	movi	r2,32
 8000978:	00c00044 	movi	r3,1
 800097c:	00000206 	br	8000988 <__udivsi3+0x20>
 8000980:	10000e26 	beq	r2,zero,80009bc <__udivsi3+0x54>
 8000984:	28000516 	blt	r5,zero,800099c <__udivsi3+0x34>
 8000988:	294b883a 	add	r5,r5,r5
 800098c:	10bfffc4 	addi	r2,r2,-1
 8000990:	18c7883a 	add	r3,r3,r3
 8000994:	293ffa36 	bltu	r5,r4,8000980 <__alt_data_end+0xfc000980>
 8000998:	18000826 	beq	r3,zero,80009bc <__udivsi3+0x54>
 800099c:	0005883a 	mov	r2,zero
 80009a0:	31400236 	bltu	r6,r5,80009ac <__udivsi3+0x44>
 80009a4:	314dc83a 	sub	r6,r6,r5
 80009a8:	10c4b03a 	or	r2,r2,r3
 80009ac:	1806d07a 	srli	r3,r3,1
 80009b0:	280ad07a 	srli	r5,r5,1
 80009b4:	183ffa1e 	bne	r3,zero,80009a0 <__alt_data_end+0xfc0009a0>
 80009b8:	f800283a 	ret
 80009bc:	0005883a 	mov	r2,zero
 80009c0:	f800283a 	ret
 80009c4:	00c00044 	movi	r3,1
 80009c8:	003ff406 	br	800099c <__alt_data_end+0xfc00099c>

080009cc <__umodsi3>:
 80009cc:	2005883a 	mov	r2,r4
 80009d0:	2900122e 	bgeu	r5,r4,8000a1c <__umodsi3+0x50>
 80009d4:	28001116 	blt	r5,zero,8000a1c <__umodsi3+0x50>
 80009d8:	01800804 	movi	r6,32
 80009dc:	00c00044 	movi	r3,1
 80009e0:	00000206 	br	80009ec <__umodsi3+0x20>
 80009e4:	30000c26 	beq	r6,zero,8000a18 <__umodsi3+0x4c>
 80009e8:	28000516 	blt	r5,zero,8000a00 <__umodsi3+0x34>
 80009ec:	294b883a 	add	r5,r5,r5
 80009f0:	31bfffc4 	addi	r6,r6,-1
 80009f4:	18c7883a 	add	r3,r3,r3
 80009f8:	293ffa36 	bltu	r5,r4,80009e4 <__alt_data_end+0xfc0009e4>
 80009fc:	18000626 	beq	r3,zero,8000a18 <__umodsi3+0x4c>
 8000a00:	1806d07a 	srli	r3,r3,1
 8000a04:	11400136 	bltu	r2,r5,8000a0c <__umodsi3+0x40>
 8000a08:	1145c83a 	sub	r2,r2,r5
 8000a0c:	280ad07a 	srli	r5,r5,1
 8000a10:	183ffb1e 	bne	r3,zero,8000a00 <__alt_data_end+0xfc000a00>
 8000a14:	f800283a 	ret
 8000a18:	f800283a 	ret
 8000a1c:	00c00044 	movi	r3,1
 8000a20:	003ff706 	br	8000a00 <__alt_data_end+0xfc000a00>

08000a24 <__mulsi3>:
 8000a24:	0005883a 	mov	r2,zero
 8000a28:	20000726 	beq	r4,zero,8000a48 <__mulsi3+0x24>
 8000a2c:	20c0004c 	andi	r3,r4,1
 8000a30:	2008d07a 	srli	r4,r4,1
 8000a34:	18000126 	beq	r3,zero,8000a3c <__mulsi3+0x18>
 8000a38:	1145883a 	add	r2,r2,r5
 8000a3c:	294b883a 	add	r5,r5,r5
 8000a40:	203ffa1e 	bne	r4,zero,8000a2c <__alt_data_end+0xfc000a2c>
 8000a44:	f800283a 	ret
 8000a48:	f800283a 	ret

08000a4c <srand>:
 8000a4c:	00820074 	movhi	r2,2049
 8000a50:	10800004 	addi	r2,r2,0
 8000a54:	10800017 	ldw	r2,0(r2)
 8000a58:	11002915 	stw	r4,164(r2)
 8000a5c:	10002a15 	stw	zero,168(r2)
 8000a60:	f800283a 	ret

08000a64 <rand>:
 8000a64:	00820074 	movhi	r2,2049
 8000a68:	defffe04 	addi	sp,sp,-8
 8000a6c:	10800004 	addi	r2,r2,0
 8000a70:	dc000015 	stw	r16,0(sp)
 8000a74:	14000017 	ldw	r16,0(r2)
 8000a78:	dfc00115 	stw	ra,4(sp)
 8000a7c:	01932574 	movhi	r6,19605
 8000a80:	81002917 	ldw	r4,164(r16)
 8000a84:	81402a17 	ldw	r5,168(r16)
 8000a88:	01d614b4 	movhi	r7,22610
 8000a8c:	319fcb44 	addi	r6,r6,32557
 8000a90:	39fd0b44 	addi	r7,r7,-3027
 8000a94:	80087680 	call	8008768 <__muldi3>
 8000a98:	11000044 	addi	r4,r2,1
 8000a9c:	2085803a 	cmpltu	r2,r4,r2
 8000aa0:	10c7883a 	add	r3,r2,r3
 8000aa4:	00a00034 	movhi	r2,32768
 8000aa8:	10bfffc4 	addi	r2,r2,-1
 8000aac:	1884703a 	and	r2,r3,r2
 8000ab0:	81002915 	stw	r4,164(r16)
 8000ab4:	80c02a15 	stw	r3,168(r16)
 8000ab8:	dfc00117 	ldw	ra,4(sp)
 8000abc:	dc000017 	ldw	r16,0(sp)
 8000ac0:	dec00204 	addi	sp,sp,8
 8000ac4:	f800283a 	ret

08000ac8 <_sprintf_r>:
 8000ac8:	deffe404 	addi	sp,sp,-112
 8000acc:	2807883a 	mov	r3,r5
 8000ad0:	dfc01a15 	stw	ra,104(sp)
 8000ad4:	d9c01b15 	stw	r7,108(sp)
 8000ad8:	00a00034 	movhi	r2,32768
 8000adc:	10bfffc4 	addi	r2,r2,-1
 8000ae0:	02008204 	movi	r8,520
 8000ae4:	d8800215 	stw	r2,8(sp)
 8000ae8:	d8800515 	stw	r2,20(sp)
 8000aec:	d9c01b04 	addi	r7,sp,108
 8000af0:	d80b883a 	mov	r5,sp
 8000af4:	00bfffc4 	movi	r2,-1
 8000af8:	d8c00015 	stw	r3,0(sp)
 8000afc:	d8c00415 	stw	r3,16(sp)
 8000b00:	da00030d 	sth	r8,12(sp)
 8000b04:	d880038d 	sth	r2,14(sp)
 8000b08:	8000c240 	call	8000c24 <___svfprintf_internal_r>
 8000b0c:	d8c00017 	ldw	r3,0(sp)
 8000b10:	18000005 	stb	zero,0(r3)
 8000b14:	dfc01a17 	ldw	ra,104(sp)
 8000b18:	dec01c04 	addi	sp,sp,112
 8000b1c:	f800283a 	ret

08000b20 <sprintf>:
 8000b20:	deffe304 	addi	sp,sp,-116
 8000b24:	2007883a 	mov	r3,r4
 8000b28:	dfc01a15 	stw	ra,104(sp)
 8000b2c:	d9801b15 	stw	r6,108(sp)
 8000b30:	d9c01c15 	stw	r7,112(sp)
 8000b34:	01020074 	movhi	r4,2049
 8000b38:	21000004 	addi	r4,r4,0
 8000b3c:	21000017 	ldw	r4,0(r4)
 8000b40:	00a00034 	movhi	r2,32768
 8000b44:	10bfffc4 	addi	r2,r2,-1
 8000b48:	280d883a 	mov	r6,r5
 8000b4c:	02008204 	movi	r8,520
 8000b50:	d8800215 	stw	r2,8(sp)
 8000b54:	d8800515 	stw	r2,20(sp)
 8000b58:	d9c01b04 	addi	r7,sp,108
 8000b5c:	d80b883a 	mov	r5,sp
 8000b60:	00bfffc4 	movi	r2,-1
 8000b64:	d8c00015 	stw	r3,0(sp)
 8000b68:	d8c00415 	stw	r3,16(sp)
 8000b6c:	da00030d 	sth	r8,12(sp)
 8000b70:	d880038d 	sth	r2,14(sp)
 8000b74:	8000c240 	call	8000c24 <___svfprintf_internal_r>
 8000b78:	d8c00017 	ldw	r3,0(sp)
 8000b7c:	18000005 	stb	zero,0(r3)
 8000b80:	dfc01a17 	ldw	ra,104(sp)
 8000b84:	dec01d04 	addi	sp,sp,116
 8000b88:	f800283a 	ret

08000b8c <strlen>:
 8000b8c:	208000cc 	andi	r2,r4,3
 8000b90:	10002026 	beq	r2,zero,8000c14 <strlen+0x88>
 8000b94:	20800007 	ldb	r2,0(r4)
 8000b98:	10002026 	beq	r2,zero,8000c1c <strlen+0x90>
 8000b9c:	2005883a 	mov	r2,r4
 8000ba0:	00000206 	br	8000bac <strlen+0x20>
 8000ba4:	10c00007 	ldb	r3,0(r2)
 8000ba8:	18001826 	beq	r3,zero,8000c0c <strlen+0x80>
 8000bac:	10800044 	addi	r2,r2,1
 8000bb0:	10c000cc 	andi	r3,r2,3
 8000bb4:	183ffb1e 	bne	r3,zero,8000ba4 <__alt_data_end+0xfc000ba4>
 8000bb8:	10c00017 	ldw	r3,0(r2)
 8000bbc:	01ffbff4 	movhi	r7,65279
 8000bc0:	39ffbfc4 	addi	r7,r7,-257
 8000bc4:	00ca303a 	nor	r5,zero,r3
 8000bc8:	01a02074 	movhi	r6,32897
 8000bcc:	19c7883a 	add	r3,r3,r7
 8000bd0:	31a02004 	addi	r6,r6,-32640
 8000bd4:	1946703a 	and	r3,r3,r5
 8000bd8:	1986703a 	and	r3,r3,r6
 8000bdc:	1800091e 	bne	r3,zero,8000c04 <strlen+0x78>
 8000be0:	10800104 	addi	r2,r2,4
 8000be4:	10c00017 	ldw	r3,0(r2)
 8000be8:	19cb883a 	add	r5,r3,r7
 8000bec:	00c6303a 	nor	r3,zero,r3
 8000bf0:	28c6703a 	and	r3,r5,r3
 8000bf4:	1986703a 	and	r3,r3,r6
 8000bf8:	183ff926 	beq	r3,zero,8000be0 <__alt_data_end+0xfc000be0>
 8000bfc:	00000106 	br	8000c04 <strlen+0x78>
 8000c00:	10800044 	addi	r2,r2,1
 8000c04:	10c00007 	ldb	r3,0(r2)
 8000c08:	183ffd1e 	bne	r3,zero,8000c00 <__alt_data_end+0xfc000c00>
 8000c0c:	1105c83a 	sub	r2,r2,r4
 8000c10:	f800283a 	ret
 8000c14:	2005883a 	mov	r2,r4
 8000c18:	003fe706 	br	8000bb8 <__alt_data_end+0xfc000bb8>
 8000c1c:	0005883a 	mov	r2,zero
 8000c20:	f800283a 	ret

08000c24 <___svfprintf_internal_r>:
 8000c24:	deffb704 	addi	sp,sp,-292
 8000c28:	dfc04815 	stw	ra,288(sp)
 8000c2c:	ddc04615 	stw	r23,280(sp)
 8000c30:	d9402d15 	stw	r5,180(sp)
 8000c34:	d9003915 	stw	r4,228(sp)
 8000c38:	302f883a 	mov	r23,r6
 8000c3c:	d9c02e15 	stw	r7,184(sp)
 8000c40:	df004715 	stw	fp,284(sp)
 8000c44:	dd804515 	stw	r22,276(sp)
 8000c48:	dd404415 	stw	r21,272(sp)
 8000c4c:	dd004315 	stw	r20,268(sp)
 8000c50:	dcc04215 	stw	r19,264(sp)
 8000c54:	dc804115 	stw	r18,260(sp)
 8000c58:	dc404015 	stw	r17,256(sp)
 8000c5c:	dc003f15 	stw	r16,252(sp)
 8000c60:	800483c0 	call	800483c <_localeconv_r>
 8000c64:	10800017 	ldw	r2,0(r2)
 8000c68:	1009883a 	mov	r4,r2
 8000c6c:	d8803415 	stw	r2,208(sp)
 8000c70:	8000b8c0 	call	8000b8c <strlen>
 8000c74:	d8c02d17 	ldw	r3,180(sp)
 8000c78:	d8803815 	stw	r2,224(sp)
 8000c7c:	1880030b 	ldhu	r2,12(r3)
 8000c80:	1080200c 	andi	r2,r2,128
 8000c84:	10000226 	beq	r2,zero,8000c90 <___svfprintf_internal_r+0x6c>
 8000c88:	18800417 	ldw	r2,16(r3)
 8000c8c:	1006b126 	beq	r2,zero,8002754 <___svfprintf_internal_r+0x1b30>
 8000c90:	dcc03917 	ldw	r19,228(sp)
 8000c94:	d8c00404 	addi	r3,sp,16
 8000c98:	05420074 	movhi	r21,2049
 8000c9c:	d9001e04 	addi	r4,sp,120
 8000ca0:	ad784a84 	addi	r21,r21,-7894
 8000ca4:	d8c01e15 	stw	r3,120(sp)
 8000ca8:	d8002015 	stw	zero,128(sp)
 8000cac:	d8001f15 	stw	zero,124(sp)
 8000cb0:	d8003315 	stw	zero,204(sp)
 8000cb4:	d8003615 	stw	zero,216(sp)
 8000cb8:	d8003715 	stw	zero,220(sp)
 8000cbc:	1811883a 	mov	r8,r3
 8000cc0:	d8003a15 	stw	zero,232(sp)
 8000cc4:	d8003b15 	stw	zero,236(sp)
 8000cc8:	d8002f15 	stw	zero,188(sp)
 8000ccc:	d9002815 	stw	r4,160(sp)
 8000cd0:	b8800007 	ldb	r2,0(r23)
 8000cd4:	10027726 	beq	r2,zero,80016b4 <___svfprintf_internal_r+0xa90>
 8000cd8:	00c00944 	movi	r3,37
 8000cdc:	b823883a 	mov	r17,r23
 8000ce0:	10c0021e 	bne	r2,r3,8000cec <___svfprintf_internal_r+0xc8>
 8000ce4:	00001406 	br	8000d38 <___svfprintf_internal_r+0x114>
 8000ce8:	10c00326 	beq	r2,r3,8000cf8 <___svfprintf_internal_r+0xd4>
 8000cec:	8c400044 	addi	r17,r17,1
 8000cf0:	88800007 	ldb	r2,0(r17)
 8000cf4:	103ffc1e 	bne	r2,zero,8000ce8 <__alt_data_end+0xfc000ce8>
 8000cf8:	8de1c83a 	sub	r16,r17,r23
 8000cfc:	80000e26 	beq	r16,zero,8000d38 <___svfprintf_internal_r+0x114>
 8000d00:	d8c02017 	ldw	r3,128(sp)
 8000d04:	d8801f17 	ldw	r2,124(sp)
 8000d08:	45c00015 	stw	r23,0(r8)
 8000d0c:	1c07883a 	add	r3,r3,r16
 8000d10:	10800044 	addi	r2,r2,1
 8000d14:	d8c02015 	stw	r3,128(sp)
 8000d18:	44000115 	stw	r16,4(r8)
 8000d1c:	d8801f15 	stw	r2,124(sp)
 8000d20:	00c001c4 	movi	r3,7
 8000d24:	18809916 	blt	r3,r2,8000f8c <___svfprintf_internal_r+0x368>
 8000d28:	42000204 	addi	r8,r8,8
 8000d2c:	d9402f17 	ldw	r5,188(sp)
 8000d30:	2c0b883a 	add	r5,r5,r16
 8000d34:	d9402f15 	stw	r5,188(sp)
 8000d38:	88800007 	ldb	r2,0(r17)
 8000d3c:	10009a26 	beq	r2,zero,8000fa8 <___svfprintf_internal_r+0x384>
 8000d40:	8dc00044 	addi	r23,r17,1
 8000d44:	8c400047 	ldb	r17,1(r17)
 8000d48:	0021883a 	mov	r16,zero
 8000d4c:	00bfffc4 	movi	r2,-1
 8000d50:	0025883a 	mov	r18,zero
 8000d54:	dc002905 	stb	r16,164(sp)
 8000d58:	d8002785 	stb	zero,158(sp)
 8000d5c:	d8002b05 	stb	zero,172(sp)
 8000d60:	d8802a15 	stw	r2,168(sp)
 8000d64:	d8003115 	stw	zero,196(sp)
 8000d68:	05001604 	movi	r20,88
 8000d6c:	05800244 	movi	r22,9
 8000d70:	4039883a 	mov	fp,r8
 8000d74:	9021883a 	mov	r16,r18
 8000d78:	bdc00044 	addi	r23,r23,1
 8000d7c:	88bff804 	addi	r2,r17,-32
 8000d80:	a0831e36 	bltu	r20,r2,80019fc <___svfprintf_internal_r+0xdd8>
 8000d84:	100490ba 	slli	r2,r2,2
 8000d88:	00c20034 	movhi	r3,2048
 8000d8c:	18c36704 	addi	r3,r3,3484
 8000d90:	10c5883a 	add	r2,r2,r3
 8000d94:	10800017 	ldw	r2,0(r2)
 8000d98:	1000683a 	jmp	r2
 8000d9c:	08001944 	addi	zero,at,101
 8000da0:	080019fc 	xorhi	zero,at,103
 8000da4:	080019fc 	xorhi	zero,at,103
 8000da8:	08001938 	rdprs	zero,at,100
 8000dac:	080019fc 	xorhi	zero,at,103
 8000db0:	080019fc 	xorhi	zero,at,103
 8000db4:	080019fc 	xorhi	zero,at,103
 8000db8:	080019fc 	xorhi	zero,at,103
 8000dbc:	080019fc 	xorhi	zero,at,103
 8000dc0:	080019fc 	xorhi	zero,at,103
 8000dc4:	08001004 	addi	zero,at,64
 8000dc8:	08001848 	cmpgei	zero,at,97
 8000dcc:	080019fc 	xorhi	zero,at,103
 8000dd0:	08000f10 	cmplti	zero,at,60
 8000dd4:	08001028 	cmpgeui	zero,at,64
 8000dd8:	080019fc 	xorhi	zero,at,103
 8000ddc:	080010b4 	orhi	zero,at,66
 8000de0:	08001078 	rdprs	zero,at,65
 8000de4:	08001078 	rdprs	zero,at,65
 8000de8:	08001078 	rdprs	zero,at,65
 8000dec:	08001078 	rdprs	zero,at,65
 8000df0:	08001078 	rdprs	zero,at,65
 8000df4:	08001078 	rdprs	zero,at,65
 8000df8:	08001078 	rdprs	zero,at,65
 8000dfc:	08001078 	rdprs	zero,at,65
 8000e00:	08001078 	rdprs	zero,at,65
 8000e04:	080019fc 	xorhi	zero,at,103
 8000e08:	080019fc 	xorhi	zero,at,103
 8000e0c:	080019fc 	xorhi	zero,at,103
 8000e10:	080019fc 	xorhi	zero,at,103
 8000e14:	080019fc 	xorhi	zero,at,103
 8000e18:	080019fc 	xorhi	zero,at,103
 8000e1c:	080019fc 	xorhi	zero,at,103
 8000e20:	080019fc 	xorhi	zero,at,103
 8000e24:	080019fc 	xorhi	zero,at,103
 8000e28:	080019fc 	xorhi	zero,at,103
 8000e2c:	08001178 	rdprs	zero,at,69
 8000e30:	080010c0 	call	80010c <__alt_mem_onchip_memory2_0+0x80010c>
 8000e34:	080019fc 	xorhi	zero,at,103
 8000e38:	080010c0 	call	80010c <__alt_mem_onchip_memory2_0+0x80010c>
 8000e3c:	080019fc 	xorhi	zero,at,103
 8000e40:	080019fc 	xorhi	zero,at,103
 8000e44:	080019fc 	xorhi	zero,at,103
 8000e48:	080019fc 	xorhi	zero,at,103
 8000e4c:	0800116c 	andhi	zero,at,69
 8000e50:	080019fc 	xorhi	zero,at,103
 8000e54:	080019fc 	xorhi	zero,at,103
 8000e58:	08001240 	call	800124 <__alt_mem_onchip_memory2_0+0x800124>
 8000e5c:	080019fc 	xorhi	zero,at,103
 8000e60:	080019fc 	xorhi	zero,at,103
 8000e64:	080019fc 	xorhi	zero,at,103
 8000e68:	080019fc 	xorhi	zero,at,103
 8000e6c:	080019fc 	xorhi	zero,at,103
 8000e70:	080016bc 	xorhi	zero,at,90
 8000e74:	080019fc 	xorhi	zero,at,103
 8000e78:	080019fc 	xorhi	zero,at,103
 8000e7c:	08001728 	cmpgeui	zero,at,92
 8000e80:	080019fc 	xorhi	zero,at,103
 8000e84:	080019fc 	xorhi	zero,at,103
 8000e88:	080019fc 	xorhi	zero,at,103
 8000e8c:	080019fc 	xorhi	zero,at,103
 8000e90:	080019fc 	xorhi	zero,at,103
 8000e94:	080019fc 	xorhi	zero,at,103
 8000e98:	080019fc 	xorhi	zero,at,103
 8000e9c:	080019fc 	xorhi	zero,at,103
 8000ea0:	080019fc 	xorhi	zero,at,103
 8000ea4:	080019fc 	xorhi	zero,at,103
 8000ea8:	080017e4 	muli	zero,at,95
 8000eac:	08001964 	muli	zero,at,101
 8000eb0:	080010c0 	call	80010c <__alt_mem_onchip_memory2_0+0x80010c>
 8000eb4:	080010c0 	call	80010c <__alt_mem_onchip_memory2_0+0x80010c>
 8000eb8:	080010c0 	call	80010c <__alt_mem_onchip_memory2_0+0x80010c>
 8000ebc:	080019d8 	cmpnei	zero,at,103
 8000ec0:	08001964 	muli	zero,at,101
 8000ec4:	080019fc 	xorhi	zero,at,103
 8000ec8:	080019fc 	xorhi	zero,at,103
 8000ecc:	08001984 	addi	zero,at,102
 8000ed0:	080019fc 	xorhi	zero,at,103
 8000ed4:	08001998 	cmpnei	zero,at,102
 8000ed8:	08001828 	cmpgeui	zero,at,96
 8000edc:	08000f1c 	xori	zero,at,60
 8000ee0:	08001860 	cmpeqi	zero,at,97
 8000ee4:	080019fc 	xorhi	zero,at,103
 8000ee8:	0800186c 	andhi	zero,at,97
 8000eec:	080019fc 	xorhi	zero,at,103
 8000ef0:	080018d0 	cmplti	zero,at,99
 8000ef4:	080019fc 	xorhi	zero,at,103
 8000ef8:	080019fc 	xorhi	zero,at,103
 8000efc:	080018f0 	cmpltui	zero,at,99
 8000f00:	d8c03117 	ldw	r3,196(sp)
 8000f04:	d8802e15 	stw	r2,184(sp)
 8000f08:	00c7c83a 	sub	r3,zero,r3
 8000f0c:	d8c03115 	stw	r3,196(sp)
 8000f10:	84000114 	ori	r16,r16,4
 8000f14:	bc400007 	ldb	r17,0(r23)
 8000f18:	003f9706 	br	8000d78 <__alt_data_end+0xfc000d78>
 8000f1c:	00800c04 	movi	r2,48
 8000f20:	d8802705 	stb	r2,156(sp)
 8000f24:	00801e04 	movi	r2,120
 8000f28:	d8802745 	stb	r2,157(sp)
 8000f2c:	d9002a17 	ldw	r4,168(sp)
 8000f30:	d8802e17 	ldw	r2,184(sp)
 8000f34:	d8002785 	stb	zero,158(sp)
 8000f38:	e011883a 	mov	r8,fp
 8000f3c:	10c00104 	addi	r3,r2,4
 8000f40:	15000017 	ldw	r20,0(r2)
 8000f44:	002d883a 	mov	r22,zero
 8000f48:	80800094 	ori	r2,r16,2
 8000f4c:	2002b616 	blt	r4,zero,8001a28 <___svfprintf_internal_r+0xe04>
 8000f50:	00bfdfc4 	movi	r2,-129
 8000f54:	80a4703a 	and	r18,r16,r2
 8000f58:	d8c02e15 	stw	r3,184(sp)
 8000f5c:	94800094 	ori	r18,r18,2
 8000f60:	a002a01e 	bne	r20,zero,80019e4 <___svfprintf_internal_r+0xdc0>
 8000f64:	01420074 	movhi	r5,2049
 8000f68:	29784304 	addi	r5,r5,-7924
 8000f6c:	d9403a15 	stw	r5,232(sp)
 8000f70:	04401e04 	movi	r17,120
 8000f74:	d8c02a17 	ldw	r3,168(sp)
 8000f78:	0039883a 	mov	fp,zero
 8000f7c:	1801e626 	beq	r3,zero,8001718 <___svfprintf_internal_r+0xaf4>
 8000f80:	0029883a 	mov	r20,zero
 8000f84:	002d883a 	mov	r22,zero
 8000f88:	00020506 	br	80017a0 <___svfprintf_internal_r+0xb7c>
 8000f8c:	d9402d17 	ldw	r5,180(sp)
 8000f90:	d9801e04 	addi	r6,sp,120
 8000f94:	9809883a 	mov	r4,r19
 8000f98:	80065000 	call	8006500 <__ssprint_r>
 8000f9c:	1000081e 	bne	r2,zero,8000fc0 <___svfprintf_internal_r+0x39c>
 8000fa0:	da000404 	addi	r8,sp,16
 8000fa4:	003f6106 	br	8000d2c <__alt_data_end+0xfc000d2c>
 8000fa8:	d8802017 	ldw	r2,128(sp)
 8000fac:	10000426 	beq	r2,zero,8000fc0 <___svfprintf_internal_r+0x39c>
 8000fb0:	d9402d17 	ldw	r5,180(sp)
 8000fb4:	d9003917 	ldw	r4,228(sp)
 8000fb8:	d9801e04 	addi	r6,sp,120
 8000fbc:	80065000 	call	8006500 <__ssprint_r>
 8000fc0:	d8802d17 	ldw	r2,180(sp)
 8000fc4:	10c0030b 	ldhu	r3,12(r2)
 8000fc8:	d8802f17 	ldw	r2,188(sp)
 8000fcc:	18c0100c 	andi	r3,r3,64
 8000fd0:	1806251e 	bne	r3,zero,8002868 <___svfprintf_internal_r+0x1c44>
 8000fd4:	dfc04817 	ldw	ra,288(sp)
 8000fd8:	df004717 	ldw	fp,284(sp)
 8000fdc:	ddc04617 	ldw	r23,280(sp)
 8000fe0:	dd804517 	ldw	r22,276(sp)
 8000fe4:	dd404417 	ldw	r21,272(sp)
 8000fe8:	dd004317 	ldw	r20,268(sp)
 8000fec:	dcc04217 	ldw	r19,264(sp)
 8000ff0:	dc804117 	ldw	r18,260(sp)
 8000ff4:	dc404017 	ldw	r17,256(sp)
 8000ff8:	dc003f17 	ldw	r16,252(sp)
 8000ffc:	dec04904 	addi	sp,sp,292
 8001000:	f800283a 	ret
 8001004:	d9002e17 	ldw	r4,184(sp)
 8001008:	d9402e17 	ldw	r5,184(sp)
 800100c:	21000017 	ldw	r4,0(r4)
 8001010:	28800104 	addi	r2,r5,4
 8001014:	d9003115 	stw	r4,196(sp)
 8001018:	203fb916 	blt	r4,zero,8000f00 <__alt_data_end+0xfc000f00>
 800101c:	d8802e15 	stw	r2,184(sp)
 8001020:	bc400007 	ldb	r17,0(r23)
 8001024:	003f5406 	br	8000d78 <__alt_data_end+0xfc000d78>
 8001028:	bc400007 	ldb	r17,0(r23)
 800102c:	01000a84 	movi	r4,42
 8001030:	b8c00044 	addi	r3,r23,1
 8001034:	89076926 	beq	r17,r4,8002ddc <___svfprintf_internal_r+0x21b8>
 8001038:	8cbff404 	addi	r18,r17,-48
 800103c:	b486b936 	bltu	r22,r18,8002b24 <___svfprintf_internal_r+0x1f00>
 8001040:	0009883a 	mov	r4,zero
 8001044:	1823883a 	mov	r17,r3
 8001048:	01400284 	movi	r5,10
 800104c:	8000a240 	call	8000a24 <__mulsi3>
 8001050:	88c00007 	ldb	r3,0(r17)
 8001054:	1489883a 	add	r4,r2,r18
 8001058:	8dc00044 	addi	r23,r17,1
 800105c:	1cbff404 	addi	r18,r3,-48
 8001060:	b823883a 	mov	r17,r23
 8001064:	b4bff82e 	bgeu	r22,r18,8001048 <__alt_data_end+0xfc001048>
 8001068:	1823883a 	mov	r17,r3
 800106c:	20060416 	blt	r4,zero,8002880 <___svfprintf_internal_r+0x1c5c>
 8001070:	d9002a15 	stw	r4,168(sp)
 8001074:	003f4106 	br	8000d7c <__alt_data_end+0xfc000d7c>
 8001078:	8cbff404 	addi	r18,r17,-48
 800107c:	d8003115 	stw	zero,196(sp)
 8001080:	0009883a 	mov	r4,zero
 8001084:	b823883a 	mov	r17,r23
 8001088:	01400284 	movi	r5,10
 800108c:	8000a240 	call	8000a24 <__mulsi3>
 8001090:	88c00007 	ldb	r3,0(r17)
 8001094:	9089883a 	add	r4,r18,r2
 8001098:	bdc00044 	addi	r23,r23,1
 800109c:	1cbff404 	addi	r18,r3,-48
 80010a0:	b823883a 	mov	r17,r23
 80010a4:	b4bff82e 	bgeu	r22,r18,8001088 <__alt_data_end+0xfc001088>
 80010a8:	1823883a 	mov	r17,r3
 80010ac:	d9003115 	stw	r4,196(sp)
 80010b0:	003f3206 	br	8000d7c <__alt_data_end+0xfc000d7c>
 80010b4:	84002014 	ori	r16,r16,128
 80010b8:	bc400007 	ldb	r17,0(r23)
 80010bc:	003f2e06 	br	8000d78 <__alt_data_end+0xfc000d78>
 80010c0:	8025883a 	mov	r18,r16
 80010c4:	dc002903 	ldbu	r16,164(sp)
 80010c8:	e011883a 	mov	r8,fp
 80010cc:	84003fcc 	andi	r16,r16,255
 80010d0:	8007721e 	bne	r16,zero,8002e9c <___svfprintf_internal_r+0x2278>
 80010d4:	9080020c 	andi	r2,r18,8
 80010d8:	1004a526 	beq	r2,zero,8002370 <___svfprintf_internal_r+0x174c>
 80010dc:	d9002e17 	ldw	r4,184(sp)
 80010e0:	d9402e17 	ldw	r5,184(sp)
 80010e4:	d8802e17 	ldw	r2,184(sp)
 80010e8:	21000017 	ldw	r4,0(r4)
 80010ec:	29400117 	ldw	r5,4(r5)
 80010f0:	10800204 	addi	r2,r2,8
 80010f4:	d9003615 	stw	r4,216(sp)
 80010f8:	d9403715 	stw	r5,220(sp)
 80010fc:	d8802e15 	stw	r2,184(sp)
 8001100:	d9003617 	ldw	r4,216(sp)
 8001104:	d9403717 	ldw	r5,220(sp)
 8001108:	da003e15 	stw	r8,248(sp)
 800110c:	04000044 	movi	r16,1
 8001110:	800635c0 	call	800635c <__fpclassifyd>
 8001114:	da003e17 	ldw	r8,248(sp)
 8001118:	1404731e 	bne	r2,r16,80022e8 <___svfprintf_internal_r+0x16c4>
 800111c:	d9003617 	ldw	r4,216(sp)
 8001120:	d9403717 	ldw	r5,220(sp)
 8001124:	000d883a 	mov	r6,zero
 8001128:	000f883a 	mov	r7,zero
 800112c:	800a8140 	call	800a814 <__ledf2>
 8001130:	da003e17 	ldw	r8,248(sp)
 8001134:	10061b16 	blt	r2,zero,80029a4 <___svfprintf_internal_r+0x1d80>
 8001138:	df002783 	ldbu	fp,158(sp)
 800113c:	008011c4 	movi	r2,71
 8001140:	1445810e 	bge	r2,r17,8002748 <___svfprintf_internal_r+0x1b24>
 8001144:	04020074 	movhi	r16,2049
 8001148:	84383b04 	addi	r16,r16,-7956
 800114c:	00c000c4 	movi	r3,3
 8001150:	00bfdfc4 	movi	r2,-129
 8001154:	d8c02915 	stw	r3,164(sp)
 8001158:	90a4703a 	and	r18,r18,r2
 800115c:	d8c02b15 	stw	r3,172(sp)
 8001160:	d8002a15 	stw	zero,168(sp)
 8001164:	d8003215 	stw	zero,200(sp)
 8001168:	00006c06 	br	800131c <___svfprintf_internal_r+0x6f8>
 800116c:	84000214 	ori	r16,r16,8
 8001170:	bc400007 	ldb	r17,0(r23)
 8001174:	003f0006 	br	8000d78 <__alt_data_end+0xfc000d78>
 8001178:	8025883a 	mov	r18,r16
 800117c:	dc002903 	ldbu	r16,164(sp)
 8001180:	e011883a 	mov	r8,fp
 8001184:	84003fcc 	andi	r16,r16,255
 8001188:	80073f1e 	bne	r16,zero,8002e88 <___svfprintf_internal_r+0x2264>
 800118c:	94800414 	ori	r18,r18,16
 8001190:	9080080c 	andi	r2,r18,32
 8001194:	1003bb26 	beq	r2,zero,8002084 <___svfprintf_internal_r+0x1460>
 8001198:	d9002e17 	ldw	r4,184(sp)
 800119c:	20800117 	ldw	r2,4(r4)
 80011a0:	25000017 	ldw	r20,0(r4)
 80011a4:	21000204 	addi	r4,r4,8
 80011a8:	d9002e15 	stw	r4,184(sp)
 80011ac:	102d883a 	mov	r22,r2
 80011b0:	1003bd16 	blt	r2,zero,80020a8 <___svfprintf_internal_r+0x1484>
 80011b4:	d9002a17 	ldw	r4,168(sp)
 80011b8:	df002783 	ldbu	fp,158(sp)
 80011bc:	2003d016 	blt	r4,zero,8002100 <___svfprintf_internal_r+0x14dc>
 80011c0:	00ffdfc4 	movi	r3,-129
 80011c4:	a584b03a 	or	r2,r20,r22
 80011c8:	90e4703a 	and	r18,r18,r3
 80011cc:	10015026 	beq	r2,zero,8001710 <___svfprintf_internal_r+0xaec>
 80011d0:	b0037026 	beq	r22,zero,8001f94 <___svfprintf_internal_r+0x1370>
 80011d4:	dc402915 	stw	r17,164(sp)
 80011d8:	dc001e04 	addi	r16,sp,120
 80011dc:	b023883a 	mov	r17,r22
 80011e0:	402d883a 	mov	r22,r8
 80011e4:	a009883a 	mov	r4,r20
 80011e8:	880b883a 	mov	r5,r17
 80011ec:	01800284 	movi	r6,10
 80011f0:	000f883a 	mov	r7,zero
 80011f4:	8008e700 	call	8008e70 <__umoddi3>
 80011f8:	10800c04 	addi	r2,r2,48
 80011fc:	843fffc4 	addi	r16,r16,-1
 8001200:	a009883a 	mov	r4,r20
 8001204:	880b883a 	mov	r5,r17
 8001208:	80800005 	stb	r2,0(r16)
 800120c:	01800284 	movi	r6,10
 8001210:	000f883a 	mov	r7,zero
 8001214:	80088740 	call	8008874 <__udivdi3>
 8001218:	1029883a 	mov	r20,r2
 800121c:	10c4b03a 	or	r2,r2,r3
 8001220:	1823883a 	mov	r17,r3
 8001224:	103fef1e 	bne	r2,zero,80011e4 <__alt_data_end+0xfc0011e4>
 8001228:	d8c02817 	ldw	r3,160(sp)
 800122c:	dc402917 	ldw	r17,164(sp)
 8001230:	b011883a 	mov	r8,r22
 8001234:	1c07c83a 	sub	r3,r3,r16
 8001238:	d8c02b15 	stw	r3,172(sp)
 800123c:	00003106 	br	8001304 <___svfprintf_internal_r+0x6e0>
 8001240:	8025883a 	mov	r18,r16
 8001244:	dc002903 	ldbu	r16,164(sp)
 8001248:	e011883a 	mov	r8,fp
 800124c:	84003fcc 	andi	r16,r16,255
 8001250:	80070a1e 	bne	r16,zero,8002e7c <___svfprintf_internal_r+0x2258>
 8001254:	94800414 	ori	r18,r18,16
 8001258:	9080080c 	andi	r2,r18,32
 800125c:	1002f626 	beq	r2,zero,8001e38 <___svfprintf_internal_r+0x1214>
 8001260:	d9002e17 	ldw	r4,184(sp)
 8001264:	d9402a17 	ldw	r5,168(sp)
 8001268:	d8002785 	stb	zero,158(sp)
 800126c:	20800204 	addi	r2,r4,8
 8001270:	25000017 	ldw	r20,0(r4)
 8001274:	25800117 	ldw	r22,4(r4)
 8001278:	28043716 	blt	r5,zero,8002358 <___svfprintf_internal_r+0x1734>
 800127c:	013fdfc4 	movi	r4,-129
 8001280:	a586b03a 	or	r3,r20,r22
 8001284:	d8802e15 	stw	r2,184(sp)
 8001288:	9124703a 	and	r18,r18,r4
 800128c:	1802f71e 	bne	r3,zero,8001e6c <___svfprintf_internal_r+0x1248>
 8001290:	d9402a17 	ldw	r5,168(sp)
 8001294:	0039883a 	mov	fp,zero
 8001298:	2806df26 	beq	r5,zero,8002e18 <___svfprintf_internal_r+0x21f4>
 800129c:	0029883a 	mov	r20,zero
 80012a0:	002d883a 	mov	r22,zero
 80012a4:	dc001e04 	addi	r16,sp,120
 80012a8:	a006d0fa 	srli	r3,r20,3
 80012ac:	b008977a 	slli	r4,r22,29
 80012b0:	b02cd0fa 	srli	r22,r22,3
 80012b4:	a50001cc 	andi	r20,r20,7
 80012b8:	a0800c04 	addi	r2,r20,48
 80012bc:	843fffc4 	addi	r16,r16,-1
 80012c0:	20e8b03a 	or	r20,r4,r3
 80012c4:	80800005 	stb	r2,0(r16)
 80012c8:	a586b03a 	or	r3,r20,r22
 80012cc:	183ff61e 	bne	r3,zero,80012a8 <__alt_data_end+0xfc0012a8>
 80012d0:	90c0004c 	andi	r3,r18,1
 80012d4:	18013f26 	beq	r3,zero,80017d4 <___svfprintf_internal_r+0xbb0>
 80012d8:	10803fcc 	andi	r2,r2,255
 80012dc:	1080201c 	xori	r2,r2,128
 80012e0:	10bfe004 	addi	r2,r2,-128
 80012e4:	00c00c04 	movi	r3,48
 80012e8:	10c13a26 	beq	r2,r3,80017d4 <___svfprintf_internal_r+0xbb0>
 80012ec:	80ffffc5 	stb	r3,-1(r16)
 80012f0:	d8c02817 	ldw	r3,160(sp)
 80012f4:	80bfffc4 	addi	r2,r16,-1
 80012f8:	1021883a 	mov	r16,r2
 80012fc:	1887c83a 	sub	r3,r3,r2
 8001300:	d8c02b15 	stw	r3,172(sp)
 8001304:	d8802b17 	ldw	r2,172(sp)
 8001308:	d9002a17 	ldw	r4,168(sp)
 800130c:	1100010e 	bge	r2,r4,8001314 <___svfprintf_internal_r+0x6f0>
 8001310:	2005883a 	mov	r2,r4
 8001314:	d8802915 	stw	r2,164(sp)
 8001318:	d8003215 	stw	zero,200(sp)
 800131c:	e7003fcc 	andi	fp,fp,255
 8001320:	e700201c 	xori	fp,fp,128
 8001324:	e73fe004 	addi	fp,fp,-128
 8001328:	e0000326 	beq	fp,zero,8001338 <___svfprintf_internal_r+0x714>
 800132c:	d8c02917 	ldw	r3,164(sp)
 8001330:	18c00044 	addi	r3,r3,1
 8001334:	d8c02915 	stw	r3,164(sp)
 8001338:	90c0008c 	andi	r3,r18,2
 800133c:	d8c02c15 	stw	r3,176(sp)
 8001340:	18000326 	beq	r3,zero,8001350 <___svfprintf_internal_r+0x72c>
 8001344:	d8c02917 	ldw	r3,164(sp)
 8001348:	18c00084 	addi	r3,r3,2
 800134c:	d8c02915 	stw	r3,164(sp)
 8001350:	90c0210c 	andi	r3,r18,132
 8001354:	d8c03015 	stw	r3,192(sp)
 8001358:	1801c31e 	bne	r3,zero,8001a68 <___svfprintf_internal_r+0xe44>
 800135c:	d9003117 	ldw	r4,196(sp)
 8001360:	d8c02917 	ldw	r3,164(sp)
 8001364:	20e9c83a 	sub	r20,r4,r3
 8001368:	0501bf0e 	bge	zero,r20,8001a68 <___svfprintf_internal_r+0xe44>
 800136c:	02400404 	movi	r9,16
 8001370:	d8c02017 	ldw	r3,128(sp)
 8001374:	d8801f17 	ldw	r2,124(sp)
 8001378:	4d053d0e 	bge	r9,r20,8002870 <___svfprintf_internal_r+0x1c4c>
 800137c:	01420074 	movhi	r5,2049
 8001380:	29784e84 	addi	r5,r5,-7878
 8001384:	dc403c15 	stw	r17,240(sp)
 8001388:	d9403515 	stw	r5,212(sp)
 800138c:	a023883a 	mov	r17,r20
 8001390:	482d883a 	mov	r22,r9
 8001394:	9029883a 	mov	r20,r18
 8001398:	070001c4 	movi	fp,7
 800139c:	8025883a 	mov	r18,r16
 80013a0:	dc002d17 	ldw	r16,180(sp)
 80013a4:	00000306 	br	80013b4 <___svfprintf_internal_r+0x790>
 80013a8:	8c7ffc04 	addi	r17,r17,-16
 80013ac:	42000204 	addi	r8,r8,8
 80013b0:	b440130e 	bge	r22,r17,8001400 <___svfprintf_internal_r+0x7dc>
 80013b4:	01020074 	movhi	r4,2049
 80013b8:	18c00404 	addi	r3,r3,16
 80013bc:	10800044 	addi	r2,r2,1
 80013c0:	21384e84 	addi	r4,r4,-7878
 80013c4:	41000015 	stw	r4,0(r8)
 80013c8:	45800115 	stw	r22,4(r8)
 80013cc:	d8c02015 	stw	r3,128(sp)
 80013d0:	d8801f15 	stw	r2,124(sp)
 80013d4:	e0bff40e 	bge	fp,r2,80013a8 <__alt_data_end+0xfc0013a8>
 80013d8:	d9801e04 	addi	r6,sp,120
 80013dc:	800b883a 	mov	r5,r16
 80013e0:	9809883a 	mov	r4,r19
 80013e4:	80065000 	call	8006500 <__ssprint_r>
 80013e8:	103ef51e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 80013ec:	8c7ffc04 	addi	r17,r17,-16
 80013f0:	d8c02017 	ldw	r3,128(sp)
 80013f4:	d8801f17 	ldw	r2,124(sp)
 80013f8:	da000404 	addi	r8,sp,16
 80013fc:	b47fed16 	blt	r22,r17,80013b4 <__alt_data_end+0xfc0013b4>
 8001400:	9021883a 	mov	r16,r18
 8001404:	a025883a 	mov	r18,r20
 8001408:	8829883a 	mov	r20,r17
 800140c:	dc403c17 	ldw	r17,240(sp)
 8001410:	d9403517 	ldw	r5,212(sp)
 8001414:	a0c7883a 	add	r3,r20,r3
 8001418:	10800044 	addi	r2,r2,1
 800141c:	41400015 	stw	r5,0(r8)
 8001420:	45000115 	stw	r20,4(r8)
 8001424:	d8c02015 	stw	r3,128(sp)
 8001428:	d8801f15 	stw	r2,124(sp)
 800142c:	010001c4 	movi	r4,7
 8001430:	2082c116 	blt	r4,r2,8001f38 <___svfprintf_internal_r+0x1314>
 8001434:	df002787 	ldb	fp,158(sp)
 8001438:	42000204 	addi	r8,r8,8
 800143c:	e0000c26 	beq	fp,zero,8001470 <___svfprintf_internal_r+0x84c>
 8001440:	d8801f17 	ldw	r2,124(sp)
 8001444:	d9002784 	addi	r4,sp,158
 8001448:	18c00044 	addi	r3,r3,1
 800144c:	10800044 	addi	r2,r2,1
 8001450:	41000015 	stw	r4,0(r8)
 8001454:	01000044 	movi	r4,1
 8001458:	41000115 	stw	r4,4(r8)
 800145c:	d8c02015 	stw	r3,128(sp)
 8001460:	d8801f15 	stw	r2,124(sp)
 8001464:	010001c4 	movi	r4,7
 8001468:	20825a16 	blt	r4,r2,8001dd4 <___svfprintf_internal_r+0x11b0>
 800146c:	42000204 	addi	r8,r8,8
 8001470:	d8802c17 	ldw	r2,176(sp)
 8001474:	10000c26 	beq	r2,zero,80014a8 <___svfprintf_internal_r+0x884>
 8001478:	d8801f17 	ldw	r2,124(sp)
 800147c:	d9002704 	addi	r4,sp,156
 8001480:	18c00084 	addi	r3,r3,2
 8001484:	10800044 	addi	r2,r2,1
 8001488:	41000015 	stw	r4,0(r8)
 800148c:	01000084 	movi	r4,2
 8001490:	41000115 	stw	r4,4(r8)
 8001494:	d8c02015 	stw	r3,128(sp)
 8001498:	d8801f15 	stw	r2,124(sp)
 800149c:	010001c4 	movi	r4,7
 80014a0:	20825416 	blt	r4,r2,8001df4 <___svfprintf_internal_r+0x11d0>
 80014a4:	42000204 	addi	r8,r8,8
 80014a8:	d9003017 	ldw	r4,192(sp)
 80014ac:	00802004 	movi	r2,128
 80014b0:	2081b926 	beq	r4,r2,8001b98 <___svfprintf_internal_r+0xf74>
 80014b4:	d9402a17 	ldw	r5,168(sp)
 80014b8:	d8802b17 	ldw	r2,172(sp)
 80014bc:	28adc83a 	sub	r22,r5,r2
 80014c0:	05802f0e 	bge	zero,r22,8001580 <___svfprintf_internal_r+0x95c>
 80014c4:	07000404 	movi	fp,16
 80014c8:	d8801f17 	ldw	r2,124(sp)
 80014cc:	e583e20e 	bge	fp,r22,8002458 <___svfprintf_internal_r+0x1834>
 80014d0:	01420074 	movhi	r5,2049
 80014d4:	29784a84 	addi	r5,r5,-7894
 80014d8:	dc402a15 	stw	r17,168(sp)
 80014dc:	d9402c15 	stw	r5,176(sp)
 80014e0:	b023883a 	mov	r17,r22
 80014e4:	050001c4 	movi	r20,7
 80014e8:	902d883a 	mov	r22,r18
 80014ec:	8025883a 	mov	r18,r16
 80014f0:	dc002d17 	ldw	r16,180(sp)
 80014f4:	00000306 	br	8001504 <___svfprintf_internal_r+0x8e0>
 80014f8:	8c7ffc04 	addi	r17,r17,-16
 80014fc:	42000204 	addi	r8,r8,8
 8001500:	e440110e 	bge	fp,r17,8001548 <___svfprintf_internal_r+0x924>
 8001504:	18c00404 	addi	r3,r3,16
 8001508:	10800044 	addi	r2,r2,1
 800150c:	45400015 	stw	r21,0(r8)
 8001510:	47000115 	stw	fp,4(r8)
 8001514:	d8c02015 	stw	r3,128(sp)
 8001518:	d8801f15 	stw	r2,124(sp)
 800151c:	a0bff60e 	bge	r20,r2,80014f8 <__alt_data_end+0xfc0014f8>
 8001520:	d9801e04 	addi	r6,sp,120
 8001524:	800b883a 	mov	r5,r16
 8001528:	9809883a 	mov	r4,r19
 800152c:	80065000 	call	8006500 <__ssprint_r>
 8001530:	103ea31e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8001534:	8c7ffc04 	addi	r17,r17,-16
 8001538:	d8c02017 	ldw	r3,128(sp)
 800153c:	d8801f17 	ldw	r2,124(sp)
 8001540:	da000404 	addi	r8,sp,16
 8001544:	e47fef16 	blt	fp,r17,8001504 <__alt_data_end+0xfc001504>
 8001548:	9021883a 	mov	r16,r18
 800154c:	b025883a 	mov	r18,r22
 8001550:	882d883a 	mov	r22,r17
 8001554:	dc402a17 	ldw	r17,168(sp)
 8001558:	d9002c17 	ldw	r4,176(sp)
 800155c:	1d87883a 	add	r3,r3,r22
 8001560:	10800044 	addi	r2,r2,1
 8001564:	41000015 	stw	r4,0(r8)
 8001568:	45800115 	stw	r22,4(r8)
 800156c:	d8c02015 	stw	r3,128(sp)
 8001570:	d8801f15 	stw	r2,124(sp)
 8001574:	010001c4 	movi	r4,7
 8001578:	20820e16 	blt	r4,r2,8001db4 <___svfprintf_internal_r+0x1190>
 800157c:	42000204 	addi	r8,r8,8
 8001580:	9080400c 	andi	r2,r18,256
 8001584:	10013a1e 	bne	r2,zero,8001a70 <___svfprintf_internal_r+0xe4c>
 8001588:	d9402b17 	ldw	r5,172(sp)
 800158c:	d8801f17 	ldw	r2,124(sp)
 8001590:	44000015 	stw	r16,0(r8)
 8001594:	1947883a 	add	r3,r3,r5
 8001598:	10800044 	addi	r2,r2,1
 800159c:	41400115 	stw	r5,4(r8)
 80015a0:	d8c02015 	stw	r3,128(sp)
 80015a4:	d8801f15 	stw	r2,124(sp)
 80015a8:	010001c4 	movi	r4,7
 80015ac:	2081f316 	blt	r4,r2,8001d7c <___svfprintf_internal_r+0x1158>
 80015b0:	42000204 	addi	r8,r8,8
 80015b4:	9480010c 	andi	r18,r18,4
 80015b8:	90003226 	beq	r18,zero,8001684 <___svfprintf_internal_r+0xa60>
 80015bc:	d9403117 	ldw	r5,196(sp)
 80015c0:	d8802917 	ldw	r2,164(sp)
 80015c4:	28a1c83a 	sub	r16,r5,r2
 80015c8:	04002e0e 	bge	zero,r16,8001684 <___svfprintf_internal_r+0xa60>
 80015cc:	04400404 	movi	r17,16
 80015d0:	d8801f17 	ldw	r2,124(sp)
 80015d4:	8c04db0e 	bge	r17,r16,8002944 <___svfprintf_internal_r+0x1d20>
 80015d8:	01420074 	movhi	r5,2049
 80015dc:	29784e84 	addi	r5,r5,-7878
 80015e0:	d9403515 	stw	r5,212(sp)
 80015e4:	048001c4 	movi	r18,7
 80015e8:	dd002d17 	ldw	r20,180(sp)
 80015ec:	00000306 	br	80015fc <___svfprintf_internal_r+0x9d8>
 80015f0:	843ffc04 	addi	r16,r16,-16
 80015f4:	42000204 	addi	r8,r8,8
 80015f8:	8c00130e 	bge	r17,r16,8001648 <___svfprintf_internal_r+0xa24>
 80015fc:	01020074 	movhi	r4,2049
 8001600:	18c00404 	addi	r3,r3,16
 8001604:	10800044 	addi	r2,r2,1
 8001608:	21384e84 	addi	r4,r4,-7878
 800160c:	41000015 	stw	r4,0(r8)
 8001610:	44400115 	stw	r17,4(r8)
 8001614:	d8c02015 	stw	r3,128(sp)
 8001618:	d8801f15 	stw	r2,124(sp)
 800161c:	90bff40e 	bge	r18,r2,80015f0 <__alt_data_end+0xfc0015f0>
 8001620:	d9801e04 	addi	r6,sp,120
 8001624:	a00b883a 	mov	r5,r20
 8001628:	9809883a 	mov	r4,r19
 800162c:	80065000 	call	8006500 <__ssprint_r>
 8001630:	103e631e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8001634:	843ffc04 	addi	r16,r16,-16
 8001638:	d8c02017 	ldw	r3,128(sp)
 800163c:	d8801f17 	ldw	r2,124(sp)
 8001640:	da000404 	addi	r8,sp,16
 8001644:	8c3fed16 	blt	r17,r16,80015fc <__alt_data_end+0xfc0015fc>
 8001648:	d9403517 	ldw	r5,212(sp)
 800164c:	1c07883a 	add	r3,r3,r16
 8001650:	10800044 	addi	r2,r2,1
 8001654:	41400015 	stw	r5,0(r8)
 8001658:	44000115 	stw	r16,4(r8)
 800165c:	d8c02015 	stw	r3,128(sp)
 8001660:	d8801f15 	stw	r2,124(sp)
 8001664:	010001c4 	movi	r4,7
 8001668:	2080060e 	bge	r4,r2,8001684 <___svfprintf_internal_r+0xa60>
 800166c:	d9402d17 	ldw	r5,180(sp)
 8001670:	d9801e04 	addi	r6,sp,120
 8001674:	9809883a 	mov	r4,r19
 8001678:	80065000 	call	8006500 <__ssprint_r>
 800167c:	103e501e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8001680:	d8c02017 	ldw	r3,128(sp)
 8001684:	d8803117 	ldw	r2,196(sp)
 8001688:	d9002917 	ldw	r4,164(sp)
 800168c:	1100010e 	bge	r2,r4,8001694 <___svfprintf_internal_r+0xa70>
 8001690:	2005883a 	mov	r2,r4
 8001694:	d9402f17 	ldw	r5,188(sp)
 8001698:	288b883a 	add	r5,r5,r2
 800169c:	d9402f15 	stw	r5,188(sp)
 80016a0:	1801be1e 	bne	r3,zero,8001d9c <___svfprintf_internal_r+0x1178>
 80016a4:	b8800007 	ldb	r2,0(r23)
 80016a8:	d8001f15 	stw	zero,124(sp)
 80016ac:	da000404 	addi	r8,sp,16
 80016b0:	103d891e 	bne	r2,zero,8000cd8 <__alt_data_end+0xfc000cd8>
 80016b4:	b823883a 	mov	r17,r23
 80016b8:	003d9f06 	br	8000d38 <__alt_data_end+0xfc000d38>
 80016bc:	8025883a 	mov	r18,r16
 80016c0:	dc002903 	ldbu	r16,164(sp)
 80016c4:	e011883a 	mov	r8,fp
 80016c8:	84003fcc 	andi	r16,r16,255
 80016cc:	8005e61e 	bne	r16,zero,8002e68 <___svfprintf_internal_r+0x2244>
 80016d0:	94800414 	ori	r18,r18,16
 80016d4:	9080080c 	andi	r2,r18,32
 80016d8:	10022026 	beq	r2,zero,8001f5c <___svfprintf_internal_r+0x1338>
 80016dc:	d9002e17 	ldw	r4,184(sp)
 80016e0:	d9402a17 	ldw	r5,168(sp)
 80016e4:	d8002785 	stb	zero,158(sp)
 80016e8:	20c00204 	addi	r3,r4,8
 80016ec:	25000017 	ldw	r20,0(r4)
 80016f0:	25800117 	ldw	r22,4(r4)
 80016f4:	2803ad16 	blt	r5,zero,80025ac <___svfprintf_internal_r+0x1988>
 80016f8:	013fdfc4 	movi	r4,-129
 80016fc:	a584b03a 	or	r2,r20,r22
 8001700:	d8c02e15 	stw	r3,184(sp)
 8001704:	9124703a 	and	r18,r18,r4
 8001708:	0039883a 	mov	fp,zero
 800170c:	103eb01e 	bne	r2,zero,80011d0 <__alt_data_end+0xfc0011d0>
 8001710:	d8802a17 	ldw	r2,168(sp)
 8001714:	1002e71e 	bne	r2,zero,80022b4 <___svfprintf_internal_r+0x1690>
 8001718:	d8002a15 	stw	zero,168(sp)
 800171c:	d8002b15 	stw	zero,172(sp)
 8001720:	dc001e04 	addi	r16,sp,120
 8001724:	003ef706 	br	8001304 <__alt_data_end+0xfc001304>
 8001728:	8025883a 	mov	r18,r16
 800172c:	dc002903 	ldbu	r16,164(sp)
 8001730:	e011883a 	mov	r8,fp
 8001734:	84003fcc 	andi	r16,r16,255
 8001738:	8005c81e 	bne	r16,zero,8002e5c <___svfprintf_internal_r+0x2238>
 800173c:	01020074 	movhi	r4,2049
 8001740:	21383e04 	addi	r4,r4,-7944
 8001744:	d9003a15 	stw	r4,232(sp)
 8001748:	9080080c 	andi	r2,r18,32
 800174c:	10007226 	beq	r2,zero,8001918 <___svfprintf_internal_r+0xcf4>
 8001750:	d9402e17 	ldw	r5,184(sp)
 8001754:	2d000017 	ldw	r20,0(r5)
 8001758:	2d800117 	ldw	r22,4(r5)
 800175c:	29400204 	addi	r5,r5,8
 8001760:	d9402e15 	stw	r5,184(sp)
 8001764:	9080004c 	andi	r2,r18,1
 8001768:	1001aa26 	beq	r2,zero,8001e14 <___svfprintf_internal_r+0x11f0>
 800176c:	a584b03a 	or	r2,r20,r22
 8001770:	10032526 	beq	r2,zero,8002408 <___svfprintf_internal_r+0x17e4>
 8001774:	d8c02a17 	ldw	r3,168(sp)
 8001778:	00800c04 	movi	r2,48
 800177c:	d8802705 	stb	r2,156(sp)
 8001780:	dc402745 	stb	r17,157(sp)
 8001784:	d8002785 	stb	zero,158(sp)
 8001788:	90800094 	ori	r2,r18,2
 800178c:	1804a316 	blt	r3,zero,8002a1c <___svfprintf_internal_r+0x1df8>
 8001790:	00bfdfc4 	movi	r2,-129
 8001794:	90a4703a 	and	r18,r18,r2
 8001798:	94800094 	ori	r18,r18,2
 800179c:	0039883a 	mov	fp,zero
 80017a0:	d9003a17 	ldw	r4,232(sp)
 80017a4:	dc001e04 	addi	r16,sp,120
 80017a8:	a08003cc 	andi	r2,r20,15
 80017ac:	b006973a 	slli	r3,r22,28
 80017b0:	2085883a 	add	r2,r4,r2
 80017b4:	a028d13a 	srli	r20,r20,4
 80017b8:	10800003 	ldbu	r2,0(r2)
 80017bc:	b02cd13a 	srli	r22,r22,4
 80017c0:	843fffc4 	addi	r16,r16,-1
 80017c4:	1d28b03a 	or	r20,r3,r20
 80017c8:	80800005 	stb	r2,0(r16)
 80017cc:	a584b03a 	or	r2,r20,r22
 80017d0:	103ff51e 	bne	r2,zero,80017a8 <__alt_data_end+0xfc0017a8>
 80017d4:	d8c02817 	ldw	r3,160(sp)
 80017d8:	1c07c83a 	sub	r3,r3,r16
 80017dc:	d8c02b15 	stw	r3,172(sp)
 80017e0:	003ec806 	br	8001304 <__alt_data_end+0xfc001304>
 80017e4:	d8c02e17 	ldw	r3,184(sp)
 80017e8:	d9002e17 	ldw	r4,184(sp)
 80017ec:	8025883a 	mov	r18,r16
 80017f0:	18800017 	ldw	r2,0(r3)
 80017f4:	21000104 	addi	r4,r4,4
 80017f8:	00c00044 	movi	r3,1
 80017fc:	e011883a 	mov	r8,fp
 8001800:	d8c02915 	stw	r3,164(sp)
 8001804:	d8002785 	stb	zero,158(sp)
 8001808:	d8801405 	stb	r2,80(sp)
 800180c:	d9002e15 	stw	r4,184(sp)
 8001810:	d8c02b15 	stw	r3,172(sp)
 8001814:	d8002a15 	stw	zero,168(sp)
 8001818:	d8003215 	stw	zero,200(sp)
 800181c:	dc001404 	addi	r16,sp,80
 8001820:	0039883a 	mov	fp,zero
 8001824:	003ec406 	br	8001338 <__alt_data_end+0xfc001338>
 8001828:	8025883a 	mov	r18,r16
 800182c:	dc002903 	ldbu	r16,164(sp)
 8001830:	e011883a 	mov	r8,fp
 8001834:	84003fcc 	andi	r16,r16,255
 8001838:	803e8726 	beq	r16,zero,8001258 <__alt_data_end+0xfc001258>
 800183c:	d8c02b03 	ldbu	r3,172(sp)
 8001840:	d8c02785 	stb	r3,158(sp)
 8001844:	003e8406 	br	8001258 <__alt_data_end+0xfc001258>
 8001848:	00c00044 	movi	r3,1
 800184c:	d8c02905 	stb	r3,164(sp)
 8001850:	00c00ac4 	movi	r3,43
 8001854:	d8c02b05 	stb	r3,172(sp)
 8001858:	bc400007 	ldb	r17,0(r23)
 800185c:	003d4606 	br	8000d78 <__alt_data_end+0xfc000d78>
 8001860:	84000814 	ori	r16,r16,32
 8001864:	bc400007 	ldb	r17,0(r23)
 8001868:	003d4306 	br	8000d78 <__alt_data_end+0xfc000d78>
 800186c:	d8802e17 	ldw	r2,184(sp)
 8001870:	8025883a 	mov	r18,r16
 8001874:	d8002785 	stb	zero,158(sp)
 8001878:	14000017 	ldw	r16,0(r2)
 800187c:	e011883a 	mov	r8,fp
 8001880:	15000104 	addi	r20,r2,4
 8001884:	80042126 	beq	r16,zero,800290c <___svfprintf_internal_r+0x1ce8>
 8001888:	d8c02a17 	ldw	r3,168(sp)
 800188c:	1803ee16 	blt	r3,zero,8002848 <___svfprintf_internal_r+0x1c24>
 8001890:	180d883a 	mov	r6,r3
 8001894:	000b883a 	mov	r5,zero
 8001898:	8009883a 	mov	r4,r16
 800189c:	df003e15 	stw	fp,248(sp)
 80018a0:	80050780 	call	8005078 <memchr>
 80018a4:	da003e17 	ldw	r8,248(sp)
 80018a8:	10046a26 	beq	r2,zero,8002a54 <___svfprintf_internal_r+0x1e30>
 80018ac:	1405c83a 	sub	r2,r2,r16
 80018b0:	d8802b15 	stw	r2,172(sp)
 80018b4:	1003ea16 	blt	r2,zero,8002860 <___svfprintf_internal_r+0x1c3c>
 80018b8:	df002783 	ldbu	fp,158(sp)
 80018bc:	d8802915 	stw	r2,164(sp)
 80018c0:	dd002e15 	stw	r20,184(sp)
 80018c4:	d8002a15 	stw	zero,168(sp)
 80018c8:	d8003215 	stw	zero,200(sp)
 80018cc:	003e9306 	br	800131c <__alt_data_end+0xfc00131c>
 80018d0:	8025883a 	mov	r18,r16
 80018d4:	dc002903 	ldbu	r16,164(sp)
 80018d8:	e011883a 	mov	r8,fp
 80018dc:	84003fcc 	andi	r16,r16,255
 80018e0:	803f7c26 	beq	r16,zero,80016d4 <__alt_data_end+0xfc0016d4>
 80018e4:	d8c02b03 	ldbu	r3,172(sp)
 80018e8:	d8c02785 	stb	r3,158(sp)
 80018ec:	003f7906 	br	80016d4 <__alt_data_end+0xfc0016d4>
 80018f0:	8025883a 	mov	r18,r16
 80018f4:	dc002903 	ldbu	r16,164(sp)
 80018f8:	e011883a 	mov	r8,fp
 80018fc:	84003fcc 	andi	r16,r16,255
 8001900:	8005741e 	bne	r16,zero,8002ed4 <___svfprintf_internal_r+0x22b0>
 8001904:	01020074 	movhi	r4,2049
 8001908:	21384304 	addi	r4,r4,-7924
 800190c:	d9003a15 	stw	r4,232(sp)
 8001910:	9080080c 	andi	r2,r18,32
 8001914:	103f8e1e 	bne	r2,zero,8001750 <__alt_data_end+0xfc001750>
 8001918:	9080040c 	andi	r2,r18,16
 800191c:	1002a726 	beq	r2,zero,80023bc <___svfprintf_internal_r+0x1798>
 8001920:	d8802e17 	ldw	r2,184(sp)
 8001924:	002d883a 	mov	r22,zero
 8001928:	15000017 	ldw	r20,0(r2)
 800192c:	10800104 	addi	r2,r2,4
 8001930:	d8802e15 	stw	r2,184(sp)
 8001934:	003f8b06 	br	8001764 <__alt_data_end+0xfc001764>
 8001938:	84000054 	ori	r16,r16,1
 800193c:	bc400007 	ldb	r17,0(r23)
 8001940:	003d0d06 	br	8000d78 <__alt_data_end+0xfc000d78>
 8001944:	d8802b07 	ldb	r2,172(sp)
 8001948:	1002a41e 	bne	r2,zero,80023dc <___svfprintf_internal_r+0x17b8>
 800194c:	00c00044 	movi	r3,1
 8001950:	d8c02905 	stb	r3,164(sp)
 8001954:	00c00804 	movi	r3,32
 8001958:	d8c02b05 	stb	r3,172(sp)
 800195c:	bc400007 	ldb	r17,0(r23)
 8001960:	003d0506 	br	8000d78 <__alt_data_end+0xfc000d78>
 8001964:	8025883a 	mov	r18,r16
 8001968:	dc002903 	ldbu	r16,164(sp)
 800196c:	e011883a 	mov	r8,fp
 8001970:	84003fcc 	andi	r16,r16,255
 8001974:	803e0626 	beq	r16,zero,8001190 <__alt_data_end+0xfc001190>
 8001978:	d8c02b03 	ldbu	r3,172(sp)
 800197c:	d8c02785 	stb	r3,158(sp)
 8001980:	003e0306 	br	8001190 <__alt_data_end+0xfc001190>
 8001984:	bc400007 	ldb	r17,0(r23)
 8001988:	00801b04 	movi	r2,108
 800198c:	88830a26 	beq	r17,r2,80025b8 <___svfprintf_internal_r+0x1994>
 8001990:	84000414 	ori	r16,r16,16
 8001994:	003cf806 	br	8000d78 <__alt_data_end+0xfc000d78>
 8001998:	8025883a 	mov	r18,r16
 800199c:	dc002903 	ldbu	r16,164(sp)
 80019a0:	e011883a 	mov	r8,fp
 80019a4:	84003fcc 	andi	r16,r16,255
 80019a8:	8005471e 	bne	r16,zero,8002ec8 <___svfprintf_internal_r+0x22a4>
 80019ac:	9080080c 	andi	r2,r18,32
 80019b0:	10028c26 	beq	r2,zero,80023e4 <___svfprintf_internal_r+0x17c0>
 80019b4:	d9002e17 	ldw	r4,184(sp)
 80019b8:	d9402f17 	ldw	r5,188(sp)
 80019bc:	20800017 	ldw	r2,0(r4)
 80019c0:	2807d7fa 	srai	r3,r5,31
 80019c4:	21000104 	addi	r4,r4,4
 80019c8:	d9002e15 	stw	r4,184(sp)
 80019cc:	11400015 	stw	r5,0(r2)
 80019d0:	10c00115 	stw	r3,4(r2)
 80019d4:	003cbe06 	br	8000cd0 <__alt_data_end+0xfc000cd0>
 80019d8:	84001014 	ori	r16,r16,64
 80019dc:	bc400007 	ldb	r17,0(r23)
 80019e0:	003ce506 	br	8000d78 <__alt_data_end+0xfc000d78>
 80019e4:	01020074 	movhi	r4,2049
 80019e8:	21384304 	addi	r4,r4,-7924
 80019ec:	0039883a 	mov	fp,zero
 80019f0:	d9003a15 	stw	r4,232(sp)
 80019f4:	04401e04 	movi	r17,120
 80019f8:	003f6906 	br	80017a0 <__alt_data_end+0xfc0017a0>
 80019fc:	8025883a 	mov	r18,r16
 8001a00:	dc002903 	ldbu	r16,164(sp)
 8001a04:	e011883a 	mov	r8,fp
 8001a08:	84003fcc 	andi	r16,r16,255
 8001a0c:	8005261e 	bne	r16,zero,8002ea8 <___svfprintf_internal_r+0x2284>
 8001a10:	883d6526 	beq	r17,zero,8000fa8 <__alt_data_end+0xfc000fa8>
 8001a14:	00c00044 	movi	r3,1
 8001a18:	d8c02915 	stw	r3,164(sp)
 8001a1c:	dc401405 	stb	r17,80(sp)
 8001a20:	d8002785 	stb	zero,158(sp)
 8001a24:	003f7a06 	br	8001810 <__alt_data_end+0xfc001810>
 8001a28:	01020074 	movhi	r4,2049
 8001a2c:	21384304 	addi	r4,r4,-7924
 8001a30:	d9003a15 	stw	r4,232(sp)
 8001a34:	d8c02e15 	stw	r3,184(sp)
 8001a38:	1025883a 	mov	r18,r2
 8001a3c:	04401e04 	movi	r17,120
 8001a40:	a584b03a 	or	r2,r20,r22
 8001a44:	1000fa1e 	bne	r2,zero,8001e30 <___svfprintf_internal_r+0x120c>
 8001a48:	0039883a 	mov	fp,zero
 8001a4c:	00800084 	movi	r2,2
 8001a50:	10803fcc 	andi	r2,r2,255
 8001a54:	00c00044 	movi	r3,1
 8001a58:	10c21626 	beq	r2,r3,80022b4 <___svfprintf_internal_r+0x1690>
 8001a5c:	00c00084 	movi	r3,2
 8001a60:	10fe0e1e 	bne	r2,r3,800129c <__alt_data_end+0xfc00129c>
 8001a64:	003d4606 	br	8000f80 <__alt_data_end+0xfc000f80>
 8001a68:	d8c02017 	ldw	r3,128(sp)
 8001a6c:	003e7306 	br	800143c <__alt_data_end+0xfc00143c>
 8001a70:	00801944 	movi	r2,101
 8001a74:	14407c0e 	bge	r2,r17,8001c68 <___svfprintf_internal_r+0x1044>
 8001a78:	d9003617 	ldw	r4,216(sp)
 8001a7c:	d9403717 	ldw	r5,220(sp)
 8001a80:	000d883a 	mov	r6,zero
 8001a84:	000f883a 	mov	r7,zero
 8001a88:	d8c03d15 	stw	r3,244(sp)
 8001a8c:	da003e15 	stw	r8,248(sp)
 8001a90:	800a6b00 	call	800a6b0 <__eqdf2>
 8001a94:	d8c03d17 	ldw	r3,244(sp)
 8001a98:	da003e17 	ldw	r8,248(sp)
 8001a9c:	1000f51e 	bne	r2,zero,8001e74 <___svfprintf_internal_r+0x1250>
 8001aa0:	d8801f17 	ldw	r2,124(sp)
 8001aa4:	01020074 	movhi	r4,2049
 8001aa8:	21384a04 	addi	r4,r4,-7896
 8001aac:	18c00044 	addi	r3,r3,1
 8001ab0:	10800044 	addi	r2,r2,1
 8001ab4:	41000015 	stw	r4,0(r8)
 8001ab8:	01000044 	movi	r4,1
 8001abc:	41000115 	stw	r4,4(r8)
 8001ac0:	d8c02015 	stw	r3,128(sp)
 8001ac4:	d8801f15 	stw	r2,124(sp)
 8001ac8:	010001c4 	movi	r4,7
 8001acc:	20826616 	blt	r4,r2,8002468 <___svfprintf_internal_r+0x1844>
 8001ad0:	42000204 	addi	r8,r8,8
 8001ad4:	d8802617 	ldw	r2,152(sp)
 8001ad8:	d9403317 	ldw	r5,204(sp)
 8001adc:	11400216 	blt	r2,r5,8001ae8 <___svfprintf_internal_r+0xec4>
 8001ae0:	9080004c 	andi	r2,r18,1
 8001ae4:	103eb326 	beq	r2,zero,80015b4 <__alt_data_end+0xfc0015b4>
 8001ae8:	d8803817 	ldw	r2,224(sp)
 8001aec:	d9003417 	ldw	r4,208(sp)
 8001af0:	d9403817 	ldw	r5,224(sp)
 8001af4:	1887883a 	add	r3,r3,r2
 8001af8:	d8801f17 	ldw	r2,124(sp)
 8001afc:	41000015 	stw	r4,0(r8)
 8001b00:	41400115 	stw	r5,4(r8)
 8001b04:	10800044 	addi	r2,r2,1
 8001b08:	d8c02015 	stw	r3,128(sp)
 8001b0c:	d8801f15 	stw	r2,124(sp)
 8001b10:	010001c4 	movi	r4,7
 8001b14:	2082af16 	blt	r4,r2,80025d4 <___svfprintf_internal_r+0x19b0>
 8001b18:	42000204 	addi	r8,r8,8
 8001b1c:	d8803317 	ldw	r2,204(sp)
 8001b20:	143fffc4 	addi	r16,r2,-1
 8001b24:	043ea30e 	bge	zero,r16,80015b4 <__alt_data_end+0xfc0015b4>
 8001b28:	04400404 	movi	r17,16
 8001b2c:	d8801f17 	ldw	r2,124(sp)
 8001b30:	8c00860e 	bge	r17,r16,8001d4c <___svfprintf_internal_r+0x1128>
 8001b34:	01420074 	movhi	r5,2049
 8001b38:	29784a84 	addi	r5,r5,-7894
 8001b3c:	d9402c15 	stw	r5,176(sp)
 8001b40:	058001c4 	movi	r22,7
 8001b44:	dd002d17 	ldw	r20,180(sp)
 8001b48:	00000306 	br	8001b58 <___svfprintf_internal_r+0xf34>
 8001b4c:	42000204 	addi	r8,r8,8
 8001b50:	843ffc04 	addi	r16,r16,-16
 8001b54:	8c00800e 	bge	r17,r16,8001d58 <___svfprintf_internal_r+0x1134>
 8001b58:	18c00404 	addi	r3,r3,16
 8001b5c:	10800044 	addi	r2,r2,1
 8001b60:	45400015 	stw	r21,0(r8)
 8001b64:	44400115 	stw	r17,4(r8)
 8001b68:	d8c02015 	stw	r3,128(sp)
 8001b6c:	d8801f15 	stw	r2,124(sp)
 8001b70:	b0bff60e 	bge	r22,r2,8001b4c <__alt_data_end+0xfc001b4c>
 8001b74:	d9801e04 	addi	r6,sp,120
 8001b78:	a00b883a 	mov	r5,r20
 8001b7c:	9809883a 	mov	r4,r19
 8001b80:	80065000 	call	8006500 <__ssprint_r>
 8001b84:	103d0e1e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8001b88:	d8c02017 	ldw	r3,128(sp)
 8001b8c:	d8801f17 	ldw	r2,124(sp)
 8001b90:	da000404 	addi	r8,sp,16
 8001b94:	003fee06 	br	8001b50 <__alt_data_end+0xfc001b50>
 8001b98:	d9403117 	ldw	r5,196(sp)
 8001b9c:	d8802917 	ldw	r2,164(sp)
 8001ba0:	28adc83a 	sub	r22,r5,r2
 8001ba4:	05be430e 	bge	zero,r22,80014b4 <__alt_data_end+0xfc0014b4>
 8001ba8:	07000404 	movi	fp,16
 8001bac:	d8801f17 	ldw	r2,124(sp)
 8001bb0:	e583a20e 	bge	fp,r22,8002a3c <___svfprintf_internal_r+0x1e18>
 8001bb4:	01420074 	movhi	r5,2049
 8001bb8:	29784a84 	addi	r5,r5,-7894
 8001bbc:	dc403015 	stw	r17,192(sp)
 8001bc0:	d9402c15 	stw	r5,176(sp)
 8001bc4:	b023883a 	mov	r17,r22
 8001bc8:	050001c4 	movi	r20,7
 8001bcc:	902d883a 	mov	r22,r18
 8001bd0:	8025883a 	mov	r18,r16
 8001bd4:	dc002d17 	ldw	r16,180(sp)
 8001bd8:	00000306 	br	8001be8 <___svfprintf_internal_r+0xfc4>
 8001bdc:	8c7ffc04 	addi	r17,r17,-16
 8001be0:	42000204 	addi	r8,r8,8
 8001be4:	e440110e 	bge	fp,r17,8001c2c <___svfprintf_internal_r+0x1008>
 8001be8:	18c00404 	addi	r3,r3,16
 8001bec:	10800044 	addi	r2,r2,1
 8001bf0:	45400015 	stw	r21,0(r8)
 8001bf4:	47000115 	stw	fp,4(r8)
 8001bf8:	d8c02015 	stw	r3,128(sp)
 8001bfc:	d8801f15 	stw	r2,124(sp)
 8001c00:	a0bff60e 	bge	r20,r2,8001bdc <__alt_data_end+0xfc001bdc>
 8001c04:	d9801e04 	addi	r6,sp,120
 8001c08:	800b883a 	mov	r5,r16
 8001c0c:	9809883a 	mov	r4,r19
 8001c10:	80065000 	call	8006500 <__ssprint_r>
 8001c14:	103cea1e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8001c18:	8c7ffc04 	addi	r17,r17,-16
 8001c1c:	d8c02017 	ldw	r3,128(sp)
 8001c20:	d8801f17 	ldw	r2,124(sp)
 8001c24:	da000404 	addi	r8,sp,16
 8001c28:	e47fef16 	blt	fp,r17,8001be8 <__alt_data_end+0xfc001be8>
 8001c2c:	9021883a 	mov	r16,r18
 8001c30:	b025883a 	mov	r18,r22
 8001c34:	882d883a 	mov	r22,r17
 8001c38:	dc403017 	ldw	r17,192(sp)
 8001c3c:	d9002c17 	ldw	r4,176(sp)
 8001c40:	1d87883a 	add	r3,r3,r22
 8001c44:	10800044 	addi	r2,r2,1
 8001c48:	41000015 	stw	r4,0(r8)
 8001c4c:	45800115 	stw	r22,4(r8)
 8001c50:	d8c02015 	stw	r3,128(sp)
 8001c54:	d8801f15 	stw	r2,124(sp)
 8001c58:	010001c4 	movi	r4,7
 8001c5c:	20819a16 	blt	r4,r2,80022c8 <___svfprintf_internal_r+0x16a4>
 8001c60:	42000204 	addi	r8,r8,8
 8001c64:	003e1306 	br	80014b4 <__alt_data_end+0xfc0014b4>
 8001c68:	d9403317 	ldw	r5,204(sp)
 8001c6c:	00800044 	movi	r2,1
 8001c70:	18c00044 	addi	r3,r3,1
 8001c74:	1141710e 	bge	r2,r5,800223c <___svfprintf_internal_r+0x1618>
 8001c78:	dc401f17 	ldw	r17,124(sp)
 8001c7c:	00800044 	movi	r2,1
 8001c80:	40800115 	stw	r2,4(r8)
 8001c84:	8c400044 	addi	r17,r17,1
 8001c88:	44000015 	stw	r16,0(r8)
 8001c8c:	d8c02015 	stw	r3,128(sp)
 8001c90:	dc401f15 	stw	r17,124(sp)
 8001c94:	008001c4 	movi	r2,7
 8001c98:	14417416 	blt	r2,r17,800226c <___svfprintf_internal_r+0x1648>
 8001c9c:	42000204 	addi	r8,r8,8
 8001ca0:	d8803817 	ldw	r2,224(sp)
 8001ca4:	d9003417 	ldw	r4,208(sp)
 8001ca8:	8c400044 	addi	r17,r17,1
 8001cac:	10c7883a 	add	r3,r2,r3
 8001cb0:	40800115 	stw	r2,4(r8)
 8001cb4:	41000015 	stw	r4,0(r8)
 8001cb8:	d8c02015 	stw	r3,128(sp)
 8001cbc:	dc401f15 	stw	r17,124(sp)
 8001cc0:	008001c4 	movi	r2,7
 8001cc4:	14417216 	blt	r2,r17,8002290 <___svfprintf_internal_r+0x166c>
 8001cc8:	45800204 	addi	r22,r8,8
 8001ccc:	d9003617 	ldw	r4,216(sp)
 8001cd0:	d9403717 	ldw	r5,220(sp)
 8001cd4:	000d883a 	mov	r6,zero
 8001cd8:	000f883a 	mov	r7,zero
 8001cdc:	d8c03d15 	stw	r3,244(sp)
 8001ce0:	800a6b00 	call	800a6b0 <__eqdf2>
 8001ce4:	d8c03d17 	ldw	r3,244(sp)
 8001ce8:	1000b326 	beq	r2,zero,8001fb8 <___svfprintf_internal_r+0x1394>
 8001cec:	d9403317 	ldw	r5,204(sp)
 8001cf0:	84000044 	addi	r16,r16,1
 8001cf4:	8c400044 	addi	r17,r17,1
 8001cf8:	28bfffc4 	addi	r2,r5,-1
 8001cfc:	1887883a 	add	r3,r3,r2
 8001d00:	b0800115 	stw	r2,4(r22)
 8001d04:	b4000015 	stw	r16,0(r22)
 8001d08:	d8c02015 	stw	r3,128(sp)
 8001d0c:	dc401f15 	stw	r17,124(sp)
 8001d10:	008001c4 	movi	r2,7
 8001d14:	1440d216 	blt	r2,r17,8002060 <___svfprintf_internal_r+0x143c>
 8001d18:	b5800204 	addi	r22,r22,8
 8001d1c:	d9003b17 	ldw	r4,236(sp)
 8001d20:	df0022c4 	addi	fp,sp,139
 8001d24:	8c400044 	addi	r17,r17,1
 8001d28:	20c7883a 	add	r3,r4,r3
 8001d2c:	b7000015 	stw	fp,0(r22)
 8001d30:	b1000115 	stw	r4,4(r22)
 8001d34:	d8c02015 	stw	r3,128(sp)
 8001d38:	dc401f15 	stw	r17,124(sp)
 8001d3c:	008001c4 	movi	r2,7
 8001d40:	14400e16 	blt	r2,r17,8001d7c <___svfprintf_internal_r+0x1158>
 8001d44:	b2000204 	addi	r8,r22,8
 8001d48:	003e1a06 	br	80015b4 <__alt_data_end+0xfc0015b4>
 8001d4c:	01020074 	movhi	r4,2049
 8001d50:	21384a84 	addi	r4,r4,-7894
 8001d54:	d9002c15 	stw	r4,176(sp)
 8001d58:	d9002c17 	ldw	r4,176(sp)
 8001d5c:	1c07883a 	add	r3,r3,r16
 8001d60:	44000115 	stw	r16,4(r8)
 8001d64:	41000015 	stw	r4,0(r8)
 8001d68:	10800044 	addi	r2,r2,1
 8001d6c:	d8c02015 	stw	r3,128(sp)
 8001d70:	d8801f15 	stw	r2,124(sp)
 8001d74:	010001c4 	movi	r4,7
 8001d78:	20be0d0e 	bge	r4,r2,80015b0 <__alt_data_end+0xfc0015b0>
 8001d7c:	d9402d17 	ldw	r5,180(sp)
 8001d80:	d9801e04 	addi	r6,sp,120
 8001d84:	9809883a 	mov	r4,r19
 8001d88:	80065000 	call	8006500 <__ssprint_r>
 8001d8c:	103c8c1e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8001d90:	d8c02017 	ldw	r3,128(sp)
 8001d94:	da000404 	addi	r8,sp,16
 8001d98:	003e0606 	br	80015b4 <__alt_data_end+0xfc0015b4>
 8001d9c:	d9402d17 	ldw	r5,180(sp)
 8001da0:	d9801e04 	addi	r6,sp,120
 8001da4:	9809883a 	mov	r4,r19
 8001da8:	80065000 	call	8006500 <__ssprint_r>
 8001dac:	103e3d26 	beq	r2,zero,80016a4 <__alt_data_end+0xfc0016a4>
 8001db0:	003c8306 	br	8000fc0 <__alt_data_end+0xfc000fc0>
 8001db4:	d9402d17 	ldw	r5,180(sp)
 8001db8:	d9801e04 	addi	r6,sp,120
 8001dbc:	9809883a 	mov	r4,r19
 8001dc0:	80065000 	call	8006500 <__ssprint_r>
 8001dc4:	103c7e1e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8001dc8:	d8c02017 	ldw	r3,128(sp)
 8001dcc:	da000404 	addi	r8,sp,16
 8001dd0:	003deb06 	br	8001580 <__alt_data_end+0xfc001580>
 8001dd4:	d9402d17 	ldw	r5,180(sp)
 8001dd8:	d9801e04 	addi	r6,sp,120
 8001ddc:	9809883a 	mov	r4,r19
 8001de0:	80065000 	call	8006500 <__ssprint_r>
 8001de4:	103c761e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8001de8:	d8c02017 	ldw	r3,128(sp)
 8001dec:	da000404 	addi	r8,sp,16
 8001df0:	003d9f06 	br	8001470 <__alt_data_end+0xfc001470>
 8001df4:	d9402d17 	ldw	r5,180(sp)
 8001df8:	d9801e04 	addi	r6,sp,120
 8001dfc:	9809883a 	mov	r4,r19
 8001e00:	80065000 	call	8006500 <__ssprint_r>
 8001e04:	103c6e1e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8001e08:	d8c02017 	ldw	r3,128(sp)
 8001e0c:	da000404 	addi	r8,sp,16
 8001e10:	003da506 	br	80014a8 <__alt_data_end+0xfc0014a8>
 8001e14:	d9402a17 	ldw	r5,168(sp)
 8001e18:	d8002785 	stb	zero,158(sp)
 8001e1c:	283f0816 	blt	r5,zero,8001a40 <__alt_data_end+0xfc001a40>
 8001e20:	00ffdfc4 	movi	r3,-129
 8001e24:	a584b03a 	or	r2,r20,r22
 8001e28:	90e4703a 	and	r18,r18,r3
 8001e2c:	103c5126 	beq	r2,zero,8000f74 <__alt_data_end+0xfc000f74>
 8001e30:	0039883a 	mov	fp,zero
 8001e34:	003e5a06 	br	80017a0 <__alt_data_end+0xfc0017a0>
 8001e38:	9080040c 	andi	r2,r18,16
 8001e3c:	10013d26 	beq	r2,zero,8002334 <___svfprintf_internal_r+0x1710>
 8001e40:	d8c02e17 	ldw	r3,184(sp)
 8001e44:	d9002a17 	ldw	r4,168(sp)
 8001e48:	d8002785 	stb	zero,158(sp)
 8001e4c:	18800104 	addi	r2,r3,4
 8001e50:	1d000017 	ldw	r20,0(r3)
 8001e54:	002d883a 	mov	r22,zero
 8001e58:	20013f16 	blt	r4,zero,8002358 <___svfprintf_internal_r+0x1734>
 8001e5c:	00ffdfc4 	movi	r3,-129
 8001e60:	d8802e15 	stw	r2,184(sp)
 8001e64:	90e4703a 	and	r18,r18,r3
 8001e68:	a03d0926 	beq	r20,zero,8001290 <__alt_data_end+0xfc001290>
 8001e6c:	0039883a 	mov	fp,zero
 8001e70:	003d0c06 	br	80012a4 <__alt_data_end+0xfc0012a4>
 8001e74:	dc402617 	ldw	r17,152(sp)
 8001e78:	0441830e 	bge	zero,r17,8002488 <___svfprintf_internal_r+0x1864>
 8001e7c:	dc403217 	ldw	r17,200(sp)
 8001e80:	d8803317 	ldw	r2,204(sp)
 8001e84:	1440010e 	bge	r2,r17,8001e8c <___svfprintf_internal_r+0x1268>
 8001e88:	1023883a 	mov	r17,r2
 8001e8c:	04400a0e 	bge	zero,r17,8001eb8 <___svfprintf_internal_r+0x1294>
 8001e90:	d8801f17 	ldw	r2,124(sp)
 8001e94:	1c47883a 	add	r3,r3,r17
 8001e98:	44000015 	stw	r16,0(r8)
 8001e9c:	10800044 	addi	r2,r2,1
 8001ea0:	44400115 	stw	r17,4(r8)
 8001ea4:	d8c02015 	stw	r3,128(sp)
 8001ea8:	d8801f15 	stw	r2,124(sp)
 8001eac:	010001c4 	movi	r4,7
 8001eb0:	20827516 	blt	r4,r2,8002888 <___svfprintf_internal_r+0x1c64>
 8001eb4:	42000204 	addi	r8,r8,8
 8001eb8:	88027b16 	blt	r17,zero,80028a8 <___svfprintf_internal_r+0x1c84>
 8001ebc:	d9003217 	ldw	r4,200(sp)
 8001ec0:	2463c83a 	sub	r17,r4,r17
 8001ec4:	0440990e 	bge	zero,r17,800212c <___svfprintf_internal_r+0x1508>
 8001ec8:	05800404 	movi	r22,16
 8001ecc:	d8801f17 	ldw	r2,124(sp)
 8001ed0:	b441530e 	bge	r22,r17,8002420 <___svfprintf_internal_r+0x17fc>
 8001ed4:	01020074 	movhi	r4,2049
 8001ed8:	21384a84 	addi	r4,r4,-7894
 8001edc:	d9002c15 	stw	r4,176(sp)
 8001ee0:	070001c4 	movi	fp,7
 8001ee4:	dd002d17 	ldw	r20,180(sp)
 8001ee8:	00000306 	br	8001ef8 <___svfprintf_internal_r+0x12d4>
 8001eec:	42000204 	addi	r8,r8,8
 8001ef0:	8c7ffc04 	addi	r17,r17,-16
 8001ef4:	b4414d0e 	bge	r22,r17,800242c <___svfprintf_internal_r+0x1808>
 8001ef8:	18c00404 	addi	r3,r3,16
 8001efc:	10800044 	addi	r2,r2,1
 8001f00:	45400015 	stw	r21,0(r8)
 8001f04:	45800115 	stw	r22,4(r8)
 8001f08:	d8c02015 	stw	r3,128(sp)
 8001f0c:	d8801f15 	stw	r2,124(sp)
 8001f10:	e0bff60e 	bge	fp,r2,8001eec <__alt_data_end+0xfc001eec>
 8001f14:	d9801e04 	addi	r6,sp,120
 8001f18:	a00b883a 	mov	r5,r20
 8001f1c:	9809883a 	mov	r4,r19
 8001f20:	80065000 	call	8006500 <__ssprint_r>
 8001f24:	103c261e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8001f28:	d8c02017 	ldw	r3,128(sp)
 8001f2c:	d8801f17 	ldw	r2,124(sp)
 8001f30:	da000404 	addi	r8,sp,16
 8001f34:	003fee06 	br	8001ef0 <__alt_data_end+0xfc001ef0>
 8001f38:	d9402d17 	ldw	r5,180(sp)
 8001f3c:	d9801e04 	addi	r6,sp,120
 8001f40:	9809883a 	mov	r4,r19
 8001f44:	80065000 	call	8006500 <__ssprint_r>
 8001f48:	103c1d1e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8001f4c:	d8c02017 	ldw	r3,128(sp)
 8001f50:	df002787 	ldb	fp,158(sp)
 8001f54:	da000404 	addi	r8,sp,16
 8001f58:	003d3806 	br	800143c <__alt_data_end+0xfc00143c>
 8001f5c:	9080040c 	andi	r2,r18,16
 8001f60:	10005c26 	beq	r2,zero,80020d4 <___svfprintf_internal_r+0x14b0>
 8001f64:	d8c02e17 	ldw	r3,184(sp)
 8001f68:	d9002a17 	ldw	r4,168(sp)
 8001f6c:	d8002785 	stb	zero,158(sp)
 8001f70:	18800104 	addi	r2,r3,4
 8001f74:	1d000017 	ldw	r20,0(r3)
 8001f78:	002d883a 	mov	r22,zero
 8001f7c:	20005e16 	blt	r4,zero,80020f8 <___svfprintf_internal_r+0x14d4>
 8001f80:	00ffdfc4 	movi	r3,-129
 8001f84:	d8802e15 	stw	r2,184(sp)
 8001f88:	90e4703a 	and	r18,r18,r3
 8001f8c:	0039883a 	mov	fp,zero
 8001f90:	a03ddf26 	beq	r20,zero,8001710 <__alt_data_end+0xfc001710>
 8001f94:	00800244 	movi	r2,9
 8001f98:	153c8e36 	bltu	r2,r20,80011d4 <__alt_data_end+0xfc0011d4>
 8001f9c:	a5000c04 	addi	r20,r20,48
 8001fa0:	dc001dc4 	addi	r16,sp,119
 8001fa4:	dd001dc5 	stb	r20,119(sp)
 8001fa8:	d8c02817 	ldw	r3,160(sp)
 8001fac:	1c07c83a 	sub	r3,r3,r16
 8001fb0:	d8c02b15 	stw	r3,172(sp)
 8001fb4:	003cd306 	br	8001304 <__alt_data_end+0xfc001304>
 8001fb8:	d8803317 	ldw	r2,204(sp)
 8001fbc:	143fffc4 	addi	r16,r2,-1
 8001fc0:	043f560e 	bge	zero,r16,8001d1c <__alt_data_end+0xfc001d1c>
 8001fc4:	07000404 	movi	fp,16
 8001fc8:	e403530e 	bge	fp,r16,8002d18 <___svfprintf_internal_r+0x20f4>
 8001fcc:	01420074 	movhi	r5,2049
 8001fd0:	29784a84 	addi	r5,r5,-7894
 8001fd4:	d9402c15 	stw	r5,176(sp)
 8001fd8:	01c001c4 	movi	r7,7
 8001fdc:	dd002d17 	ldw	r20,180(sp)
 8001fe0:	00000306 	br	8001ff0 <___svfprintf_internal_r+0x13cc>
 8001fe4:	843ffc04 	addi	r16,r16,-16
 8001fe8:	b5800204 	addi	r22,r22,8
 8001fec:	e400130e 	bge	fp,r16,800203c <___svfprintf_internal_r+0x1418>
 8001ff0:	18c00404 	addi	r3,r3,16
 8001ff4:	8c400044 	addi	r17,r17,1
 8001ff8:	b5400015 	stw	r21,0(r22)
 8001ffc:	b7000115 	stw	fp,4(r22)
 8002000:	d8c02015 	stw	r3,128(sp)
 8002004:	dc401f15 	stw	r17,124(sp)
 8002008:	3c7ff60e 	bge	r7,r17,8001fe4 <__alt_data_end+0xfc001fe4>
 800200c:	d9801e04 	addi	r6,sp,120
 8002010:	a00b883a 	mov	r5,r20
 8002014:	9809883a 	mov	r4,r19
 8002018:	d9c03d15 	stw	r7,244(sp)
 800201c:	80065000 	call	8006500 <__ssprint_r>
 8002020:	d9c03d17 	ldw	r7,244(sp)
 8002024:	103be61e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8002028:	843ffc04 	addi	r16,r16,-16
 800202c:	d8c02017 	ldw	r3,128(sp)
 8002030:	dc401f17 	ldw	r17,124(sp)
 8002034:	dd800404 	addi	r22,sp,16
 8002038:	e43fed16 	blt	fp,r16,8001ff0 <__alt_data_end+0xfc001ff0>
 800203c:	d8802c17 	ldw	r2,176(sp)
 8002040:	1c07883a 	add	r3,r3,r16
 8002044:	8c400044 	addi	r17,r17,1
 8002048:	b0800015 	stw	r2,0(r22)
 800204c:	b4000115 	stw	r16,4(r22)
 8002050:	d8c02015 	stw	r3,128(sp)
 8002054:	dc401f15 	stw	r17,124(sp)
 8002058:	008001c4 	movi	r2,7
 800205c:	147f2e0e 	bge	r2,r17,8001d18 <__alt_data_end+0xfc001d18>
 8002060:	d9402d17 	ldw	r5,180(sp)
 8002064:	d9801e04 	addi	r6,sp,120
 8002068:	9809883a 	mov	r4,r19
 800206c:	80065000 	call	8006500 <__ssprint_r>
 8002070:	103bd31e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8002074:	d8c02017 	ldw	r3,128(sp)
 8002078:	dc401f17 	ldw	r17,124(sp)
 800207c:	dd800404 	addi	r22,sp,16
 8002080:	003f2606 	br	8001d1c <__alt_data_end+0xfc001d1c>
 8002084:	9080040c 	andi	r2,r18,16
 8002088:	1000c326 	beq	r2,zero,8002398 <___svfprintf_internal_r+0x1774>
 800208c:	d9402e17 	ldw	r5,184(sp)
 8002090:	2d000017 	ldw	r20,0(r5)
 8002094:	29400104 	addi	r5,r5,4
 8002098:	d9402e15 	stw	r5,184(sp)
 800209c:	a02dd7fa 	srai	r22,r20,31
 80020a0:	b005883a 	mov	r2,r22
 80020a4:	103c430e 	bge	r2,zero,80011b4 <__alt_data_end+0xfc0011b4>
 80020a8:	d9402a17 	ldw	r5,168(sp)
 80020ac:	0529c83a 	sub	r20,zero,r20
 80020b0:	07000b44 	movi	fp,45
 80020b4:	a004c03a 	cmpne	r2,r20,zero
 80020b8:	05adc83a 	sub	r22,zero,r22
 80020bc:	df002785 	stb	fp,158(sp)
 80020c0:	b0adc83a 	sub	r22,r22,r2
 80020c4:	28022e16 	blt	r5,zero,8002980 <___svfprintf_internal_r+0x1d5c>
 80020c8:	00bfdfc4 	movi	r2,-129
 80020cc:	90a4703a 	and	r18,r18,r2
 80020d0:	003c3f06 	br	80011d0 <__alt_data_end+0xfc0011d0>
 80020d4:	9080100c 	andi	r2,r18,64
 80020d8:	d8002785 	stb	zero,158(sp)
 80020dc:	10012526 	beq	r2,zero,8002574 <___svfprintf_internal_r+0x1950>
 80020e0:	d9402e17 	ldw	r5,184(sp)
 80020e4:	d8c02a17 	ldw	r3,168(sp)
 80020e8:	002d883a 	mov	r22,zero
 80020ec:	28800104 	addi	r2,r5,4
 80020f0:	2d00000b 	ldhu	r20,0(r5)
 80020f4:	183fa20e 	bge	r3,zero,8001f80 <__alt_data_end+0xfc001f80>
 80020f8:	d8802e15 	stw	r2,184(sp)
 80020fc:	0039883a 	mov	fp,zero
 8002100:	a584b03a 	or	r2,r20,r22
 8002104:	103c321e 	bne	r2,zero,80011d0 <__alt_data_end+0xfc0011d0>
 8002108:	00800044 	movi	r2,1
 800210c:	003e5006 	br	8001a50 <__alt_data_end+0xfc001a50>
 8002110:	d9402d17 	ldw	r5,180(sp)
 8002114:	d9801e04 	addi	r6,sp,120
 8002118:	9809883a 	mov	r4,r19
 800211c:	80065000 	call	8006500 <__ssprint_r>
 8002120:	103ba71e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8002124:	d8c02017 	ldw	r3,128(sp)
 8002128:	da000404 	addi	r8,sp,16
 800212c:	d9003217 	ldw	r4,200(sp)
 8002130:	d8802617 	ldw	r2,152(sp)
 8002134:	d9403317 	ldw	r5,204(sp)
 8002138:	8123883a 	add	r17,r16,r4
 800213c:	11400216 	blt	r2,r5,8002148 <___svfprintf_internal_r+0x1524>
 8002140:	9100004c 	andi	r4,r18,1
 8002144:	20000d26 	beq	r4,zero,800217c <___svfprintf_internal_r+0x1558>
 8002148:	d9003817 	ldw	r4,224(sp)
 800214c:	d9403417 	ldw	r5,208(sp)
 8002150:	1907883a 	add	r3,r3,r4
 8002154:	d9001f17 	ldw	r4,124(sp)
 8002158:	41400015 	stw	r5,0(r8)
 800215c:	d9403817 	ldw	r5,224(sp)
 8002160:	21000044 	addi	r4,r4,1
 8002164:	d8c02015 	stw	r3,128(sp)
 8002168:	41400115 	stw	r5,4(r8)
 800216c:	d9001f15 	stw	r4,124(sp)
 8002170:	014001c4 	movi	r5,7
 8002174:	2901dc16 	blt	r5,r4,80028e8 <___svfprintf_internal_r+0x1cc4>
 8002178:	42000204 	addi	r8,r8,8
 800217c:	d9003317 	ldw	r4,204(sp)
 8002180:	8121883a 	add	r16,r16,r4
 8002184:	2085c83a 	sub	r2,r4,r2
 8002188:	8461c83a 	sub	r16,r16,r17
 800218c:	1400010e 	bge	r2,r16,8002194 <___svfprintf_internal_r+0x1570>
 8002190:	1021883a 	mov	r16,r2
 8002194:	04000a0e 	bge	zero,r16,80021c0 <___svfprintf_internal_r+0x159c>
 8002198:	d9001f17 	ldw	r4,124(sp)
 800219c:	1c07883a 	add	r3,r3,r16
 80021a0:	44400015 	stw	r17,0(r8)
 80021a4:	21000044 	addi	r4,r4,1
 80021a8:	44000115 	stw	r16,4(r8)
 80021ac:	d8c02015 	stw	r3,128(sp)
 80021b0:	d9001f15 	stw	r4,124(sp)
 80021b4:	014001c4 	movi	r5,7
 80021b8:	2901e616 	blt	r5,r4,8002954 <___svfprintf_internal_r+0x1d30>
 80021bc:	42000204 	addi	r8,r8,8
 80021c0:	8001f616 	blt	r16,zero,800299c <___svfprintf_internal_r+0x1d78>
 80021c4:	1421c83a 	sub	r16,r2,r16
 80021c8:	043cfa0e 	bge	zero,r16,80015b4 <__alt_data_end+0xfc0015b4>
 80021cc:	04400404 	movi	r17,16
 80021d0:	d8801f17 	ldw	r2,124(sp)
 80021d4:	8c3edd0e 	bge	r17,r16,8001d4c <__alt_data_end+0xfc001d4c>
 80021d8:	01420074 	movhi	r5,2049
 80021dc:	29784a84 	addi	r5,r5,-7894
 80021e0:	d9402c15 	stw	r5,176(sp)
 80021e4:	058001c4 	movi	r22,7
 80021e8:	dd002d17 	ldw	r20,180(sp)
 80021ec:	00000306 	br	80021fc <___svfprintf_internal_r+0x15d8>
 80021f0:	42000204 	addi	r8,r8,8
 80021f4:	843ffc04 	addi	r16,r16,-16
 80021f8:	8c3ed70e 	bge	r17,r16,8001d58 <__alt_data_end+0xfc001d58>
 80021fc:	18c00404 	addi	r3,r3,16
 8002200:	10800044 	addi	r2,r2,1
 8002204:	45400015 	stw	r21,0(r8)
 8002208:	44400115 	stw	r17,4(r8)
 800220c:	d8c02015 	stw	r3,128(sp)
 8002210:	d8801f15 	stw	r2,124(sp)
 8002214:	b0bff60e 	bge	r22,r2,80021f0 <__alt_data_end+0xfc0021f0>
 8002218:	d9801e04 	addi	r6,sp,120
 800221c:	a00b883a 	mov	r5,r20
 8002220:	9809883a 	mov	r4,r19
 8002224:	80065000 	call	8006500 <__ssprint_r>
 8002228:	103b651e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 800222c:	d8c02017 	ldw	r3,128(sp)
 8002230:	d8801f17 	ldw	r2,124(sp)
 8002234:	da000404 	addi	r8,sp,16
 8002238:	003fee06 	br	80021f4 <__alt_data_end+0xfc0021f4>
 800223c:	9088703a 	and	r4,r18,r2
 8002240:	203e8d1e 	bne	r4,zero,8001c78 <__alt_data_end+0xfc001c78>
 8002244:	dc401f17 	ldw	r17,124(sp)
 8002248:	40800115 	stw	r2,4(r8)
 800224c:	44000015 	stw	r16,0(r8)
 8002250:	8c400044 	addi	r17,r17,1
 8002254:	d8c02015 	stw	r3,128(sp)
 8002258:	dc401f15 	stw	r17,124(sp)
 800225c:	008001c4 	movi	r2,7
 8002260:	147f7f16 	blt	r2,r17,8002060 <__alt_data_end+0xfc002060>
 8002264:	45800204 	addi	r22,r8,8
 8002268:	003eac06 	br	8001d1c <__alt_data_end+0xfc001d1c>
 800226c:	d9402d17 	ldw	r5,180(sp)
 8002270:	d9801e04 	addi	r6,sp,120
 8002274:	9809883a 	mov	r4,r19
 8002278:	80065000 	call	8006500 <__ssprint_r>
 800227c:	103b501e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8002280:	d8c02017 	ldw	r3,128(sp)
 8002284:	dc401f17 	ldw	r17,124(sp)
 8002288:	da000404 	addi	r8,sp,16
 800228c:	003e8406 	br	8001ca0 <__alt_data_end+0xfc001ca0>
 8002290:	d9402d17 	ldw	r5,180(sp)
 8002294:	d9801e04 	addi	r6,sp,120
 8002298:	9809883a 	mov	r4,r19
 800229c:	80065000 	call	8006500 <__ssprint_r>
 80022a0:	103b471e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 80022a4:	d8c02017 	ldw	r3,128(sp)
 80022a8:	dc401f17 	ldw	r17,124(sp)
 80022ac:	dd800404 	addi	r22,sp,16
 80022b0:	003e8606 	br	8001ccc <__alt_data_end+0xfc001ccc>
 80022b4:	0029883a 	mov	r20,zero
 80022b8:	a5000c04 	addi	r20,r20,48
 80022bc:	dc001dc4 	addi	r16,sp,119
 80022c0:	dd001dc5 	stb	r20,119(sp)
 80022c4:	003f3806 	br	8001fa8 <__alt_data_end+0xfc001fa8>
 80022c8:	d9402d17 	ldw	r5,180(sp)
 80022cc:	d9801e04 	addi	r6,sp,120
 80022d0:	9809883a 	mov	r4,r19
 80022d4:	80065000 	call	8006500 <__ssprint_r>
 80022d8:	103b391e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 80022dc:	d8c02017 	ldw	r3,128(sp)
 80022e0:	da000404 	addi	r8,sp,16
 80022e4:	003c7306 	br	80014b4 <__alt_data_end+0xfc0014b4>
 80022e8:	d9003617 	ldw	r4,216(sp)
 80022ec:	d9403717 	ldw	r5,220(sp)
 80022f0:	da003e15 	stw	r8,248(sp)
 80022f4:	800635c0 	call	800635c <__fpclassifyd>
 80022f8:	da003e17 	ldw	r8,248(sp)
 80022fc:	1000bd1e 	bne	r2,zero,80025f4 <___svfprintf_internal_r+0x19d0>
 8002300:	008011c4 	movi	r2,71
 8002304:	14411e0e 	bge	r2,r17,8002780 <___svfprintf_internal_r+0x1b5c>
 8002308:	04020074 	movhi	r16,2049
 800230c:	84383d04 	addi	r16,r16,-7948
 8002310:	00c000c4 	movi	r3,3
 8002314:	00bfdfc4 	movi	r2,-129
 8002318:	d8c02915 	stw	r3,164(sp)
 800231c:	90a4703a 	and	r18,r18,r2
 8002320:	df002783 	ldbu	fp,158(sp)
 8002324:	d8c02b15 	stw	r3,172(sp)
 8002328:	d8002a15 	stw	zero,168(sp)
 800232c:	d8003215 	stw	zero,200(sp)
 8002330:	003bfa06 	br	800131c <__alt_data_end+0xfc00131c>
 8002334:	9080100c 	andi	r2,r18,64
 8002338:	d8002785 	stb	zero,158(sp)
 800233c:	10009426 	beq	r2,zero,8002590 <___svfprintf_internal_r+0x196c>
 8002340:	d9402e17 	ldw	r5,184(sp)
 8002344:	d8c02a17 	ldw	r3,168(sp)
 8002348:	002d883a 	mov	r22,zero
 800234c:	28800104 	addi	r2,r5,4
 8002350:	2d00000b 	ldhu	r20,0(r5)
 8002354:	183ec10e 	bge	r3,zero,8001e5c <__alt_data_end+0xfc001e5c>
 8002358:	a586b03a 	or	r3,r20,r22
 800235c:	d8802e15 	stw	r2,184(sp)
 8002360:	183ec21e 	bne	r3,zero,8001e6c <__alt_data_end+0xfc001e6c>
 8002364:	0039883a 	mov	fp,zero
 8002368:	0005883a 	mov	r2,zero
 800236c:	003db806 	br	8001a50 <__alt_data_end+0xfc001a50>
 8002370:	d8c02e17 	ldw	r3,184(sp)
 8002374:	d9002e17 	ldw	r4,184(sp)
 8002378:	d9402e17 	ldw	r5,184(sp)
 800237c:	18c00017 	ldw	r3,0(r3)
 8002380:	21000117 	ldw	r4,4(r4)
 8002384:	29400204 	addi	r5,r5,8
 8002388:	d8c03615 	stw	r3,216(sp)
 800238c:	d9003715 	stw	r4,220(sp)
 8002390:	d9402e15 	stw	r5,184(sp)
 8002394:	003b5a06 	br	8001100 <__alt_data_end+0xfc001100>
 8002398:	9080100c 	andi	r2,r18,64
 800239c:	10010726 	beq	r2,zero,80027bc <___svfprintf_internal_r+0x1b98>
 80023a0:	d8802e17 	ldw	r2,184(sp)
 80023a4:	1500000f 	ldh	r20,0(r2)
 80023a8:	10800104 	addi	r2,r2,4
 80023ac:	d8802e15 	stw	r2,184(sp)
 80023b0:	a02dd7fa 	srai	r22,r20,31
 80023b4:	b005883a 	mov	r2,r22
 80023b8:	003b7d06 	br	80011b0 <__alt_data_end+0xfc0011b0>
 80023bc:	9080100c 	andi	r2,r18,64
 80023c0:	10010526 	beq	r2,zero,80027d8 <___svfprintf_internal_r+0x1bb4>
 80023c4:	d8c02e17 	ldw	r3,184(sp)
 80023c8:	002d883a 	mov	r22,zero
 80023cc:	1d00000b 	ldhu	r20,0(r3)
 80023d0:	18c00104 	addi	r3,r3,4
 80023d4:	d8c02e15 	stw	r3,184(sp)
 80023d8:	003ce206 	br	8001764 <__alt_data_end+0xfc001764>
 80023dc:	bc400007 	ldb	r17,0(r23)
 80023e0:	003a6506 	br	8000d78 <__alt_data_end+0xfc000d78>
 80023e4:	9080040c 	andi	r2,r18,16
 80023e8:	10010126 	beq	r2,zero,80027f0 <___svfprintf_internal_r+0x1bcc>
 80023ec:	d8c02e17 	ldw	r3,184(sp)
 80023f0:	d9002f17 	ldw	r4,188(sp)
 80023f4:	18800017 	ldw	r2,0(r3)
 80023f8:	18c00104 	addi	r3,r3,4
 80023fc:	d8c02e15 	stw	r3,184(sp)
 8002400:	11000015 	stw	r4,0(r2)
 8002404:	003a3206 	br	8000cd0 <__alt_data_end+0xfc000cd0>
 8002408:	d9002a17 	ldw	r4,168(sp)
 800240c:	d8002785 	stb	zero,158(sp)
 8002410:	203d8d16 	blt	r4,zero,8001a48 <__alt_data_end+0xfc001a48>
 8002414:	00bfdfc4 	movi	r2,-129
 8002418:	90a4703a 	and	r18,r18,r2
 800241c:	003ad506 	br	8000f74 <__alt_data_end+0xfc000f74>
 8002420:	01420074 	movhi	r5,2049
 8002424:	29784a84 	addi	r5,r5,-7894
 8002428:	d9402c15 	stw	r5,176(sp)
 800242c:	d9402c17 	ldw	r5,176(sp)
 8002430:	1c47883a 	add	r3,r3,r17
 8002434:	10800044 	addi	r2,r2,1
 8002438:	41400015 	stw	r5,0(r8)
 800243c:	44400115 	stw	r17,4(r8)
 8002440:	d8c02015 	stw	r3,128(sp)
 8002444:	d8801f15 	stw	r2,124(sp)
 8002448:	010001c4 	movi	r4,7
 800244c:	20bf3016 	blt	r4,r2,8002110 <__alt_data_end+0xfc002110>
 8002450:	42000204 	addi	r8,r8,8
 8002454:	003f3506 	br	800212c <__alt_data_end+0xfc00212c>
 8002458:	01020074 	movhi	r4,2049
 800245c:	21384a84 	addi	r4,r4,-7894
 8002460:	d9002c15 	stw	r4,176(sp)
 8002464:	003c3c06 	br	8001558 <__alt_data_end+0xfc001558>
 8002468:	d9402d17 	ldw	r5,180(sp)
 800246c:	d9801e04 	addi	r6,sp,120
 8002470:	9809883a 	mov	r4,r19
 8002474:	80065000 	call	8006500 <__ssprint_r>
 8002478:	103ad11e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 800247c:	d8c02017 	ldw	r3,128(sp)
 8002480:	da000404 	addi	r8,sp,16
 8002484:	003d9306 	br	8001ad4 <__alt_data_end+0xfc001ad4>
 8002488:	d8801f17 	ldw	r2,124(sp)
 800248c:	01420074 	movhi	r5,2049
 8002490:	01000044 	movi	r4,1
 8002494:	18c00044 	addi	r3,r3,1
 8002498:	10800044 	addi	r2,r2,1
 800249c:	29784a04 	addi	r5,r5,-7896
 80024a0:	41000115 	stw	r4,4(r8)
 80024a4:	41400015 	stw	r5,0(r8)
 80024a8:	d8c02015 	stw	r3,128(sp)
 80024ac:	d8801f15 	stw	r2,124(sp)
 80024b0:	010001c4 	movi	r4,7
 80024b4:	2080b516 	blt	r4,r2,800278c <___svfprintf_internal_r+0x1b68>
 80024b8:	42000204 	addi	r8,r8,8
 80024bc:	8800041e 	bne	r17,zero,80024d0 <___svfprintf_internal_r+0x18ac>
 80024c0:	d8803317 	ldw	r2,204(sp)
 80024c4:	1000021e 	bne	r2,zero,80024d0 <___svfprintf_internal_r+0x18ac>
 80024c8:	9080004c 	andi	r2,r18,1
 80024cc:	103c3926 	beq	r2,zero,80015b4 <__alt_data_end+0xfc0015b4>
 80024d0:	d9003817 	ldw	r4,224(sp)
 80024d4:	d8801f17 	ldw	r2,124(sp)
 80024d8:	d9403417 	ldw	r5,208(sp)
 80024dc:	20c7883a 	add	r3,r4,r3
 80024e0:	10800044 	addi	r2,r2,1
 80024e4:	41000115 	stw	r4,4(r8)
 80024e8:	41400015 	stw	r5,0(r8)
 80024ec:	d8c02015 	stw	r3,128(sp)
 80024f0:	d8801f15 	stw	r2,124(sp)
 80024f4:	010001c4 	movi	r4,7
 80024f8:	20818016 	blt	r4,r2,8002afc <___svfprintf_internal_r+0x1ed8>
 80024fc:	42000204 	addi	r8,r8,8
 8002500:	0463c83a 	sub	r17,zero,r17
 8002504:	0440cb0e 	bge	zero,r17,8002834 <___svfprintf_internal_r+0x1c10>
 8002508:	05800404 	movi	r22,16
 800250c:	b440e80e 	bge	r22,r17,80028b0 <___svfprintf_internal_r+0x1c8c>
 8002510:	01420074 	movhi	r5,2049
 8002514:	29784a84 	addi	r5,r5,-7894
 8002518:	d9402c15 	stw	r5,176(sp)
 800251c:	070001c4 	movi	fp,7
 8002520:	dd002d17 	ldw	r20,180(sp)
 8002524:	00000306 	br	8002534 <___svfprintf_internal_r+0x1910>
 8002528:	42000204 	addi	r8,r8,8
 800252c:	8c7ffc04 	addi	r17,r17,-16
 8002530:	b440e20e 	bge	r22,r17,80028bc <___svfprintf_internal_r+0x1c98>
 8002534:	18c00404 	addi	r3,r3,16
 8002538:	10800044 	addi	r2,r2,1
 800253c:	45400015 	stw	r21,0(r8)
 8002540:	45800115 	stw	r22,4(r8)
 8002544:	d8c02015 	stw	r3,128(sp)
 8002548:	d8801f15 	stw	r2,124(sp)
 800254c:	e0bff60e 	bge	fp,r2,8002528 <__alt_data_end+0xfc002528>
 8002550:	d9801e04 	addi	r6,sp,120
 8002554:	a00b883a 	mov	r5,r20
 8002558:	9809883a 	mov	r4,r19
 800255c:	80065000 	call	8006500 <__ssprint_r>
 8002560:	103a971e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8002564:	d8c02017 	ldw	r3,128(sp)
 8002568:	d8801f17 	ldw	r2,124(sp)
 800256c:	da000404 	addi	r8,sp,16
 8002570:	003fee06 	br	800252c <__alt_data_end+0xfc00252c>
 8002574:	d9002e17 	ldw	r4,184(sp)
 8002578:	d9402a17 	ldw	r5,168(sp)
 800257c:	002d883a 	mov	r22,zero
 8002580:	20800104 	addi	r2,r4,4
 8002584:	25000017 	ldw	r20,0(r4)
 8002588:	283e7d0e 	bge	r5,zero,8001f80 <__alt_data_end+0xfc001f80>
 800258c:	003eda06 	br	80020f8 <__alt_data_end+0xfc0020f8>
 8002590:	d9002e17 	ldw	r4,184(sp)
 8002594:	d9402a17 	ldw	r5,168(sp)
 8002598:	002d883a 	mov	r22,zero
 800259c:	20800104 	addi	r2,r4,4
 80025a0:	25000017 	ldw	r20,0(r4)
 80025a4:	283e2d0e 	bge	r5,zero,8001e5c <__alt_data_end+0xfc001e5c>
 80025a8:	003f6b06 	br	8002358 <__alt_data_end+0xfc002358>
 80025ac:	d8c02e15 	stw	r3,184(sp)
 80025b0:	0039883a 	mov	fp,zero
 80025b4:	003ed206 	br	8002100 <__alt_data_end+0xfc002100>
 80025b8:	bc400043 	ldbu	r17,1(r23)
 80025bc:	84000814 	ori	r16,r16,32
 80025c0:	bdc00044 	addi	r23,r23,1
 80025c4:	8c403fcc 	andi	r17,r17,255
 80025c8:	8c40201c 	xori	r17,r17,128
 80025cc:	8c7fe004 	addi	r17,r17,-128
 80025d0:	0039e906 	br	8000d78 <__alt_data_end+0xfc000d78>
 80025d4:	d9402d17 	ldw	r5,180(sp)
 80025d8:	d9801e04 	addi	r6,sp,120
 80025dc:	9809883a 	mov	r4,r19
 80025e0:	80065000 	call	8006500 <__ssprint_r>
 80025e4:	103a761e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 80025e8:	d8c02017 	ldw	r3,128(sp)
 80025ec:	da000404 	addi	r8,sp,16
 80025f0:	003d4a06 	br	8001b1c <__alt_data_end+0xfc001b1c>
 80025f4:	d9002a17 	ldw	r4,168(sp)
 80025f8:	05bff7c4 	movi	r22,-33
 80025fc:	00bfffc4 	movi	r2,-1
 8002600:	8dac703a 	and	r22,r17,r22
 8002604:	20806a26 	beq	r4,r2,80027b0 <___svfprintf_internal_r+0x1b8c>
 8002608:	008011c4 	movi	r2,71
 800260c:	b0813726 	beq	r22,r2,8002aec <___svfprintf_internal_r+0x1ec8>
 8002610:	d9003717 	ldw	r4,220(sp)
 8002614:	90c04014 	ori	r3,r18,256
 8002618:	d8c02c15 	stw	r3,176(sp)
 800261c:	20015d16 	blt	r4,zero,8002b94 <___svfprintf_internal_r+0x1f70>
 8002620:	dd003717 	ldw	r20,220(sp)
 8002624:	d8002905 	stb	zero,164(sp)
 8002628:	00801984 	movi	r2,102
 800262c:	88814026 	beq	r17,r2,8002b30 <___svfprintf_internal_r+0x1f0c>
 8002630:	00801184 	movi	r2,70
 8002634:	88817126 	beq	r17,r2,8002bfc <___svfprintf_internal_r+0x1fd8>
 8002638:	00801144 	movi	r2,69
 800263c:	b0816226 	beq	r22,r2,8002bc8 <___svfprintf_internal_r+0x1fa4>
 8002640:	d8c02a17 	ldw	r3,168(sp)
 8002644:	d8802104 	addi	r2,sp,132
 8002648:	d8800315 	stw	r2,12(sp)
 800264c:	d9403617 	ldw	r5,216(sp)
 8002650:	d8802504 	addi	r2,sp,148
 8002654:	d8800215 	stw	r2,8(sp)
 8002658:	d8802604 	addi	r2,sp,152
 800265c:	d8c00015 	stw	r3,0(sp)
 8002660:	d8800115 	stw	r2,4(sp)
 8002664:	01c00084 	movi	r7,2
 8002668:	a00d883a 	mov	r6,r20
 800266c:	9809883a 	mov	r4,r19
 8002670:	d8c03d15 	stw	r3,244(sp)
 8002674:	da003e15 	stw	r8,248(sp)
 8002678:	80031080 	call	8003108 <_dtoa_r>
 800267c:	1021883a 	mov	r16,r2
 8002680:	008019c4 	movi	r2,103
 8002684:	d8c03d17 	ldw	r3,244(sp)
 8002688:	da003e17 	ldw	r8,248(sp)
 800268c:	8880e726 	beq	r17,r2,8002a2c <___svfprintf_internal_r+0x1e08>
 8002690:	008011c4 	movi	r2,71
 8002694:	8880d426 	beq	r17,r2,80029e8 <___svfprintf_internal_r+0x1dc4>
 8002698:	80f9883a 	add	fp,r16,r3
 800269c:	d9003617 	ldw	r4,216(sp)
 80026a0:	000d883a 	mov	r6,zero
 80026a4:	000f883a 	mov	r7,zero
 80026a8:	a00b883a 	mov	r5,r20
 80026ac:	da003e15 	stw	r8,248(sp)
 80026b0:	800a6b00 	call	800a6b0 <__eqdf2>
 80026b4:	da003e17 	ldw	r8,248(sp)
 80026b8:	1000e426 	beq	r2,zero,8002a4c <___svfprintf_internal_r+0x1e28>
 80026bc:	d8802117 	ldw	r2,132(sp)
 80026c0:	1700062e 	bgeu	r2,fp,80026dc <___svfprintf_internal_r+0x1ab8>
 80026c4:	01000c04 	movi	r4,48
 80026c8:	10c00044 	addi	r3,r2,1
 80026cc:	d8c02115 	stw	r3,132(sp)
 80026d0:	11000005 	stb	r4,0(r2)
 80026d4:	d8802117 	ldw	r2,132(sp)
 80026d8:	173ffb36 	bltu	r2,fp,80026c8 <__alt_data_end+0xfc0026c8>
 80026dc:	1405c83a 	sub	r2,r2,r16
 80026e0:	d8803315 	stw	r2,204(sp)
 80026e4:	008011c4 	movi	r2,71
 80026e8:	b080c526 	beq	r22,r2,8002a00 <___svfprintf_internal_r+0x1ddc>
 80026ec:	00801944 	movi	r2,101
 80026f0:	1441d80e 	bge	r2,r17,8002e54 <___svfprintf_internal_r+0x2230>
 80026f4:	d8c02617 	ldw	r3,152(sp)
 80026f8:	00801984 	movi	r2,102
 80026fc:	d8c03215 	stw	r3,200(sp)
 8002700:	88813426 	beq	r17,r2,8002bd4 <___svfprintf_internal_r+0x1fb0>
 8002704:	d8c03217 	ldw	r3,200(sp)
 8002708:	d9003317 	ldw	r4,204(sp)
 800270c:	19012516 	blt	r3,r4,8002ba4 <___svfprintf_internal_r+0x1f80>
 8002710:	9480004c 	andi	r18,r18,1
 8002714:	9001841e 	bne	r18,zero,8002d28 <___svfprintf_internal_r+0x2104>
 8002718:	1805883a 	mov	r2,r3
 800271c:	1801cb16 	blt	r3,zero,8002e4c <___svfprintf_internal_r+0x2228>
 8002720:	d8c03217 	ldw	r3,200(sp)
 8002724:	044019c4 	movi	r17,103
 8002728:	d8c02b15 	stw	r3,172(sp)
 800272c:	df002907 	ldb	fp,164(sp)
 8002730:	e000a61e 	bne	fp,zero,80029cc <___svfprintf_internal_r+0x1da8>
 8002734:	df002783 	ldbu	fp,158(sp)
 8002738:	d8802915 	stw	r2,164(sp)
 800273c:	dc802c17 	ldw	r18,176(sp)
 8002740:	d8002a15 	stw	zero,168(sp)
 8002744:	003af506 	br	800131c <__alt_data_end+0xfc00131c>
 8002748:	04020074 	movhi	r16,2049
 800274c:	84383a04 	addi	r16,r16,-7960
 8002750:	003a7e06 	br	800114c <__alt_data_end+0xfc00114c>
 8002754:	d9003917 	ldw	r4,228(sp)
 8002758:	04001004 	movi	r16,64
 800275c:	800b883a 	mov	r5,r16
 8002760:	800486c0 	call	800486c <_malloc_r>
 8002764:	d9002d17 	ldw	r4,180(sp)
 8002768:	20800015 	stw	r2,0(r4)
 800276c:	20800415 	stw	r2,16(r4)
 8002770:	1001d026 	beq	r2,zero,8002eb4 <___svfprintf_internal_r+0x2290>
 8002774:	d8802d17 	ldw	r2,180(sp)
 8002778:	14000515 	stw	r16,20(r2)
 800277c:	00394406 	br	8000c90 <__alt_data_end+0xfc000c90>
 8002780:	04020074 	movhi	r16,2049
 8002784:	84383c04 	addi	r16,r16,-7952
 8002788:	003ee106 	br	8002310 <__alt_data_end+0xfc002310>
 800278c:	d9402d17 	ldw	r5,180(sp)
 8002790:	d9801e04 	addi	r6,sp,120
 8002794:	9809883a 	mov	r4,r19
 8002798:	80065000 	call	8006500 <__ssprint_r>
 800279c:	103a081e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 80027a0:	dc402617 	ldw	r17,152(sp)
 80027a4:	d8c02017 	ldw	r3,128(sp)
 80027a8:	da000404 	addi	r8,sp,16
 80027ac:	003f4306 	br	80024bc <__alt_data_end+0xfc0024bc>
 80027b0:	01400184 	movi	r5,6
 80027b4:	d9402a15 	stw	r5,168(sp)
 80027b8:	003f9506 	br	8002610 <__alt_data_end+0xfc002610>
 80027bc:	d8c02e17 	ldw	r3,184(sp)
 80027c0:	1d000017 	ldw	r20,0(r3)
 80027c4:	18c00104 	addi	r3,r3,4
 80027c8:	d8c02e15 	stw	r3,184(sp)
 80027cc:	a02dd7fa 	srai	r22,r20,31
 80027d0:	b005883a 	mov	r2,r22
 80027d4:	003a7606 	br	80011b0 <__alt_data_end+0xfc0011b0>
 80027d8:	d9002e17 	ldw	r4,184(sp)
 80027dc:	002d883a 	mov	r22,zero
 80027e0:	25000017 	ldw	r20,0(r4)
 80027e4:	21000104 	addi	r4,r4,4
 80027e8:	d9002e15 	stw	r4,184(sp)
 80027ec:	003bdd06 	br	8001764 <__alt_data_end+0xfc001764>
 80027f0:	9480100c 	andi	r18,r18,64
 80027f4:	90006e26 	beq	r18,zero,80029b0 <___svfprintf_internal_r+0x1d8c>
 80027f8:	d9402e17 	ldw	r5,184(sp)
 80027fc:	d8c02f17 	ldw	r3,188(sp)
 8002800:	28800017 	ldw	r2,0(r5)
 8002804:	29400104 	addi	r5,r5,4
 8002808:	d9402e15 	stw	r5,184(sp)
 800280c:	10c0000d 	sth	r3,0(r2)
 8002810:	00392f06 	br	8000cd0 <__alt_data_end+0xfc000cd0>
 8002814:	d9402d17 	ldw	r5,180(sp)
 8002818:	d9801e04 	addi	r6,sp,120
 800281c:	9809883a 	mov	r4,r19
 8002820:	80065000 	call	8006500 <__ssprint_r>
 8002824:	1039e61e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8002828:	d8c02017 	ldw	r3,128(sp)
 800282c:	d8801f17 	ldw	r2,124(sp)
 8002830:	da000404 	addi	r8,sp,16
 8002834:	d9403317 	ldw	r5,204(sp)
 8002838:	10800044 	addi	r2,r2,1
 800283c:	44000015 	stw	r16,0(r8)
 8002840:	28c7883a 	add	r3,r5,r3
 8002844:	003b5506 	br	800159c <__alt_data_end+0xfc00159c>
 8002848:	8009883a 	mov	r4,r16
 800284c:	df003e15 	stw	fp,248(sp)
 8002850:	8000b8c0 	call	8000b8c <strlen>
 8002854:	d8802b15 	stw	r2,172(sp)
 8002858:	da003e17 	ldw	r8,248(sp)
 800285c:	103c160e 	bge	r2,zero,80018b8 <__alt_data_end+0xfc0018b8>
 8002860:	0005883a 	mov	r2,zero
 8002864:	003c1406 	br	80018b8 <__alt_data_end+0xfc0018b8>
 8002868:	00bfffc4 	movi	r2,-1
 800286c:	0039d906 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 8002870:	01020074 	movhi	r4,2049
 8002874:	21384e84 	addi	r4,r4,-7878
 8002878:	d9003515 	stw	r4,212(sp)
 800287c:	003ae406 	br	8001410 <__alt_data_end+0xfc001410>
 8002880:	013fffc4 	movi	r4,-1
 8002884:	0039fa06 	br	8001070 <__alt_data_end+0xfc001070>
 8002888:	d9402d17 	ldw	r5,180(sp)
 800288c:	d9801e04 	addi	r6,sp,120
 8002890:	9809883a 	mov	r4,r19
 8002894:	80065000 	call	8006500 <__ssprint_r>
 8002898:	1039c91e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 800289c:	d8c02017 	ldw	r3,128(sp)
 80028a0:	da000404 	addi	r8,sp,16
 80028a4:	003d8406 	br	8001eb8 <__alt_data_end+0xfc001eb8>
 80028a8:	0023883a 	mov	r17,zero
 80028ac:	003d8306 	br	8001ebc <__alt_data_end+0xfc001ebc>
 80028b0:	01020074 	movhi	r4,2049
 80028b4:	21384a84 	addi	r4,r4,-7894
 80028b8:	d9002c15 	stw	r4,176(sp)
 80028bc:	d9002c17 	ldw	r4,176(sp)
 80028c0:	1c47883a 	add	r3,r3,r17
 80028c4:	10800044 	addi	r2,r2,1
 80028c8:	41000015 	stw	r4,0(r8)
 80028cc:	44400115 	stw	r17,4(r8)
 80028d0:	d8c02015 	stw	r3,128(sp)
 80028d4:	d8801f15 	stw	r2,124(sp)
 80028d8:	010001c4 	movi	r4,7
 80028dc:	20bfcd16 	blt	r4,r2,8002814 <__alt_data_end+0xfc002814>
 80028e0:	42000204 	addi	r8,r8,8
 80028e4:	003fd306 	br	8002834 <__alt_data_end+0xfc002834>
 80028e8:	d9402d17 	ldw	r5,180(sp)
 80028ec:	d9801e04 	addi	r6,sp,120
 80028f0:	9809883a 	mov	r4,r19
 80028f4:	80065000 	call	8006500 <__ssprint_r>
 80028f8:	1039b11e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 80028fc:	d8802617 	ldw	r2,152(sp)
 8002900:	d8c02017 	ldw	r3,128(sp)
 8002904:	da000404 	addi	r8,sp,16
 8002908:	003e1c06 	br	800217c <__alt_data_end+0xfc00217c>
 800290c:	d8802a17 	ldw	r2,168(sp)
 8002910:	00c00184 	movi	r3,6
 8002914:	1880012e 	bgeu	r3,r2,800291c <___svfprintf_internal_r+0x1cf8>
 8002918:	1805883a 	mov	r2,r3
 800291c:	d8802b15 	stw	r2,172(sp)
 8002920:	1000f316 	blt	r2,zero,8002cf0 <___svfprintf_internal_r+0x20cc>
 8002924:	04020074 	movhi	r16,2049
 8002928:	d8802915 	stw	r2,164(sp)
 800292c:	dd002e15 	stw	r20,184(sp)
 8002930:	d8002a15 	stw	zero,168(sp)
 8002934:	d8003215 	stw	zero,200(sp)
 8002938:	84384804 	addi	r16,r16,-7904
 800293c:	0039883a 	mov	fp,zero
 8002940:	003a7d06 	br	8001338 <__alt_data_end+0xfc001338>
 8002944:	01020074 	movhi	r4,2049
 8002948:	21384e84 	addi	r4,r4,-7878
 800294c:	d9003515 	stw	r4,212(sp)
 8002950:	003b3d06 	br	8001648 <__alt_data_end+0xfc001648>
 8002954:	d9402d17 	ldw	r5,180(sp)
 8002958:	d9801e04 	addi	r6,sp,120
 800295c:	9809883a 	mov	r4,r19
 8002960:	80065000 	call	8006500 <__ssprint_r>
 8002964:	1039961e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8002968:	d8802617 	ldw	r2,152(sp)
 800296c:	d9403317 	ldw	r5,204(sp)
 8002970:	d8c02017 	ldw	r3,128(sp)
 8002974:	da000404 	addi	r8,sp,16
 8002978:	2885c83a 	sub	r2,r5,r2
 800297c:	003e1006 	br	80021c0 <__alt_data_end+0xfc0021c0>
 8002980:	00800044 	movi	r2,1
 8002984:	10803fcc 	andi	r2,r2,255
 8002988:	00c00044 	movi	r3,1
 800298c:	10fa1026 	beq	r2,r3,80011d0 <__alt_data_end+0xfc0011d0>
 8002990:	00c00084 	movi	r3,2
 8002994:	10fb8226 	beq	r2,r3,80017a0 <__alt_data_end+0xfc0017a0>
 8002998:	003a4206 	br	80012a4 <__alt_data_end+0xfc0012a4>
 800299c:	0021883a 	mov	r16,zero
 80029a0:	003e0806 	br	80021c4 <__alt_data_end+0xfc0021c4>
 80029a4:	07000b44 	movi	fp,45
 80029a8:	df002785 	stb	fp,158(sp)
 80029ac:	0039e306 	br	800113c <__alt_data_end+0xfc00113c>
 80029b0:	d9002e17 	ldw	r4,184(sp)
 80029b4:	d9402f17 	ldw	r5,188(sp)
 80029b8:	20800017 	ldw	r2,0(r4)
 80029bc:	21000104 	addi	r4,r4,4
 80029c0:	d9002e15 	stw	r4,184(sp)
 80029c4:	11400015 	stw	r5,0(r2)
 80029c8:	0038c106 	br	8000cd0 <__alt_data_end+0xfc000cd0>
 80029cc:	00c00b44 	movi	r3,45
 80029d0:	d8c02785 	stb	r3,158(sp)
 80029d4:	d8802915 	stw	r2,164(sp)
 80029d8:	dc802c17 	ldw	r18,176(sp)
 80029dc:	d8002a15 	stw	zero,168(sp)
 80029e0:	07000b44 	movi	fp,45
 80029e4:	003a5106 	br	800132c <__alt_data_end+0xfc00132c>
 80029e8:	9080004c 	andi	r2,r18,1
 80029ec:	1000941e 	bne	r2,zero,8002c40 <___svfprintf_internal_r+0x201c>
 80029f0:	d8802117 	ldw	r2,132(sp)
 80029f4:	1405c83a 	sub	r2,r2,r16
 80029f8:	d8803315 	stw	r2,204(sp)
 80029fc:	b441151e 	bne	r22,r17,8002e54 <___svfprintf_internal_r+0x2230>
 8002a00:	dd802617 	ldw	r22,152(sp)
 8002a04:	00bfff44 	movi	r2,-3
 8002a08:	b0801a16 	blt	r22,r2,8002a74 <___svfprintf_internal_r+0x1e50>
 8002a0c:	d9402a17 	ldw	r5,168(sp)
 8002a10:	2d801816 	blt	r5,r22,8002a74 <___svfprintf_internal_r+0x1e50>
 8002a14:	dd803215 	stw	r22,200(sp)
 8002a18:	003f3a06 	br	8002704 <__alt_data_end+0xfc002704>
 8002a1c:	1025883a 	mov	r18,r2
 8002a20:	0039883a 	mov	fp,zero
 8002a24:	00800084 	movi	r2,2
 8002a28:	003fd606 	br	8002984 <__alt_data_end+0xfc002984>
 8002a2c:	9080004c 	andi	r2,r18,1
 8002a30:	103f191e 	bne	r2,zero,8002698 <__alt_data_end+0xfc002698>
 8002a34:	d8802117 	ldw	r2,132(sp)
 8002a38:	003f2806 	br	80026dc <__alt_data_end+0xfc0026dc>
 8002a3c:	01020074 	movhi	r4,2049
 8002a40:	21384a84 	addi	r4,r4,-7894
 8002a44:	d9002c15 	stw	r4,176(sp)
 8002a48:	003c7c06 	br	8001c3c <__alt_data_end+0xfc001c3c>
 8002a4c:	e005883a 	mov	r2,fp
 8002a50:	003f2206 	br	80026dc <__alt_data_end+0xfc0026dc>
 8002a54:	d9002a17 	ldw	r4,168(sp)
 8002a58:	df002783 	ldbu	fp,158(sp)
 8002a5c:	dd002e15 	stw	r20,184(sp)
 8002a60:	d9002915 	stw	r4,164(sp)
 8002a64:	d9002b15 	stw	r4,172(sp)
 8002a68:	d8002a15 	stw	zero,168(sp)
 8002a6c:	d8003215 	stw	zero,200(sp)
 8002a70:	003a2a06 	br	800131c <__alt_data_end+0xfc00131c>
 8002a74:	8c7fff84 	addi	r17,r17,-2
 8002a78:	b5bfffc4 	addi	r22,r22,-1
 8002a7c:	dd802615 	stw	r22,152(sp)
 8002a80:	dc4022c5 	stb	r17,139(sp)
 8002a84:	b000c316 	blt	r22,zero,8002d94 <___svfprintf_internal_r+0x2170>
 8002a88:	00800ac4 	movi	r2,43
 8002a8c:	d8802305 	stb	r2,140(sp)
 8002a90:	00800244 	movi	r2,9
 8002a94:	15806e16 	blt	r2,r22,8002c50 <___svfprintf_internal_r+0x202c>
 8002a98:	00800c04 	movi	r2,48
 8002a9c:	b5800c04 	addi	r22,r22,48
 8002aa0:	d8802345 	stb	r2,141(sp)
 8002aa4:	dd802385 	stb	r22,142(sp)
 8002aa8:	d88023c4 	addi	r2,sp,143
 8002aac:	df0022c4 	addi	fp,sp,139
 8002ab0:	d8c03317 	ldw	r3,204(sp)
 8002ab4:	1739c83a 	sub	fp,r2,fp
 8002ab8:	d9003317 	ldw	r4,204(sp)
 8002abc:	e0c7883a 	add	r3,fp,r3
 8002ac0:	df003b15 	stw	fp,236(sp)
 8002ac4:	d8c02b15 	stw	r3,172(sp)
 8002ac8:	00800044 	movi	r2,1
 8002acc:	1100b70e 	bge	r2,r4,8002dac <___svfprintf_internal_r+0x2188>
 8002ad0:	d8c02b17 	ldw	r3,172(sp)
 8002ad4:	18c00044 	addi	r3,r3,1
 8002ad8:	d8c02b15 	stw	r3,172(sp)
 8002adc:	1805883a 	mov	r2,r3
 8002ae0:	1800b016 	blt	r3,zero,8002da4 <___svfprintf_internal_r+0x2180>
 8002ae4:	d8003215 	stw	zero,200(sp)
 8002ae8:	003f1006 	br	800272c <__alt_data_end+0xfc00272c>
 8002aec:	d8802a17 	ldw	r2,168(sp)
 8002af0:	103ec71e 	bne	r2,zero,8002610 <__alt_data_end+0xfc002610>
 8002af4:	dc002a15 	stw	r16,168(sp)
 8002af8:	003ec506 	br	8002610 <__alt_data_end+0xfc002610>
 8002afc:	d9402d17 	ldw	r5,180(sp)
 8002b00:	d9801e04 	addi	r6,sp,120
 8002b04:	9809883a 	mov	r4,r19
 8002b08:	80065000 	call	8006500 <__ssprint_r>
 8002b0c:	10392c1e 	bne	r2,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 8002b10:	dc402617 	ldw	r17,152(sp)
 8002b14:	d8c02017 	ldw	r3,128(sp)
 8002b18:	d8801f17 	ldw	r2,124(sp)
 8002b1c:	da000404 	addi	r8,sp,16
 8002b20:	003e7706 	br	8002500 <__alt_data_end+0xfc002500>
 8002b24:	182f883a 	mov	r23,r3
 8002b28:	d8002a15 	stw	zero,168(sp)
 8002b2c:	00389306 	br	8000d7c <__alt_data_end+0xfc000d7c>
 8002b30:	d8c02a17 	ldw	r3,168(sp)
 8002b34:	d8802104 	addi	r2,sp,132
 8002b38:	d8800315 	stw	r2,12(sp)
 8002b3c:	d9403617 	ldw	r5,216(sp)
 8002b40:	d8802504 	addi	r2,sp,148
 8002b44:	d8800215 	stw	r2,8(sp)
 8002b48:	d8802604 	addi	r2,sp,152
 8002b4c:	d8c00015 	stw	r3,0(sp)
 8002b50:	9809883a 	mov	r4,r19
 8002b54:	d8800115 	stw	r2,4(sp)
 8002b58:	01c000c4 	movi	r7,3
 8002b5c:	a00d883a 	mov	r6,r20
 8002b60:	da003e15 	stw	r8,248(sp)
 8002b64:	80031080 	call	8003108 <_dtoa_r>
 8002b68:	d9002a17 	ldw	r4,168(sp)
 8002b6c:	da003e17 	ldw	r8,248(sp)
 8002b70:	1021883a 	mov	r16,r2
 8002b74:	1139883a 	add	fp,r2,r4
 8002b78:	2007883a 	mov	r3,r4
 8002b7c:	81000007 	ldb	r4,0(r16)
 8002b80:	00800c04 	movi	r2,48
 8002b84:	20806f26 	beq	r4,r2,8002d44 <___svfprintf_internal_r+0x2120>
 8002b88:	d8c02617 	ldw	r3,152(sp)
 8002b8c:	e0f9883a 	add	fp,fp,r3
 8002b90:	003ec206 	br	800269c <__alt_data_end+0xfc00269c>
 8002b94:	00c00b44 	movi	r3,45
 8002b98:	2520003c 	xorhi	r20,r4,32768
 8002b9c:	d8c02905 	stb	r3,164(sp)
 8002ba0:	003ea106 	br	8002628 <__alt_data_end+0xfc002628>
 8002ba4:	d8c03217 	ldw	r3,200(sp)
 8002ba8:	00c0890e 	bge	zero,r3,8002dd0 <___svfprintf_internal_r+0x21ac>
 8002bac:	00800044 	movi	r2,1
 8002bb0:	d9003317 	ldw	r4,204(sp)
 8002bb4:	1105883a 	add	r2,r2,r4
 8002bb8:	d8802b15 	stw	r2,172(sp)
 8002bbc:	10005f16 	blt	r2,zero,8002d3c <___svfprintf_internal_r+0x2118>
 8002bc0:	044019c4 	movi	r17,103
 8002bc4:	003ed906 	br	800272c <__alt_data_end+0xfc00272c>
 8002bc8:	d9002a17 	ldw	r4,168(sp)
 8002bcc:	20c00044 	addi	r3,r4,1
 8002bd0:	003e9c06 	br	8002644 <__alt_data_end+0xfc002644>
 8002bd4:	d9002a17 	ldw	r4,168(sp)
 8002bd8:	00c0680e 	bge	zero,r3,8002d7c <___svfprintf_internal_r+0x2158>
 8002bdc:	2000461e 	bne	r4,zero,8002cf8 <___svfprintf_internal_r+0x20d4>
 8002be0:	9480004c 	andi	r18,r18,1
 8002be4:	9000441e 	bne	r18,zero,8002cf8 <___svfprintf_internal_r+0x20d4>
 8002be8:	1805883a 	mov	r2,r3
 8002bec:	1800a116 	blt	r3,zero,8002e74 <___svfprintf_internal_r+0x2250>
 8002bf0:	d8c03217 	ldw	r3,200(sp)
 8002bf4:	d8c02b15 	stw	r3,172(sp)
 8002bf8:	003ecc06 	br	800272c <__alt_data_end+0xfc00272c>
 8002bfc:	d9402a17 	ldw	r5,168(sp)
 8002c00:	d8802104 	addi	r2,sp,132
 8002c04:	d8800315 	stw	r2,12(sp)
 8002c08:	d9400015 	stw	r5,0(sp)
 8002c0c:	d8802504 	addi	r2,sp,148
 8002c10:	d9403617 	ldw	r5,216(sp)
 8002c14:	d8800215 	stw	r2,8(sp)
 8002c18:	d8802604 	addi	r2,sp,152
 8002c1c:	d8800115 	stw	r2,4(sp)
 8002c20:	01c000c4 	movi	r7,3
 8002c24:	a00d883a 	mov	r6,r20
 8002c28:	9809883a 	mov	r4,r19
 8002c2c:	da003e15 	stw	r8,248(sp)
 8002c30:	80031080 	call	8003108 <_dtoa_r>
 8002c34:	d8c02a17 	ldw	r3,168(sp)
 8002c38:	da003e17 	ldw	r8,248(sp)
 8002c3c:	1021883a 	mov	r16,r2
 8002c40:	00801184 	movi	r2,70
 8002c44:	80f9883a 	add	fp,r16,r3
 8002c48:	88bfcc26 	beq	r17,r2,8002b7c <__alt_data_end+0xfc002b7c>
 8002c4c:	003e9306 	br	800269c <__alt_data_end+0xfc00269c>
 8002c50:	df0022c4 	addi	fp,sp,139
 8002c54:	dc002a15 	stw	r16,168(sp)
 8002c58:	9829883a 	mov	r20,r19
 8002c5c:	e021883a 	mov	r16,fp
 8002c60:	4027883a 	mov	r19,r8
 8002c64:	b009883a 	mov	r4,r22
 8002c68:	01400284 	movi	r5,10
 8002c6c:	80008f40 	call	80008f4 <__modsi3>
 8002c70:	10800c04 	addi	r2,r2,48
 8002c74:	843fffc4 	addi	r16,r16,-1
 8002c78:	b009883a 	mov	r4,r22
 8002c7c:	01400284 	movi	r5,10
 8002c80:	80800005 	stb	r2,0(r16)
 8002c84:	80008700 	call	8000870 <__divsi3>
 8002c88:	102d883a 	mov	r22,r2
 8002c8c:	00800244 	movi	r2,9
 8002c90:	15bff416 	blt	r2,r22,8002c64 <__alt_data_end+0xfc002c64>
 8002c94:	9811883a 	mov	r8,r19
 8002c98:	b0800c04 	addi	r2,r22,48
 8002c9c:	a027883a 	mov	r19,r20
 8002ca0:	8029883a 	mov	r20,r16
 8002ca4:	a17fffc4 	addi	r5,r20,-1
 8002ca8:	a0bfffc5 	stb	r2,-1(r20)
 8002cac:	dc002a17 	ldw	r16,168(sp)
 8002cb0:	2f00782e 	bgeu	r5,fp,8002e94 <___svfprintf_internal_r+0x2270>
 8002cb4:	d9c02384 	addi	r7,sp,142
 8002cb8:	3d0fc83a 	sub	r7,r7,r20
 8002cbc:	d9002344 	addi	r4,sp,141
 8002cc0:	e1cf883a 	add	r7,fp,r7
 8002cc4:	00000106 	br	8002ccc <___svfprintf_internal_r+0x20a8>
 8002cc8:	28800003 	ldbu	r2,0(r5)
 8002ccc:	20800005 	stb	r2,0(r4)
 8002cd0:	21000044 	addi	r4,r4,1
 8002cd4:	29400044 	addi	r5,r5,1
 8002cd8:	21fffb1e 	bne	r4,r7,8002cc8 <__alt_data_end+0xfc002cc8>
 8002cdc:	d8802304 	addi	r2,sp,140
 8002ce0:	1505c83a 	sub	r2,r2,r20
 8002ce4:	d8c02344 	addi	r3,sp,141
 8002ce8:	1885883a 	add	r2,r3,r2
 8002cec:	003f7006 	br	8002ab0 <__alt_data_end+0xfc002ab0>
 8002cf0:	0005883a 	mov	r2,zero
 8002cf4:	003f0b06 	br	8002924 <__alt_data_end+0xfc002924>
 8002cf8:	d9002a17 	ldw	r4,168(sp)
 8002cfc:	d8c03217 	ldw	r3,200(sp)
 8002d00:	20800044 	addi	r2,r4,1
 8002d04:	1885883a 	add	r2,r3,r2
 8002d08:	d8802b15 	stw	r2,172(sp)
 8002d0c:	103e870e 	bge	r2,zero,800272c <__alt_data_end+0xfc00272c>
 8002d10:	0005883a 	mov	r2,zero
 8002d14:	003e8506 	br	800272c <__alt_data_end+0xfc00272c>
 8002d18:	01020074 	movhi	r4,2049
 8002d1c:	21384a84 	addi	r4,r4,-7894
 8002d20:	d9002c15 	stw	r4,176(sp)
 8002d24:	003cc506 	br	800203c <__alt_data_end+0xfc00203c>
 8002d28:	d8c03217 	ldw	r3,200(sp)
 8002d2c:	18c00044 	addi	r3,r3,1
 8002d30:	d8c02b15 	stw	r3,172(sp)
 8002d34:	1805883a 	mov	r2,r3
 8002d38:	183fa10e 	bge	r3,zero,8002bc0 <__alt_data_end+0xfc002bc0>
 8002d3c:	0005883a 	mov	r2,zero
 8002d40:	003f9f06 	br	8002bc0 <__alt_data_end+0xfc002bc0>
 8002d44:	d9003617 	ldw	r4,216(sp)
 8002d48:	000d883a 	mov	r6,zero
 8002d4c:	000f883a 	mov	r7,zero
 8002d50:	a00b883a 	mov	r5,r20
 8002d54:	d8c03d15 	stw	r3,244(sp)
 8002d58:	da003e15 	stw	r8,248(sp)
 8002d5c:	800a6b00 	call	800a6b0 <__eqdf2>
 8002d60:	d8c03d17 	ldw	r3,244(sp)
 8002d64:	da003e17 	ldw	r8,248(sp)
 8002d68:	103f8726 	beq	r2,zero,8002b88 <__alt_data_end+0xfc002b88>
 8002d6c:	00800044 	movi	r2,1
 8002d70:	10c7c83a 	sub	r3,r2,r3
 8002d74:	d8c02615 	stw	r3,152(sp)
 8002d78:	003f8406 	br	8002b8c <__alt_data_end+0xfc002b8c>
 8002d7c:	20000e1e 	bne	r4,zero,8002db8 <___svfprintf_internal_r+0x2194>
 8002d80:	9480004c 	andi	r18,r18,1
 8002d84:	90000c1e 	bne	r18,zero,8002db8 <___svfprintf_internal_r+0x2194>
 8002d88:	00800044 	movi	r2,1
 8002d8c:	d8802b15 	stw	r2,172(sp)
 8002d90:	003e6606 	br	800272c <__alt_data_end+0xfc00272c>
 8002d94:	00800b44 	movi	r2,45
 8002d98:	05adc83a 	sub	r22,zero,r22
 8002d9c:	d8802305 	stb	r2,140(sp)
 8002da0:	003f3b06 	br	8002a90 <__alt_data_end+0xfc002a90>
 8002da4:	0005883a 	mov	r2,zero
 8002da8:	003f4e06 	br	8002ae4 <__alt_data_end+0xfc002ae4>
 8002dac:	90a4703a 	and	r18,r18,r2
 8002db0:	903f4a26 	beq	r18,zero,8002adc <__alt_data_end+0xfc002adc>
 8002db4:	003f4606 	br	8002ad0 <__alt_data_end+0xfc002ad0>
 8002db8:	d8c02a17 	ldw	r3,168(sp)
 8002dbc:	18c00084 	addi	r3,r3,2
 8002dc0:	d8c02b15 	stw	r3,172(sp)
 8002dc4:	1805883a 	mov	r2,r3
 8002dc8:	183e580e 	bge	r3,zero,800272c <__alt_data_end+0xfc00272c>
 8002dcc:	003fd006 	br	8002d10 <__alt_data_end+0xfc002d10>
 8002dd0:	00800084 	movi	r2,2
 8002dd4:	10c5c83a 	sub	r2,r2,r3
 8002dd8:	003f7506 	br	8002bb0 <__alt_data_end+0xfc002bb0>
 8002ddc:	d9402e17 	ldw	r5,184(sp)
 8002de0:	d9002e17 	ldw	r4,184(sp)
 8002de4:	bc400043 	ldbu	r17,1(r23)
 8002de8:	29400017 	ldw	r5,0(r5)
 8002dec:	20800104 	addi	r2,r4,4
 8002df0:	d8802e15 	stw	r2,184(sp)
 8002df4:	d9402a15 	stw	r5,168(sp)
 8002df8:	182f883a 	mov	r23,r3
 8002dfc:	283df10e 	bge	r5,zero,80025c4 <__alt_data_end+0xfc0025c4>
 8002e00:	8c403fcc 	andi	r17,r17,255
 8002e04:	017fffc4 	movi	r5,-1
 8002e08:	8c40201c 	xori	r17,r17,128
 8002e0c:	d9402a15 	stw	r5,168(sp)
 8002e10:	8c7fe004 	addi	r17,r17,-128
 8002e14:	0037d806 	br	8000d78 <__alt_data_end+0xfc000d78>
 8002e18:	9080004c 	andi	r2,r18,1
 8002e1c:	0039883a 	mov	fp,zero
 8002e20:	10000726 	beq	r2,zero,8002e40 <___svfprintf_internal_r+0x221c>
 8002e24:	d8c02817 	ldw	r3,160(sp)
 8002e28:	dc001dc4 	addi	r16,sp,119
 8002e2c:	00800c04 	movi	r2,48
 8002e30:	1c07c83a 	sub	r3,r3,r16
 8002e34:	d8801dc5 	stb	r2,119(sp)
 8002e38:	d8c02b15 	stw	r3,172(sp)
 8002e3c:	00393106 	br	8001304 <__alt_data_end+0xfc001304>
 8002e40:	d8002b15 	stw	zero,172(sp)
 8002e44:	dc001e04 	addi	r16,sp,120
 8002e48:	00392e06 	br	8001304 <__alt_data_end+0xfc001304>
 8002e4c:	0005883a 	mov	r2,zero
 8002e50:	003e3306 	br	8002720 <__alt_data_end+0xfc002720>
 8002e54:	dd802617 	ldw	r22,152(sp)
 8002e58:	003f0706 	br	8002a78 <__alt_data_end+0xfc002a78>
 8002e5c:	d8c02b03 	ldbu	r3,172(sp)
 8002e60:	d8c02785 	stb	r3,158(sp)
 8002e64:	003a3506 	br	800173c <__alt_data_end+0xfc00173c>
 8002e68:	d8c02b03 	ldbu	r3,172(sp)
 8002e6c:	d8c02785 	stb	r3,158(sp)
 8002e70:	003a1706 	br	80016d0 <__alt_data_end+0xfc0016d0>
 8002e74:	0005883a 	mov	r2,zero
 8002e78:	003f5d06 	br	8002bf0 <__alt_data_end+0xfc002bf0>
 8002e7c:	d8c02b03 	ldbu	r3,172(sp)
 8002e80:	d8c02785 	stb	r3,158(sp)
 8002e84:	0038f306 	br	8001254 <__alt_data_end+0xfc001254>
 8002e88:	d8c02b03 	ldbu	r3,172(sp)
 8002e8c:	d8c02785 	stb	r3,158(sp)
 8002e90:	0038be06 	br	800118c <__alt_data_end+0xfc00118c>
 8002e94:	d8802344 	addi	r2,sp,141
 8002e98:	003f0506 	br	8002ab0 <__alt_data_end+0xfc002ab0>
 8002e9c:	d8c02b03 	ldbu	r3,172(sp)
 8002ea0:	d8c02785 	stb	r3,158(sp)
 8002ea4:	00388b06 	br	80010d4 <__alt_data_end+0xfc0010d4>
 8002ea8:	d8c02b03 	ldbu	r3,172(sp)
 8002eac:	d8c02785 	stb	r3,158(sp)
 8002eb0:	003ad706 	br	8001a10 <__alt_data_end+0xfc001a10>
 8002eb4:	d9403917 	ldw	r5,228(sp)
 8002eb8:	00800304 	movi	r2,12
 8002ebc:	28800015 	stw	r2,0(r5)
 8002ec0:	00bfffc4 	movi	r2,-1
 8002ec4:	00384306 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 8002ec8:	d8c02b03 	ldbu	r3,172(sp)
 8002ecc:	d8c02785 	stb	r3,158(sp)
 8002ed0:	003ab606 	br	80019ac <__alt_data_end+0xfc0019ac>
 8002ed4:	d8c02b03 	ldbu	r3,172(sp)
 8002ed8:	d8c02785 	stb	r3,158(sp)
 8002edc:	003a8906 	br	8001904 <__alt_data_end+0xfc001904>

08002ee0 <quorem>:
 8002ee0:	defff204 	addi	sp,sp,-56
 8002ee4:	ddc00b15 	stw	r23,44(sp)
 8002ee8:	20800417 	ldw	r2,16(r4)
 8002eec:	2dc00417 	ldw	r23,16(r5)
 8002ef0:	dfc00d15 	stw	ra,52(sp)
 8002ef4:	df000c15 	stw	fp,48(sp)
 8002ef8:	dd800a15 	stw	r22,40(sp)
 8002efc:	dd400915 	stw	r21,36(sp)
 8002f00:	dd000815 	stw	r20,32(sp)
 8002f04:	dcc00715 	stw	r19,28(sp)
 8002f08:	dc800615 	stw	r18,24(sp)
 8002f0c:	dc400515 	stw	r17,20(sp)
 8002f10:	dc000415 	stw	r16,16(sp)
 8002f14:	15c07a16 	blt	r2,r23,8003100 <quorem+0x220>
 8002f18:	bdffffc4 	addi	r23,r23,-1
 8002f1c:	bde9883a 	add	r20,r23,r23
 8002f20:	28c00504 	addi	r3,r5,20
 8002f24:	a529883a 	add	r20,r20,r20
 8002f28:	1d39883a 	add	fp,r3,r20
 8002f2c:	24c00504 	addi	r19,r4,20
 8002f30:	d9400215 	stw	r5,8(sp)
 8002f34:	9d29883a 	add	r20,r19,r20
 8002f38:	e1400017 	ldw	r5,0(fp)
 8002f3c:	d9000015 	stw	r4,0(sp)
 8002f40:	a1000017 	ldw	r4,0(r20)
 8002f44:	29400044 	addi	r5,r5,1
 8002f48:	d8c00115 	stw	r3,4(sp)
 8002f4c:	dd000315 	stw	r20,12(sp)
 8002f50:	80009680 	call	8000968 <__udivsi3>
 8002f54:	1025883a 	mov	r18,r2
 8002f58:	10003026 	beq	r2,zero,800301c <quorem+0x13c>
 8002f5c:	dc400117 	ldw	r17,4(sp)
 8002f60:	9829883a 	mov	r20,r19
 8002f64:	002d883a 	mov	r22,zero
 8002f68:	0021883a 	mov	r16,zero
 8002f6c:	8d400017 	ldw	r21,0(r17)
 8002f70:	900b883a 	mov	r5,r18
 8002f74:	8c400104 	addi	r17,r17,4
 8002f78:	a93fffcc 	andi	r4,r21,65535
 8002f7c:	8000a240 	call	8000a24 <__mulsi3>
 8002f80:	a808d43a 	srli	r4,r21,16
 8002f84:	900b883a 	mov	r5,r18
 8002f88:	15ad883a 	add	r22,r2,r22
 8002f8c:	8000a240 	call	8000a24 <__mulsi3>
 8002f90:	a1000017 	ldw	r4,0(r20)
 8002f94:	b00cd43a 	srli	r6,r22,16
 8002f98:	b0ffffcc 	andi	r3,r22,65535
 8002f9c:	217fffcc 	andi	r5,r4,65535
 8002fa0:	2c21883a 	add	r16,r5,r16
 8002fa4:	80c7c83a 	sub	r3,r16,r3
 8002fa8:	2008d43a 	srli	r4,r4,16
 8002fac:	1185883a 	add	r2,r2,r6
 8002fb0:	1821d43a 	srai	r16,r3,16
 8002fb4:	117fffcc 	andi	r5,r2,65535
 8002fb8:	2149c83a 	sub	r4,r4,r5
 8002fbc:	2421883a 	add	r16,r4,r16
 8002fc0:	8008943a 	slli	r4,r16,16
 8002fc4:	18ffffcc 	andi	r3,r3,65535
 8002fc8:	102cd43a 	srli	r22,r2,16
 8002fcc:	20c8b03a 	or	r4,r4,r3
 8002fd0:	a1000015 	stw	r4,0(r20)
 8002fd4:	8021d43a 	srai	r16,r16,16
 8002fd8:	a5000104 	addi	r20,r20,4
 8002fdc:	e47fe32e 	bgeu	fp,r17,8002f6c <__alt_data_end+0xfc002f6c>
 8002fe0:	d8c00317 	ldw	r3,12(sp)
 8002fe4:	18800017 	ldw	r2,0(r3)
 8002fe8:	10000c1e 	bne	r2,zero,800301c <quorem+0x13c>
 8002fec:	18bfff04 	addi	r2,r3,-4
 8002ff0:	9880082e 	bgeu	r19,r2,8003014 <quorem+0x134>
 8002ff4:	18ffff17 	ldw	r3,-4(r3)
 8002ff8:	18000326 	beq	r3,zero,8003008 <quorem+0x128>
 8002ffc:	00000506 	br	8003014 <quorem+0x134>
 8003000:	10c00017 	ldw	r3,0(r2)
 8003004:	1800031e 	bne	r3,zero,8003014 <quorem+0x134>
 8003008:	10bfff04 	addi	r2,r2,-4
 800300c:	bdffffc4 	addi	r23,r23,-1
 8003010:	98bffb36 	bltu	r19,r2,8003000 <__alt_data_end+0xfc003000>
 8003014:	d8c00017 	ldw	r3,0(sp)
 8003018:	1dc00415 	stw	r23,16(r3)
 800301c:	d9400217 	ldw	r5,8(sp)
 8003020:	d9000017 	ldw	r4,0(sp)
 8003024:	8005c280 	call	8005c28 <__mcmp>
 8003028:	10002816 	blt	r2,zero,80030cc <quorem+0x1ec>
 800302c:	dc400117 	ldw	r17,4(sp)
 8003030:	94800044 	addi	r18,r18,1
 8003034:	980d883a 	mov	r6,r19
 8003038:	0007883a 	mov	r3,zero
 800303c:	31000017 	ldw	r4,0(r6)
 8003040:	89400017 	ldw	r5,0(r17)
 8003044:	31800104 	addi	r6,r6,4
 8003048:	20bfffcc 	andi	r2,r4,65535
 800304c:	10c7883a 	add	r3,r2,r3
 8003050:	28bfffcc 	andi	r2,r5,65535
 8003054:	1885c83a 	sub	r2,r3,r2
 8003058:	280ad43a 	srli	r5,r5,16
 800305c:	2008d43a 	srli	r4,r4,16
 8003060:	1007d43a 	srai	r3,r2,16
 8003064:	10bfffcc 	andi	r2,r2,65535
 8003068:	2149c83a 	sub	r4,r4,r5
 800306c:	20c9883a 	add	r4,r4,r3
 8003070:	200a943a 	slli	r5,r4,16
 8003074:	8c400104 	addi	r17,r17,4
 8003078:	2007d43a 	srai	r3,r4,16
 800307c:	2884b03a 	or	r2,r5,r2
 8003080:	30bfff15 	stw	r2,-4(r6)
 8003084:	e47fed2e 	bgeu	fp,r17,800303c <__alt_data_end+0xfc00303c>
 8003088:	bdc5883a 	add	r2,r23,r23
 800308c:	1085883a 	add	r2,r2,r2
 8003090:	9887883a 	add	r3,r19,r2
 8003094:	18800017 	ldw	r2,0(r3)
 8003098:	10000c1e 	bne	r2,zero,80030cc <quorem+0x1ec>
 800309c:	18bfff04 	addi	r2,r3,-4
 80030a0:	9880082e 	bgeu	r19,r2,80030c4 <quorem+0x1e4>
 80030a4:	18ffff17 	ldw	r3,-4(r3)
 80030a8:	18000326 	beq	r3,zero,80030b8 <quorem+0x1d8>
 80030ac:	00000506 	br	80030c4 <quorem+0x1e4>
 80030b0:	10c00017 	ldw	r3,0(r2)
 80030b4:	1800031e 	bne	r3,zero,80030c4 <quorem+0x1e4>
 80030b8:	10bfff04 	addi	r2,r2,-4
 80030bc:	bdffffc4 	addi	r23,r23,-1
 80030c0:	98bffb36 	bltu	r19,r2,80030b0 <__alt_data_end+0xfc0030b0>
 80030c4:	d8c00017 	ldw	r3,0(sp)
 80030c8:	1dc00415 	stw	r23,16(r3)
 80030cc:	9005883a 	mov	r2,r18
 80030d0:	dfc00d17 	ldw	ra,52(sp)
 80030d4:	df000c17 	ldw	fp,48(sp)
 80030d8:	ddc00b17 	ldw	r23,44(sp)
 80030dc:	dd800a17 	ldw	r22,40(sp)
 80030e0:	dd400917 	ldw	r21,36(sp)
 80030e4:	dd000817 	ldw	r20,32(sp)
 80030e8:	dcc00717 	ldw	r19,28(sp)
 80030ec:	dc800617 	ldw	r18,24(sp)
 80030f0:	dc400517 	ldw	r17,20(sp)
 80030f4:	dc000417 	ldw	r16,16(sp)
 80030f8:	dec00e04 	addi	sp,sp,56
 80030fc:	f800283a 	ret
 8003100:	0005883a 	mov	r2,zero
 8003104:	003ff206 	br	80030d0 <__alt_data_end+0xfc0030d0>

08003108 <_dtoa_r>:
 8003108:	20801017 	ldw	r2,64(r4)
 800310c:	deffde04 	addi	sp,sp,-136
 8003110:	df002015 	stw	fp,128(sp)
 8003114:	dcc01b15 	stw	r19,108(sp)
 8003118:	dc801a15 	stw	r18,104(sp)
 800311c:	dc401915 	stw	r17,100(sp)
 8003120:	dc001815 	stw	r16,96(sp)
 8003124:	dfc02115 	stw	ra,132(sp)
 8003128:	ddc01f15 	stw	r23,124(sp)
 800312c:	dd801e15 	stw	r22,120(sp)
 8003130:	dd401d15 	stw	r21,116(sp)
 8003134:	dd001c15 	stw	r20,112(sp)
 8003138:	d9c00315 	stw	r7,12(sp)
 800313c:	2039883a 	mov	fp,r4
 8003140:	3023883a 	mov	r17,r6
 8003144:	2825883a 	mov	r18,r5
 8003148:	dc002417 	ldw	r16,144(sp)
 800314c:	3027883a 	mov	r19,r6
 8003150:	10000826 	beq	r2,zero,8003174 <_dtoa_r+0x6c>
 8003154:	21801117 	ldw	r6,68(r4)
 8003158:	00c00044 	movi	r3,1
 800315c:	100b883a 	mov	r5,r2
 8003160:	1986983a 	sll	r3,r3,r6
 8003164:	11800115 	stw	r6,4(r2)
 8003168:	10c00215 	stw	r3,8(r2)
 800316c:	800534c0 	call	800534c <_Bfree>
 8003170:	e0001015 	stw	zero,64(fp)
 8003174:	88002e16 	blt	r17,zero,8003230 <_dtoa_r+0x128>
 8003178:	80000015 	stw	zero,0(r16)
 800317c:	889ffc2c 	andhi	r2,r17,32752
 8003180:	00dffc34 	movhi	r3,32752
 8003184:	10c01c26 	beq	r2,r3,80031f8 <_dtoa_r+0xf0>
 8003188:	000d883a 	mov	r6,zero
 800318c:	000f883a 	mov	r7,zero
 8003190:	9009883a 	mov	r4,r18
 8003194:	980b883a 	mov	r5,r19
 8003198:	800a6b00 	call	800a6b0 <__eqdf2>
 800319c:	10002b1e 	bne	r2,zero,800324c <_dtoa_r+0x144>
 80031a0:	d9c02317 	ldw	r7,140(sp)
 80031a4:	00800044 	movi	r2,1
 80031a8:	38800015 	stw	r2,0(r7)
 80031ac:	d8802517 	ldw	r2,148(sp)
 80031b0:	10019e26 	beq	r2,zero,800382c <_dtoa_r+0x724>
 80031b4:	d8c02517 	ldw	r3,148(sp)
 80031b8:	00820074 	movhi	r2,2049
 80031bc:	10b84a44 	addi	r2,r2,-7895
 80031c0:	18800015 	stw	r2,0(r3)
 80031c4:	10bfffc4 	addi	r2,r2,-1
 80031c8:	dfc02117 	ldw	ra,132(sp)
 80031cc:	df002017 	ldw	fp,128(sp)
 80031d0:	ddc01f17 	ldw	r23,124(sp)
 80031d4:	dd801e17 	ldw	r22,120(sp)
 80031d8:	dd401d17 	ldw	r21,116(sp)
 80031dc:	dd001c17 	ldw	r20,112(sp)
 80031e0:	dcc01b17 	ldw	r19,108(sp)
 80031e4:	dc801a17 	ldw	r18,104(sp)
 80031e8:	dc401917 	ldw	r17,100(sp)
 80031ec:	dc001817 	ldw	r16,96(sp)
 80031f0:	dec02204 	addi	sp,sp,136
 80031f4:	f800283a 	ret
 80031f8:	d8c02317 	ldw	r3,140(sp)
 80031fc:	0089c3c4 	movi	r2,9999
 8003200:	18800015 	stw	r2,0(r3)
 8003204:	90017726 	beq	r18,zero,80037e4 <_dtoa_r+0x6dc>
 8003208:	00820074 	movhi	r2,2049
 800320c:	10b85604 	addi	r2,r2,-7848
 8003210:	d9002517 	ldw	r4,148(sp)
 8003214:	203fec26 	beq	r4,zero,80031c8 <__alt_data_end+0xfc0031c8>
 8003218:	10c000c7 	ldb	r3,3(r2)
 800321c:	1801781e 	bne	r3,zero,8003800 <_dtoa_r+0x6f8>
 8003220:	10c000c4 	addi	r3,r2,3
 8003224:	d9802517 	ldw	r6,148(sp)
 8003228:	30c00015 	stw	r3,0(r6)
 800322c:	003fe606 	br	80031c8 <__alt_data_end+0xfc0031c8>
 8003230:	04e00034 	movhi	r19,32768
 8003234:	9cffffc4 	addi	r19,r19,-1
 8003238:	00800044 	movi	r2,1
 800323c:	8ce6703a 	and	r19,r17,r19
 8003240:	80800015 	stw	r2,0(r16)
 8003244:	9823883a 	mov	r17,r19
 8003248:	003fcc06 	br	800317c <__alt_data_end+0xfc00317c>
 800324c:	d8800204 	addi	r2,sp,8
 8003250:	d8800015 	stw	r2,0(sp)
 8003254:	d9c00104 	addi	r7,sp,4
 8003258:	900b883a 	mov	r5,r18
 800325c:	980d883a 	mov	r6,r19
 8003260:	e009883a 	mov	r4,fp
 8003264:	8820d53a 	srli	r16,r17,20
 8003268:	8005ff40 	call	8005ff4 <__d2b>
 800326c:	d8800915 	stw	r2,36(sp)
 8003270:	8001651e 	bne	r16,zero,8003808 <_dtoa_r+0x700>
 8003274:	dd800217 	ldw	r22,8(sp)
 8003278:	dc000117 	ldw	r16,4(sp)
 800327c:	00800804 	movi	r2,32
 8003280:	b421883a 	add	r16,r22,r16
 8003284:	80c10c84 	addi	r3,r16,1074
 8003288:	10c2d10e 	bge	r2,r3,8003dd0 <_dtoa_r+0xcc8>
 800328c:	00801004 	movi	r2,64
 8003290:	81010484 	addi	r4,r16,1042
 8003294:	10c7c83a 	sub	r3,r2,r3
 8003298:	9108d83a 	srl	r4,r18,r4
 800329c:	88e2983a 	sll	r17,r17,r3
 80032a0:	2448b03a 	or	r4,r4,r17
 80032a4:	800bbcc0 	call	800bbcc <__floatunsidf>
 80032a8:	017f8434 	movhi	r5,65040
 80032ac:	01800044 	movi	r6,1
 80032b0:	1009883a 	mov	r4,r2
 80032b4:	194b883a 	add	r5,r3,r5
 80032b8:	843fffc4 	addi	r16,r16,-1
 80032bc:	d9801115 	stw	r6,68(sp)
 80032c0:	000d883a 	mov	r6,zero
 80032c4:	01cffe34 	movhi	r7,16376
 80032c8:	800b1740 	call	800b174 <__subdf3>
 80032cc:	0198dbf4 	movhi	r6,25455
 80032d0:	01cff4f4 	movhi	r7,16339
 80032d4:	3190d844 	addi	r6,r6,17249
 80032d8:	39e1e9c4 	addi	r7,r7,-30809
 80032dc:	1009883a 	mov	r4,r2
 80032e0:	180b883a 	mov	r5,r3
 80032e4:	800a9080 	call	800a908 <__muldf3>
 80032e8:	01a2d874 	movhi	r6,35681
 80032ec:	01cff1f4 	movhi	r7,16327
 80032f0:	31b22cc4 	addi	r6,r6,-14157
 80032f4:	39e28a04 	addi	r7,r7,-30168
 80032f8:	180b883a 	mov	r5,r3
 80032fc:	1009883a 	mov	r4,r2
 8003300:	80094340 	call	8009434 <__adddf3>
 8003304:	8009883a 	mov	r4,r16
 8003308:	1029883a 	mov	r20,r2
 800330c:	1823883a 	mov	r17,r3
 8003310:	800baf00 	call	800baf0 <__floatsidf>
 8003314:	019427f4 	movhi	r6,20639
 8003318:	01cff4f4 	movhi	r7,16339
 800331c:	319e7ec4 	addi	r6,r6,31227
 8003320:	39d104c4 	addi	r7,r7,17427
 8003324:	1009883a 	mov	r4,r2
 8003328:	180b883a 	mov	r5,r3
 800332c:	800a9080 	call	800a908 <__muldf3>
 8003330:	100d883a 	mov	r6,r2
 8003334:	180f883a 	mov	r7,r3
 8003338:	a009883a 	mov	r4,r20
 800333c:	880b883a 	mov	r5,r17
 8003340:	80094340 	call	8009434 <__adddf3>
 8003344:	1009883a 	mov	r4,r2
 8003348:	180b883a 	mov	r5,r3
 800334c:	1029883a 	mov	r20,r2
 8003350:	1823883a 	mov	r17,r3
 8003354:	800ba700 	call	800ba70 <__fixdfsi>
 8003358:	000d883a 	mov	r6,zero
 800335c:	000f883a 	mov	r7,zero
 8003360:	a009883a 	mov	r4,r20
 8003364:	880b883a 	mov	r5,r17
 8003368:	d8800515 	stw	r2,20(sp)
 800336c:	800a8140 	call	800a814 <__ledf2>
 8003370:	10028716 	blt	r2,zero,8003d90 <_dtoa_r+0xc88>
 8003374:	d8c00517 	ldw	r3,20(sp)
 8003378:	00800584 	movi	r2,22
 800337c:	10c27536 	bltu	r2,r3,8003d54 <_dtoa_r+0xc4c>
 8003380:	180490fa 	slli	r2,r3,3
 8003384:	00c20074 	movhi	r3,2049
 8003388:	18f87204 	addi	r3,r3,-7736
 800338c:	1885883a 	add	r2,r3,r2
 8003390:	11000017 	ldw	r4,0(r2)
 8003394:	11400117 	ldw	r5,4(r2)
 8003398:	900d883a 	mov	r6,r18
 800339c:	980f883a 	mov	r7,r19
 80033a0:	800a7380 	call	800a738 <__gedf2>
 80033a4:	00828d0e 	bge	zero,r2,8003ddc <_dtoa_r+0xcd4>
 80033a8:	d9000517 	ldw	r4,20(sp)
 80033ac:	d8000e15 	stw	zero,56(sp)
 80033b0:	213fffc4 	addi	r4,r4,-1
 80033b4:	d9000515 	stw	r4,20(sp)
 80033b8:	b42dc83a 	sub	r22,r22,r16
 80033bc:	b5bfffc4 	addi	r22,r22,-1
 80033c0:	b0026f16 	blt	r22,zero,8003d80 <_dtoa_r+0xc78>
 80033c4:	d8000815 	stw	zero,32(sp)
 80033c8:	d9c00517 	ldw	r7,20(sp)
 80033cc:	38026416 	blt	r7,zero,8003d60 <_dtoa_r+0xc58>
 80033d0:	b1ed883a 	add	r22,r22,r7
 80033d4:	d9c00d15 	stw	r7,52(sp)
 80033d8:	d8000a15 	stw	zero,40(sp)
 80033dc:	d9800317 	ldw	r6,12(sp)
 80033e0:	00800244 	movi	r2,9
 80033e4:	11811436 	bltu	r2,r6,8003838 <_dtoa_r+0x730>
 80033e8:	00800144 	movi	r2,5
 80033ec:	1184e10e 	bge	r2,r6,8004774 <_dtoa_r+0x166c>
 80033f0:	31bfff04 	addi	r6,r6,-4
 80033f4:	d9800315 	stw	r6,12(sp)
 80033f8:	0023883a 	mov	r17,zero
 80033fc:	d9800317 	ldw	r6,12(sp)
 8003400:	008000c4 	movi	r2,3
 8003404:	30836726 	beq	r6,r2,80041a4 <_dtoa_r+0x109c>
 8003408:	1183410e 	bge	r2,r6,8004110 <_dtoa_r+0x1008>
 800340c:	d9c00317 	ldw	r7,12(sp)
 8003410:	00800104 	movi	r2,4
 8003414:	38827c26 	beq	r7,r2,8003e08 <_dtoa_r+0xd00>
 8003418:	00800144 	movi	r2,5
 800341c:	3884c41e 	bne	r7,r2,8004730 <_dtoa_r+0x1628>
 8003420:	00800044 	movi	r2,1
 8003424:	d8800b15 	stw	r2,44(sp)
 8003428:	d8c00517 	ldw	r3,20(sp)
 800342c:	d9002217 	ldw	r4,136(sp)
 8003430:	1907883a 	add	r3,r3,r4
 8003434:	19800044 	addi	r6,r3,1
 8003438:	d8c00c15 	stw	r3,48(sp)
 800343c:	d9800615 	stw	r6,24(sp)
 8003440:	0183a40e 	bge	zero,r6,80042d4 <_dtoa_r+0x11cc>
 8003444:	d9800617 	ldw	r6,24(sp)
 8003448:	3021883a 	mov	r16,r6
 800344c:	e0001115 	stw	zero,68(fp)
 8003450:	008005c4 	movi	r2,23
 8003454:	1184c92e 	bgeu	r2,r6,800477c <_dtoa_r+0x1674>
 8003458:	00c00044 	movi	r3,1
 800345c:	00800104 	movi	r2,4
 8003460:	1085883a 	add	r2,r2,r2
 8003464:	11000504 	addi	r4,r2,20
 8003468:	180b883a 	mov	r5,r3
 800346c:	18c00044 	addi	r3,r3,1
 8003470:	313ffb2e 	bgeu	r6,r4,8003460 <__alt_data_end+0xfc003460>
 8003474:	e1401115 	stw	r5,68(fp)
 8003478:	e009883a 	mov	r4,fp
 800347c:	80052a40 	call	80052a4 <_Balloc>
 8003480:	d8800715 	stw	r2,28(sp)
 8003484:	e0801015 	stw	r2,64(fp)
 8003488:	00800384 	movi	r2,14
 800348c:	1400f736 	bltu	r2,r16,800386c <_dtoa_r+0x764>
 8003490:	8800f626 	beq	r17,zero,800386c <_dtoa_r+0x764>
 8003494:	d9c00517 	ldw	r7,20(sp)
 8003498:	01c39a0e 	bge	zero,r7,8004304 <_dtoa_r+0x11fc>
 800349c:	388003cc 	andi	r2,r7,15
 80034a0:	100490fa 	slli	r2,r2,3
 80034a4:	382bd13a 	srai	r21,r7,4
 80034a8:	00c20074 	movhi	r3,2049
 80034ac:	18f87204 	addi	r3,r3,-7736
 80034b0:	1885883a 	add	r2,r3,r2
 80034b4:	a8c0040c 	andi	r3,r21,16
 80034b8:	12400017 	ldw	r9,0(r2)
 80034bc:	12000117 	ldw	r8,4(r2)
 80034c0:	18037926 	beq	r3,zero,80042a8 <_dtoa_r+0x11a0>
 80034c4:	00820074 	movhi	r2,2049
 80034c8:	10b86804 	addi	r2,r2,-7776
 80034cc:	11800817 	ldw	r6,32(r2)
 80034d0:	11c00917 	ldw	r7,36(r2)
 80034d4:	9009883a 	mov	r4,r18
 80034d8:	980b883a 	mov	r5,r19
 80034dc:	da001715 	stw	r8,92(sp)
 80034e0:	da401615 	stw	r9,88(sp)
 80034e4:	8009ce00 	call	8009ce0 <__divdf3>
 80034e8:	da001717 	ldw	r8,92(sp)
 80034ec:	da401617 	ldw	r9,88(sp)
 80034f0:	ad4003cc 	andi	r21,r21,15
 80034f4:	040000c4 	movi	r16,3
 80034f8:	1023883a 	mov	r17,r2
 80034fc:	1829883a 	mov	r20,r3
 8003500:	a8001126 	beq	r21,zero,8003548 <_dtoa_r+0x440>
 8003504:	05c20074 	movhi	r23,2049
 8003508:	bdf86804 	addi	r23,r23,-7776
 800350c:	4805883a 	mov	r2,r9
 8003510:	4007883a 	mov	r3,r8
 8003514:	a980004c 	andi	r6,r21,1
 8003518:	1009883a 	mov	r4,r2
 800351c:	a82bd07a 	srai	r21,r21,1
 8003520:	180b883a 	mov	r5,r3
 8003524:	30000426 	beq	r6,zero,8003538 <_dtoa_r+0x430>
 8003528:	b9800017 	ldw	r6,0(r23)
 800352c:	b9c00117 	ldw	r7,4(r23)
 8003530:	84000044 	addi	r16,r16,1
 8003534:	800a9080 	call	800a908 <__muldf3>
 8003538:	bdc00204 	addi	r23,r23,8
 800353c:	a83ff51e 	bne	r21,zero,8003514 <__alt_data_end+0xfc003514>
 8003540:	1013883a 	mov	r9,r2
 8003544:	1811883a 	mov	r8,r3
 8003548:	480d883a 	mov	r6,r9
 800354c:	400f883a 	mov	r7,r8
 8003550:	8809883a 	mov	r4,r17
 8003554:	a00b883a 	mov	r5,r20
 8003558:	8009ce00 	call	8009ce0 <__divdf3>
 800355c:	d8800f15 	stw	r2,60(sp)
 8003560:	d8c01015 	stw	r3,64(sp)
 8003564:	d8c00e17 	ldw	r3,56(sp)
 8003568:	18000626 	beq	r3,zero,8003584 <_dtoa_r+0x47c>
 800356c:	d9000f17 	ldw	r4,60(sp)
 8003570:	d9401017 	ldw	r5,64(sp)
 8003574:	000d883a 	mov	r6,zero
 8003578:	01cffc34 	movhi	r7,16368
 800357c:	800a8140 	call	800a814 <__ledf2>
 8003580:	10040b16 	blt	r2,zero,80045b0 <_dtoa_r+0x14a8>
 8003584:	8009883a 	mov	r4,r16
 8003588:	800baf00 	call	800baf0 <__floatsidf>
 800358c:	d9800f17 	ldw	r6,60(sp)
 8003590:	d9c01017 	ldw	r7,64(sp)
 8003594:	1009883a 	mov	r4,r2
 8003598:	180b883a 	mov	r5,r3
 800359c:	800a9080 	call	800a908 <__muldf3>
 80035a0:	000d883a 	mov	r6,zero
 80035a4:	01d00734 	movhi	r7,16412
 80035a8:	1009883a 	mov	r4,r2
 80035ac:	180b883a 	mov	r5,r3
 80035b0:	80094340 	call	8009434 <__adddf3>
 80035b4:	1021883a 	mov	r16,r2
 80035b8:	d8800617 	ldw	r2,24(sp)
 80035bc:	047f3034 	movhi	r17,64704
 80035c0:	1c63883a 	add	r17,r3,r17
 80035c4:	10031826 	beq	r2,zero,8004228 <_dtoa_r+0x1120>
 80035c8:	d8c00517 	ldw	r3,20(sp)
 80035cc:	db000617 	ldw	r12,24(sp)
 80035d0:	d8c01315 	stw	r3,76(sp)
 80035d4:	d9000b17 	ldw	r4,44(sp)
 80035d8:	20038f26 	beq	r4,zero,8004418 <_dtoa_r+0x1310>
 80035dc:	60bfffc4 	addi	r2,r12,-1
 80035e0:	100490fa 	slli	r2,r2,3
 80035e4:	00c20074 	movhi	r3,2049
 80035e8:	18f87204 	addi	r3,r3,-7736
 80035ec:	1885883a 	add	r2,r3,r2
 80035f0:	11800017 	ldw	r6,0(r2)
 80035f4:	11c00117 	ldw	r7,4(r2)
 80035f8:	d8800717 	ldw	r2,28(sp)
 80035fc:	0009883a 	mov	r4,zero
 8003600:	014ff834 	movhi	r5,16352
 8003604:	db001615 	stw	r12,88(sp)
 8003608:	15c00044 	addi	r23,r2,1
 800360c:	8009ce00 	call	8009ce0 <__divdf3>
 8003610:	800d883a 	mov	r6,r16
 8003614:	880f883a 	mov	r7,r17
 8003618:	1009883a 	mov	r4,r2
 800361c:	180b883a 	mov	r5,r3
 8003620:	800b1740 	call	800b174 <__subdf3>
 8003624:	d9401017 	ldw	r5,64(sp)
 8003628:	d9000f17 	ldw	r4,60(sp)
 800362c:	102b883a 	mov	r21,r2
 8003630:	d8c01215 	stw	r3,72(sp)
 8003634:	800ba700 	call	800ba70 <__fixdfsi>
 8003638:	1009883a 	mov	r4,r2
 800363c:	1029883a 	mov	r20,r2
 8003640:	800baf00 	call	800baf0 <__floatsidf>
 8003644:	d9000f17 	ldw	r4,60(sp)
 8003648:	d9401017 	ldw	r5,64(sp)
 800364c:	100d883a 	mov	r6,r2
 8003650:	180f883a 	mov	r7,r3
 8003654:	800b1740 	call	800b174 <__subdf3>
 8003658:	1823883a 	mov	r17,r3
 800365c:	d8c00717 	ldw	r3,28(sp)
 8003660:	d9401217 	ldw	r5,72(sp)
 8003664:	a2000c04 	addi	r8,r20,48
 8003668:	1021883a 	mov	r16,r2
 800366c:	1a000005 	stb	r8,0(r3)
 8003670:	800d883a 	mov	r6,r16
 8003674:	880f883a 	mov	r7,r17
 8003678:	a809883a 	mov	r4,r21
 800367c:	4029883a 	mov	r20,r8
 8003680:	800a7380 	call	800a738 <__gedf2>
 8003684:	00841d16 	blt	zero,r2,80046fc <_dtoa_r+0x15f4>
 8003688:	800d883a 	mov	r6,r16
 800368c:	880f883a 	mov	r7,r17
 8003690:	0009883a 	mov	r4,zero
 8003694:	014ffc34 	movhi	r5,16368
 8003698:	800b1740 	call	800b174 <__subdf3>
 800369c:	d9401217 	ldw	r5,72(sp)
 80036a0:	100d883a 	mov	r6,r2
 80036a4:	180f883a 	mov	r7,r3
 80036a8:	a809883a 	mov	r4,r21
 80036ac:	800a7380 	call	800a738 <__gedf2>
 80036b0:	db001617 	ldw	r12,88(sp)
 80036b4:	00840e16 	blt	zero,r2,80046f0 <_dtoa_r+0x15e8>
 80036b8:	00800044 	movi	r2,1
 80036bc:	13006b0e 	bge	r2,r12,800386c <_dtoa_r+0x764>
 80036c0:	d9000717 	ldw	r4,28(sp)
 80036c4:	dd800f15 	stw	r22,60(sp)
 80036c8:	dcc01015 	stw	r19,64(sp)
 80036cc:	2319883a 	add	r12,r4,r12
 80036d0:	dcc01217 	ldw	r19,72(sp)
 80036d4:	602d883a 	mov	r22,r12
 80036d8:	dc801215 	stw	r18,72(sp)
 80036dc:	b825883a 	mov	r18,r23
 80036e0:	00000906 	br	8003708 <_dtoa_r+0x600>
 80036e4:	800b1740 	call	800b174 <__subdf3>
 80036e8:	a80d883a 	mov	r6,r21
 80036ec:	980f883a 	mov	r7,r19
 80036f0:	1009883a 	mov	r4,r2
 80036f4:	180b883a 	mov	r5,r3
 80036f8:	800a8140 	call	800a814 <__ledf2>
 80036fc:	1003e816 	blt	r2,zero,80046a0 <_dtoa_r+0x1598>
 8003700:	b825883a 	mov	r18,r23
 8003704:	bd83e926 	beq	r23,r22,80046ac <_dtoa_r+0x15a4>
 8003708:	a809883a 	mov	r4,r21
 800370c:	980b883a 	mov	r5,r19
 8003710:	000d883a 	mov	r6,zero
 8003714:	01d00934 	movhi	r7,16420
 8003718:	800a9080 	call	800a908 <__muldf3>
 800371c:	000d883a 	mov	r6,zero
 8003720:	01d00934 	movhi	r7,16420
 8003724:	8009883a 	mov	r4,r16
 8003728:	880b883a 	mov	r5,r17
 800372c:	102b883a 	mov	r21,r2
 8003730:	1827883a 	mov	r19,r3
 8003734:	800a9080 	call	800a908 <__muldf3>
 8003738:	180b883a 	mov	r5,r3
 800373c:	1009883a 	mov	r4,r2
 8003740:	1821883a 	mov	r16,r3
 8003744:	1023883a 	mov	r17,r2
 8003748:	800ba700 	call	800ba70 <__fixdfsi>
 800374c:	1009883a 	mov	r4,r2
 8003750:	1029883a 	mov	r20,r2
 8003754:	800baf00 	call	800baf0 <__floatsidf>
 8003758:	8809883a 	mov	r4,r17
 800375c:	800b883a 	mov	r5,r16
 8003760:	100d883a 	mov	r6,r2
 8003764:	180f883a 	mov	r7,r3
 8003768:	800b1740 	call	800b174 <__subdf3>
 800376c:	a5000c04 	addi	r20,r20,48
 8003770:	a80d883a 	mov	r6,r21
 8003774:	980f883a 	mov	r7,r19
 8003778:	1009883a 	mov	r4,r2
 800377c:	180b883a 	mov	r5,r3
 8003780:	95000005 	stb	r20,0(r18)
 8003784:	1021883a 	mov	r16,r2
 8003788:	1823883a 	mov	r17,r3
 800378c:	800a8140 	call	800a814 <__ledf2>
 8003790:	bdc00044 	addi	r23,r23,1
 8003794:	800d883a 	mov	r6,r16
 8003798:	880f883a 	mov	r7,r17
 800379c:	0009883a 	mov	r4,zero
 80037a0:	014ffc34 	movhi	r5,16368
 80037a4:	103fcf0e 	bge	r2,zero,80036e4 <__alt_data_end+0xfc0036e4>
 80037a8:	d8c01317 	ldw	r3,76(sp)
 80037ac:	d8c00515 	stw	r3,20(sp)
 80037b0:	d9400917 	ldw	r5,36(sp)
 80037b4:	e009883a 	mov	r4,fp
 80037b8:	800534c0 	call	800534c <_Bfree>
 80037bc:	d9000517 	ldw	r4,20(sp)
 80037c0:	d9802317 	ldw	r6,140(sp)
 80037c4:	d9c02517 	ldw	r7,148(sp)
 80037c8:	b8000005 	stb	zero,0(r23)
 80037cc:	20800044 	addi	r2,r4,1
 80037d0:	30800015 	stw	r2,0(r6)
 80037d4:	3802aa26 	beq	r7,zero,8004280 <_dtoa_r+0x1178>
 80037d8:	3dc00015 	stw	r23,0(r7)
 80037dc:	d8800717 	ldw	r2,28(sp)
 80037e0:	003e7906 	br	80031c8 <__alt_data_end+0xfc0031c8>
 80037e4:	00800434 	movhi	r2,16
 80037e8:	10bfffc4 	addi	r2,r2,-1
 80037ec:	88a2703a 	and	r17,r17,r2
 80037f0:	883e851e 	bne	r17,zero,8003208 <__alt_data_end+0xfc003208>
 80037f4:	00820074 	movhi	r2,2049
 80037f8:	10b85304 	addi	r2,r2,-7860
 80037fc:	003e8406 	br	8003210 <__alt_data_end+0xfc003210>
 8003800:	10c00204 	addi	r3,r2,8
 8003804:	003e8706 	br	8003224 <__alt_data_end+0xfc003224>
 8003808:	01400434 	movhi	r5,16
 800380c:	297fffc4 	addi	r5,r5,-1
 8003810:	994a703a 	and	r5,r19,r5
 8003814:	9009883a 	mov	r4,r18
 8003818:	843f0044 	addi	r16,r16,-1023
 800381c:	294ffc34 	orhi	r5,r5,16368
 8003820:	dd800217 	ldw	r22,8(sp)
 8003824:	d8001115 	stw	zero,68(sp)
 8003828:	003ea506 	br	80032c0 <__alt_data_end+0xfc0032c0>
 800382c:	00820074 	movhi	r2,2049
 8003830:	10b84a04 	addi	r2,r2,-7896
 8003834:	003e6406 	br	80031c8 <__alt_data_end+0xfc0031c8>
 8003838:	e0001115 	stw	zero,68(fp)
 800383c:	000b883a 	mov	r5,zero
 8003840:	e009883a 	mov	r4,fp
 8003844:	80052a40 	call	80052a4 <_Balloc>
 8003848:	01bfffc4 	movi	r6,-1
 800384c:	01c00044 	movi	r7,1
 8003850:	d8800715 	stw	r2,28(sp)
 8003854:	d9800c15 	stw	r6,48(sp)
 8003858:	e0801015 	stw	r2,64(fp)
 800385c:	d8000315 	stw	zero,12(sp)
 8003860:	d9c00b15 	stw	r7,44(sp)
 8003864:	d9800615 	stw	r6,24(sp)
 8003868:	d8002215 	stw	zero,136(sp)
 800386c:	d8800117 	ldw	r2,4(sp)
 8003870:	10008916 	blt	r2,zero,8003a98 <_dtoa_r+0x990>
 8003874:	d9000517 	ldw	r4,20(sp)
 8003878:	00c00384 	movi	r3,14
 800387c:	19008616 	blt	r3,r4,8003a98 <_dtoa_r+0x990>
 8003880:	200490fa 	slli	r2,r4,3
 8003884:	00c20074 	movhi	r3,2049
 8003888:	d9802217 	ldw	r6,136(sp)
 800388c:	18f87204 	addi	r3,r3,-7736
 8003890:	1885883a 	add	r2,r3,r2
 8003894:	14000017 	ldw	r16,0(r2)
 8003898:	14400117 	ldw	r17,4(r2)
 800389c:	30016316 	blt	r6,zero,8003e2c <_dtoa_r+0xd24>
 80038a0:	800d883a 	mov	r6,r16
 80038a4:	880f883a 	mov	r7,r17
 80038a8:	9009883a 	mov	r4,r18
 80038ac:	980b883a 	mov	r5,r19
 80038b0:	8009ce00 	call	8009ce0 <__divdf3>
 80038b4:	180b883a 	mov	r5,r3
 80038b8:	1009883a 	mov	r4,r2
 80038bc:	800ba700 	call	800ba70 <__fixdfsi>
 80038c0:	1009883a 	mov	r4,r2
 80038c4:	102b883a 	mov	r21,r2
 80038c8:	800baf00 	call	800baf0 <__floatsidf>
 80038cc:	800d883a 	mov	r6,r16
 80038d0:	880f883a 	mov	r7,r17
 80038d4:	1009883a 	mov	r4,r2
 80038d8:	180b883a 	mov	r5,r3
 80038dc:	800a9080 	call	800a908 <__muldf3>
 80038e0:	100d883a 	mov	r6,r2
 80038e4:	180f883a 	mov	r7,r3
 80038e8:	9009883a 	mov	r4,r18
 80038ec:	980b883a 	mov	r5,r19
 80038f0:	800b1740 	call	800b174 <__subdf3>
 80038f4:	d9c00717 	ldw	r7,28(sp)
 80038f8:	1009883a 	mov	r4,r2
 80038fc:	a8800c04 	addi	r2,r21,48
 8003900:	38800005 	stb	r2,0(r7)
 8003904:	3dc00044 	addi	r23,r7,1
 8003908:	d9c00617 	ldw	r7,24(sp)
 800390c:	01800044 	movi	r6,1
 8003910:	180b883a 	mov	r5,r3
 8003914:	2005883a 	mov	r2,r4
 8003918:	39803826 	beq	r7,r6,80039fc <_dtoa_r+0x8f4>
 800391c:	000d883a 	mov	r6,zero
 8003920:	01d00934 	movhi	r7,16420
 8003924:	800a9080 	call	800a908 <__muldf3>
 8003928:	000d883a 	mov	r6,zero
 800392c:	000f883a 	mov	r7,zero
 8003930:	1009883a 	mov	r4,r2
 8003934:	180b883a 	mov	r5,r3
 8003938:	1025883a 	mov	r18,r2
 800393c:	1827883a 	mov	r19,r3
 8003940:	800a6b00 	call	800a6b0 <__eqdf2>
 8003944:	103f9a26 	beq	r2,zero,80037b0 <__alt_data_end+0xfc0037b0>
 8003948:	d9c00617 	ldw	r7,24(sp)
 800394c:	d8c00717 	ldw	r3,28(sp)
 8003950:	b829883a 	mov	r20,r23
 8003954:	38bfffc4 	addi	r2,r7,-1
 8003958:	18ad883a 	add	r22,r3,r2
 800395c:	00000a06 	br	8003988 <_dtoa_r+0x880>
 8003960:	800a9080 	call	800a908 <__muldf3>
 8003964:	000d883a 	mov	r6,zero
 8003968:	000f883a 	mov	r7,zero
 800396c:	1009883a 	mov	r4,r2
 8003970:	180b883a 	mov	r5,r3
 8003974:	1025883a 	mov	r18,r2
 8003978:	1827883a 	mov	r19,r3
 800397c:	b829883a 	mov	r20,r23
 8003980:	800a6b00 	call	800a6b0 <__eqdf2>
 8003984:	103f8a26 	beq	r2,zero,80037b0 <__alt_data_end+0xfc0037b0>
 8003988:	800d883a 	mov	r6,r16
 800398c:	880f883a 	mov	r7,r17
 8003990:	9009883a 	mov	r4,r18
 8003994:	980b883a 	mov	r5,r19
 8003998:	8009ce00 	call	8009ce0 <__divdf3>
 800399c:	180b883a 	mov	r5,r3
 80039a0:	1009883a 	mov	r4,r2
 80039a4:	800ba700 	call	800ba70 <__fixdfsi>
 80039a8:	1009883a 	mov	r4,r2
 80039ac:	102b883a 	mov	r21,r2
 80039b0:	800baf00 	call	800baf0 <__floatsidf>
 80039b4:	800d883a 	mov	r6,r16
 80039b8:	880f883a 	mov	r7,r17
 80039bc:	1009883a 	mov	r4,r2
 80039c0:	180b883a 	mov	r5,r3
 80039c4:	800a9080 	call	800a908 <__muldf3>
 80039c8:	100d883a 	mov	r6,r2
 80039cc:	180f883a 	mov	r7,r3
 80039d0:	9009883a 	mov	r4,r18
 80039d4:	980b883a 	mov	r5,r19
 80039d8:	800b1740 	call	800b174 <__subdf3>
 80039dc:	aa000c04 	addi	r8,r21,48
 80039e0:	a2000005 	stb	r8,0(r20)
 80039e4:	000d883a 	mov	r6,zero
 80039e8:	01d00934 	movhi	r7,16420
 80039ec:	1009883a 	mov	r4,r2
 80039f0:	180b883a 	mov	r5,r3
 80039f4:	a5c00044 	addi	r23,r20,1
 80039f8:	b53fd91e 	bne	r22,r20,8003960 <__alt_data_end+0xfc003960>
 80039fc:	100d883a 	mov	r6,r2
 8003a00:	180f883a 	mov	r7,r3
 8003a04:	1009883a 	mov	r4,r2
 8003a08:	180b883a 	mov	r5,r3
 8003a0c:	80094340 	call	8009434 <__adddf3>
 8003a10:	100d883a 	mov	r6,r2
 8003a14:	180f883a 	mov	r7,r3
 8003a18:	8009883a 	mov	r4,r16
 8003a1c:	880b883a 	mov	r5,r17
 8003a20:	1027883a 	mov	r19,r2
 8003a24:	1825883a 	mov	r18,r3
 8003a28:	800a8140 	call	800a814 <__ledf2>
 8003a2c:	10000816 	blt	r2,zero,8003a50 <_dtoa_r+0x948>
 8003a30:	980d883a 	mov	r6,r19
 8003a34:	900f883a 	mov	r7,r18
 8003a38:	8009883a 	mov	r4,r16
 8003a3c:	880b883a 	mov	r5,r17
 8003a40:	800a6b00 	call	800a6b0 <__eqdf2>
 8003a44:	103f5a1e 	bne	r2,zero,80037b0 <__alt_data_end+0xfc0037b0>
 8003a48:	ad40004c 	andi	r21,r21,1
 8003a4c:	a83f5826 	beq	r21,zero,80037b0 <__alt_data_end+0xfc0037b0>
 8003a50:	bd3fffc3 	ldbu	r20,-1(r23)
 8003a54:	b8bfffc4 	addi	r2,r23,-1
 8003a58:	1007883a 	mov	r3,r2
 8003a5c:	01400e44 	movi	r5,57
 8003a60:	d9800717 	ldw	r6,28(sp)
 8003a64:	00000506 	br	8003a7c <_dtoa_r+0x974>
 8003a68:	18ffffc4 	addi	r3,r3,-1
 8003a6c:	11824726 	beq	r2,r6,800438c <_dtoa_r+0x1284>
 8003a70:	1d000003 	ldbu	r20,0(r3)
 8003a74:	102f883a 	mov	r23,r2
 8003a78:	10bfffc4 	addi	r2,r2,-1
 8003a7c:	a1003fcc 	andi	r4,r20,255
 8003a80:	2100201c 	xori	r4,r4,128
 8003a84:	213fe004 	addi	r4,r4,-128
 8003a88:	217ff726 	beq	r4,r5,8003a68 <__alt_data_end+0xfc003a68>
 8003a8c:	a2000044 	addi	r8,r20,1
 8003a90:	12000005 	stb	r8,0(r2)
 8003a94:	003f4606 	br	80037b0 <__alt_data_end+0xfc0037b0>
 8003a98:	d9000b17 	ldw	r4,44(sp)
 8003a9c:	2000c826 	beq	r4,zero,8003dc0 <_dtoa_r+0xcb8>
 8003aa0:	d9800317 	ldw	r6,12(sp)
 8003aa4:	00c00044 	movi	r3,1
 8003aa8:	1980f90e 	bge	r3,r6,8003e90 <_dtoa_r+0xd88>
 8003aac:	d8800617 	ldw	r2,24(sp)
 8003ab0:	d8c00a17 	ldw	r3,40(sp)
 8003ab4:	157fffc4 	addi	r21,r2,-1
 8003ab8:	1d41f316 	blt	r3,r21,8004288 <_dtoa_r+0x1180>
 8003abc:	1d6bc83a 	sub	r21,r3,r21
 8003ac0:	d9c00617 	ldw	r7,24(sp)
 8003ac4:	3802aa16 	blt	r7,zero,8004570 <_dtoa_r+0x1468>
 8003ac8:	dd000817 	ldw	r20,32(sp)
 8003acc:	d8800617 	ldw	r2,24(sp)
 8003ad0:	d8c00817 	ldw	r3,32(sp)
 8003ad4:	01400044 	movi	r5,1
 8003ad8:	e009883a 	mov	r4,fp
 8003adc:	1887883a 	add	r3,r3,r2
 8003ae0:	d8c00815 	stw	r3,32(sp)
 8003ae4:	b0ad883a 	add	r22,r22,r2
 8003ae8:	80056d80 	call	80056d8 <__i2b>
 8003aec:	1023883a 	mov	r17,r2
 8003af0:	a0000826 	beq	r20,zero,8003b14 <_dtoa_r+0xa0c>
 8003af4:	0580070e 	bge	zero,r22,8003b14 <_dtoa_r+0xa0c>
 8003af8:	a005883a 	mov	r2,r20
 8003afc:	b500b916 	blt	r22,r20,8003de4 <_dtoa_r+0xcdc>
 8003b00:	d9000817 	ldw	r4,32(sp)
 8003b04:	a0a9c83a 	sub	r20,r20,r2
 8003b08:	b0adc83a 	sub	r22,r22,r2
 8003b0c:	2089c83a 	sub	r4,r4,r2
 8003b10:	d9000815 	stw	r4,32(sp)
 8003b14:	d9800a17 	ldw	r6,40(sp)
 8003b18:	0181810e 	bge	zero,r6,8004120 <_dtoa_r+0x1018>
 8003b1c:	d9c00b17 	ldw	r7,44(sp)
 8003b20:	3800b326 	beq	r7,zero,8003df0 <_dtoa_r+0xce8>
 8003b24:	a800b226 	beq	r21,zero,8003df0 <_dtoa_r+0xce8>
 8003b28:	880b883a 	mov	r5,r17
 8003b2c:	a80d883a 	mov	r6,r21
 8003b30:	e009883a 	mov	r4,fp
 8003b34:	80059a00 	call	80059a0 <__pow5mult>
 8003b38:	d9800917 	ldw	r6,36(sp)
 8003b3c:	100b883a 	mov	r5,r2
 8003b40:	e009883a 	mov	r4,fp
 8003b44:	1023883a 	mov	r17,r2
 8003b48:	80057140 	call	8005714 <__multiply>
 8003b4c:	1021883a 	mov	r16,r2
 8003b50:	d8800a17 	ldw	r2,40(sp)
 8003b54:	d9400917 	ldw	r5,36(sp)
 8003b58:	e009883a 	mov	r4,fp
 8003b5c:	1545c83a 	sub	r2,r2,r21
 8003b60:	d8800a15 	stw	r2,40(sp)
 8003b64:	800534c0 	call	800534c <_Bfree>
 8003b68:	d8c00a17 	ldw	r3,40(sp)
 8003b6c:	18009f1e 	bne	r3,zero,8003dec <_dtoa_r+0xce4>
 8003b70:	05c00044 	movi	r23,1
 8003b74:	e009883a 	mov	r4,fp
 8003b78:	b80b883a 	mov	r5,r23
 8003b7c:	80056d80 	call	80056d8 <__i2b>
 8003b80:	d9000d17 	ldw	r4,52(sp)
 8003b84:	102b883a 	mov	r21,r2
 8003b88:	2000ce26 	beq	r4,zero,8003ec4 <_dtoa_r+0xdbc>
 8003b8c:	200d883a 	mov	r6,r4
 8003b90:	100b883a 	mov	r5,r2
 8003b94:	e009883a 	mov	r4,fp
 8003b98:	80059a00 	call	80059a0 <__pow5mult>
 8003b9c:	d9800317 	ldw	r6,12(sp)
 8003ba0:	102b883a 	mov	r21,r2
 8003ba4:	b981810e 	bge	r23,r6,80041ac <_dtoa_r+0x10a4>
 8003ba8:	0027883a 	mov	r19,zero
 8003bac:	a8800417 	ldw	r2,16(r21)
 8003bb0:	05c00804 	movi	r23,32
 8003bb4:	10800104 	addi	r2,r2,4
 8003bb8:	1085883a 	add	r2,r2,r2
 8003bbc:	1085883a 	add	r2,r2,r2
 8003bc0:	a885883a 	add	r2,r21,r2
 8003bc4:	11000017 	ldw	r4,0(r2)
 8003bc8:	80055c00 	call	80055c0 <__hi0bits>
 8003bcc:	b885c83a 	sub	r2,r23,r2
 8003bd0:	1585883a 	add	r2,r2,r22
 8003bd4:	108007cc 	andi	r2,r2,31
 8003bd8:	1000b326 	beq	r2,zero,8003ea8 <_dtoa_r+0xda0>
 8003bdc:	00c00804 	movi	r3,32
 8003be0:	1887c83a 	sub	r3,r3,r2
 8003be4:	01000104 	movi	r4,4
 8003be8:	20c2cd0e 	bge	r4,r3,8004720 <_dtoa_r+0x1618>
 8003bec:	00c00704 	movi	r3,28
 8003bf0:	1885c83a 	sub	r2,r3,r2
 8003bf4:	d8c00817 	ldw	r3,32(sp)
 8003bf8:	a0a9883a 	add	r20,r20,r2
 8003bfc:	b0ad883a 	add	r22,r22,r2
 8003c00:	1887883a 	add	r3,r3,r2
 8003c04:	d8c00815 	stw	r3,32(sp)
 8003c08:	d9800817 	ldw	r6,32(sp)
 8003c0c:	0180040e 	bge	zero,r6,8003c20 <_dtoa_r+0xb18>
 8003c10:	800b883a 	mov	r5,r16
 8003c14:	e009883a 	mov	r4,fp
 8003c18:	8005ae00 	call	8005ae0 <__lshift>
 8003c1c:	1021883a 	mov	r16,r2
 8003c20:	0580050e 	bge	zero,r22,8003c38 <_dtoa_r+0xb30>
 8003c24:	a80b883a 	mov	r5,r21
 8003c28:	b00d883a 	mov	r6,r22
 8003c2c:	e009883a 	mov	r4,fp
 8003c30:	8005ae00 	call	8005ae0 <__lshift>
 8003c34:	102b883a 	mov	r21,r2
 8003c38:	d9c00e17 	ldw	r7,56(sp)
 8003c3c:	3801211e 	bne	r7,zero,80040c4 <_dtoa_r+0xfbc>
 8003c40:	d9800617 	ldw	r6,24(sp)
 8003c44:	0181380e 	bge	zero,r6,8004128 <_dtoa_r+0x1020>
 8003c48:	d8c00b17 	ldw	r3,44(sp)
 8003c4c:	1800ab1e 	bne	r3,zero,8003efc <_dtoa_r+0xdf4>
 8003c50:	dc800717 	ldw	r18,28(sp)
 8003c54:	dcc00617 	ldw	r19,24(sp)
 8003c58:	9029883a 	mov	r20,r18
 8003c5c:	00000206 	br	8003c68 <_dtoa_r+0xb60>
 8003c60:	80053740 	call	8005374 <__multadd>
 8003c64:	1021883a 	mov	r16,r2
 8003c68:	a80b883a 	mov	r5,r21
 8003c6c:	8009883a 	mov	r4,r16
 8003c70:	8002ee00 	call	8002ee0 <quorem>
 8003c74:	10800c04 	addi	r2,r2,48
 8003c78:	90800005 	stb	r2,0(r18)
 8003c7c:	94800044 	addi	r18,r18,1
 8003c80:	9507c83a 	sub	r3,r18,r20
 8003c84:	000f883a 	mov	r7,zero
 8003c88:	01800284 	movi	r6,10
 8003c8c:	800b883a 	mov	r5,r16
 8003c90:	e009883a 	mov	r4,fp
 8003c94:	1cfff216 	blt	r3,r19,8003c60 <__alt_data_end+0xfc003c60>
 8003c98:	1011883a 	mov	r8,r2
 8003c9c:	d8800617 	ldw	r2,24(sp)
 8003ca0:	0082370e 	bge	zero,r2,8004580 <_dtoa_r+0x1478>
 8003ca4:	d9000717 	ldw	r4,28(sp)
 8003ca8:	0025883a 	mov	r18,zero
 8003cac:	20af883a 	add	r23,r4,r2
 8003cb0:	01800044 	movi	r6,1
 8003cb4:	800b883a 	mov	r5,r16
 8003cb8:	e009883a 	mov	r4,fp
 8003cbc:	da001715 	stw	r8,92(sp)
 8003cc0:	8005ae00 	call	8005ae0 <__lshift>
 8003cc4:	a80b883a 	mov	r5,r21
 8003cc8:	1009883a 	mov	r4,r2
 8003ccc:	d8800915 	stw	r2,36(sp)
 8003cd0:	8005c280 	call	8005c28 <__mcmp>
 8003cd4:	da001717 	ldw	r8,92(sp)
 8003cd8:	0081800e 	bge	zero,r2,80042dc <_dtoa_r+0x11d4>
 8003cdc:	b93fffc3 	ldbu	r4,-1(r23)
 8003ce0:	b8bfffc4 	addi	r2,r23,-1
 8003ce4:	1007883a 	mov	r3,r2
 8003ce8:	01800e44 	movi	r6,57
 8003cec:	d9c00717 	ldw	r7,28(sp)
 8003cf0:	00000506 	br	8003d08 <_dtoa_r+0xc00>
 8003cf4:	18ffffc4 	addi	r3,r3,-1
 8003cf8:	11c12326 	beq	r2,r7,8004188 <_dtoa_r+0x1080>
 8003cfc:	19000003 	ldbu	r4,0(r3)
 8003d00:	102f883a 	mov	r23,r2
 8003d04:	10bfffc4 	addi	r2,r2,-1
 8003d08:	21403fcc 	andi	r5,r4,255
 8003d0c:	2940201c 	xori	r5,r5,128
 8003d10:	297fe004 	addi	r5,r5,-128
 8003d14:	29bff726 	beq	r5,r6,8003cf4 <__alt_data_end+0xfc003cf4>
 8003d18:	21000044 	addi	r4,r4,1
 8003d1c:	11000005 	stb	r4,0(r2)
 8003d20:	a80b883a 	mov	r5,r21
 8003d24:	e009883a 	mov	r4,fp
 8003d28:	800534c0 	call	800534c <_Bfree>
 8003d2c:	883ea026 	beq	r17,zero,80037b0 <__alt_data_end+0xfc0037b0>
 8003d30:	90000426 	beq	r18,zero,8003d44 <_dtoa_r+0xc3c>
 8003d34:	94400326 	beq	r18,r17,8003d44 <_dtoa_r+0xc3c>
 8003d38:	900b883a 	mov	r5,r18
 8003d3c:	e009883a 	mov	r4,fp
 8003d40:	800534c0 	call	800534c <_Bfree>
 8003d44:	880b883a 	mov	r5,r17
 8003d48:	e009883a 	mov	r4,fp
 8003d4c:	800534c0 	call	800534c <_Bfree>
 8003d50:	003e9706 	br	80037b0 <__alt_data_end+0xfc0037b0>
 8003d54:	01800044 	movi	r6,1
 8003d58:	d9800e15 	stw	r6,56(sp)
 8003d5c:	003d9606 	br	80033b8 <__alt_data_end+0xfc0033b8>
 8003d60:	d8800817 	ldw	r2,32(sp)
 8003d64:	d8c00517 	ldw	r3,20(sp)
 8003d68:	d8000d15 	stw	zero,52(sp)
 8003d6c:	10c5c83a 	sub	r2,r2,r3
 8003d70:	00c9c83a 	sub	r4,zero,r3
 8003d74:	d8800815 	stw	r2,32(sp)
 8003d78:	d9000a15 	stw	r4,40(sp)
 8003d7c:	003d9706 	br	80033dc <__alt_data_end+0xfc0033dc>
 8003d80:	05adc83a 	sub	r22,zero,r22
 8003d84:	dd800815 	stw	r22,32(sp)
 8003d88:	002d883a 	mov	r22,zero
 8003d8c:	003d8e06 	br	80033c8 <__alt_data_end+0xfc0033c8>
 8003d90:	d9000517 	ldw	r4,20(sp)
 8003d94:	800baf00 	call	800baf0 <__floatsidf>
 8003d98:	100d883a 	mov	r6,r2
 8003d9c:	180f883a 	mov	r7,r3
 8003da0:	a009883a 	mov	r4,r20
 8003da4:	880b883a 	mov	r5,r17
 8003da8:	800a6b00 	call	800a6b0 <__eqdf2>
 8003dac:	103d7126 	beq	r2,zero,8003374 <__alt_data_end+0xfc003374>
 8003db0:	d9c00517 	ldw	r7,20(sp)
 8003db4:	39ffffc4 	addi	r7,r7,-1
 8003db8:	d9c00515 	stw	r7,20(sp)
 8003dbc:	003d6d06 	br	8003374 <__alt_data_end+0xfc003374>
 8003dc0:	dd400a17 	ldw	r21,40(sp)
 8003dc4:	dd000817 	ldw	r20,32(sp)
 8003dc8:	0023883a 	mov	r17,zero
 8003dcc:	003f4806 	br	8003af0 <__alt_data_end+0xfc003af0>
 8003dd0:	10e3c83a 	sub	r17,r2,r3
 8003dd4:	9448983a 	sll	r4,r18,r17
 8003dd8:	003d3206 	br	80032a4 <__alt_data_end+0xfc0032a4>
 8003ddc:	d8000e15 	stw	zero,56(sp)
 8003de0:	003d7506 	br	80033b8 <__alt_data_end+0xfc0033b8>
 8003de4:	b005883a 	mov	r2,r22
 8003de8:	003f4506 	br	8003b00 <__alt_data_end+0xfc003b00>
 8003dec:	dc000915 	stw	r16,36(sp)
 8003df0:	d9800a17 	ldw	r6,40(sp)
 8003df4:	d9400917 	ldw	r5,36(sp)
 8003df8:	e009883a 	mov	r4,fp
 8003dfc:	80059a00 	call	80059a0 <__pow5mult>
 8003e00:	1021883a 	mov	r16,r2
 8003e04:	003f5a06 	br	8003b70 <__alt_data_end+0xfc003b70>
 8003e08:	01c00044 	movi	r7,1
 8003e0c:	d9c00b15 	stw	r7,44(sp)
 8003e10:	d8802217 	ldw	r2,136(sp)
 8003e14:	0081280e 	bge	zero,r2,80042b8 <_dtoa_r+0x11b0>
 8003e18:	100d883a 	mov	r6,r2
 8003e1c:	1021883a 	mov	r16,r2
 8003e20:	d8800c15 	stw	r2,48(sp)
 8003e24:	d8800615 	stw	r2,24(sp)
 8003e28:	003d8806 	br	800344c <__alt_data_end+0xfc00344c>
 8003e2c:	d8800617 	ldw	r2,24(sp)
 8003e30:	00be9b16 	blt	zero,r2,80038a0 <__alt_data_end+0xfc0038a0>
 8003e34:	10010f1e 	bne	r2,zero,8004274 <_dtoa_r+0x116c>
 8003e38:	880b883a 	mov	r5,r17
 8003e3c:	000d883a 	mov	r6,zero
 8003e40:	01d00534 	movhi	r7,16404
 8003e44:	8009883a 	mov	r4,r16
 8003e48:	800a9080 	call	800a908 <__muldf3>
 8003e4c:	900d883a 	mov	r6,r18
 8003e50:	980f883a 	mov	r7,r19
 8003e54:	1009883a 	mov	r4,r2
 8003e58:	180b883a 	mov	r5,r3
 8003e5c:	800a7380 	call	800a738 <__gedf2>
 8003e60:	002b883a 	mov	r21,zero
 8003e64:	0023883a 	mov	r17,zero
 8003e68:	1000bf16 	blt	r2,zero,8004168 <_dtoa_r+0x1060>
 8003e6c:	d9802217 	ldw	r6,136(sp)
 8003e70:	ddc00717 	ldw	r23,28(sp)
 8003e74:	018c303a 	nor	r6,zero,r6
 8003e78:	d9800515 	stw	r6,20(sp)
 8003e7c:	a80b883a 	mov	r5,r21
 8003e80:	e009883a 	mov	r4,fp
 8003e84:	800534c0 	call	800534c <_Bfree>
 8003e88:	883e4926 	beq	r17,zero,80037b0 <__alt_data_end+0xfc0037b0>
 8003e8c:	003fad06 	br	8003d44 <__alt_data_end+0xfc003d44>
 8003e90:	d9c01117 	ldw	r7,68(sp)
 8003e94:	3801bc26 	beq	r7,zero,8004588 <_dtoa_r+0x1480>
 8003e98:	10810cc4 	addi	r2,r2,1075
 8003e9c:	dd400a17 	ldw	r21,40(sp)
 8003ea0:	dd000817 	ldw	r20,32(sp)
 8003ea4:	003f0a06 	br	8003ad0 <__alt_data_end+0xfc003ad0>
 8003ea8:	00800704 	movi	r2,28
 8003eac:	d9000817 	ldw	r4,32(sp)
 8003eb0:	a0a9883a 	add	r20,r20,r2
 8003eb4:	b0ad883a 	add	r22,r22,r2
 8003eb8:	2089883a 	add	r4,r4,r2
 8003ebc:	d9000815 	stw	r4,32(sp)
 8003ec0:	003f5106 	br	8003c08 <__alt_data_end+0xfc003c08>
 8003ec4:	d8c00317 	ldw	r3,12(sp)
 8003ec8:	b8c1fc0e 	bge	r23,r3,80046bc <_dtoa_r+0x15b4>
 8003ecc:	0027883a 	mov	r19,zero
 8003ed0:	b805883a 	mov	r2,r23
 8003ed4:	003f3e06 	br	8003bd0 <__alt_data_end+0xfc003bd0>
 8003ed8:	880b883a 	mov	r5,r17
 8003edc:	e009883a 	mov	r4,fp
 8003ee0:	000f883a 	mov	r7,zero
 8003ee4:	01800284 	movi	r6,10
 8003ee8:	80053740 	call	8005374 <__multadd>
 8003eec:	d9000c17 	ldw	r4,48(sp)
 8003ef0:	1023883a 	mov	r17,r2
 8003ef4:	0102040e 	bge	zero,r4,8004708 <_dtoa_r+0x1600>
 8003ef8:	d9000615 	stw	r4,24(sp)
 8003efc:	0500050e 	bge	zero,r20,8003f14 <_dtoa_r+0xe0c>
 8003f00:	880b883a 	mov	r5,r17
 8003f04:	a00d883a 	mov	r6,r20
 8003f08:	e009883a 	mov	r4,fp
 8003f0c:	8005ae00 	call	8005ae0 <__lshift>
 8003f10:	1023883a 	mov	r17,r2
 8003f14:	9801241e 	bne	r19,zero,80043a8 <_dtoa_r+0x12a0>
 8003f18:	8829883a 	mov	r20,r17
 8003f1c:	d9000617 	ldw	r4,24(sp)
 8003f20:	dcc00717 	ldw	r19,28(sp)
 8003f24:	9480004c 	andi	r18,r18,1
 8003f28:	20bfffc4 	addi	r2,r4,-1
 8003f2c:	9885883a 	add	r2,r19,r2
 8003f30:	d8800415 	stw	r2,16(sp)
 8003f34:	dc800615 	stw	r18,24(sp)
 8003f38:	a80b883a 	mov	r5,r21
 8003f3c:	8009883a 	mov	r4,r16
 8003f40:	8002ee00 	call	8002ee0 <quorem>
 8003f44:	880b883a 	mov	r5,r17
 8003f48:	8009883a 	mov	r4,r16
 8003f4c:	102f883a 	mov	r23,r2
 8003f50:	8005c280 	call	8005c28 <__mcmp>
 8003f54:	a80b883a 	mov	r5,r21
 8003f58:	a00d883a 	mov	r6,r20
 8003f5c:	e009883a 	mov	r4,fp
 8003f60:	102d883a 	mov	r22,r2
 8003f64:	8005c880 	call	8005c88 <__mdiff>
 8003f68:	1007883a 	mov	r3,r2
 8003f6c:	10800317 	ldw	r2,12(r2)
 8003f70:	bc800c04 	addi	r18,r23,48
 8003f74:	180b883a 	mov	r5,r3
 8003f78:	10004e1e 	bne	r2,zero,80040b4 <_dtoa_r+0xfac>
 8003f7c:	8009883a 	mov	r4,r16
 8003f80:	d8c01615 	stw	r3,88(sp)
 8003f84:	8005c280 	call	8005c28 <__mcmp>
 8003f88:	d8c01617 	ldw	r3,88(sp)
 8003f8c:	e009883a 	mov	r4,fp
 8003f90:	d8801615 	stw	r2,88(sp)
 8003f94:	180b883a 	mov	r5,r3
 8003f98:	800534c0 	call	800534c <_Bfree>
 8003f9c:	d8801617 	ldw	r2,88(sp)
 8003fa0:	1000041e 	bne	r2,zero,8003fb4 <_dtoa_r+0xeac>
 8003fa4:	d9800317 	ldw	r6,12(sp)
 8003fa8:	3000021e 	bne	r6,zero,8003fb4 <_dtoa_r+0xeac>
 8003fac:	d8c00617 	ldw	r3,24(sp)
 8003fb0:	18003726 	beq	r3,zero,8004090 <_dtoa_r+0xf88>
 8003fb4:	b0002016 	blt	r22,zero,8004038 <_dtoa_r+0xf30>
 8003fb8:	b000041e 	bne	r22,zero,8003fcc <_dtoa_r+0xec4>
 8003fbc:	d9000317 	ldw	r4,12(sp)
 8003fc0:	2000021e 	bne	r4,zero,8003fcc <_dtoa_r+0xec4>
 8003fc4:	d8c00617 	ldw	r3,24(sp)
 8003fc8:	18001b26 	beq	r3,zero,8004038 <_dtoa_r+0xf30>
 8003fcc:	00810716 	blt	zero,r2,80043ec <_dtoa_r+0x12e4>
 8003fd0:	d8c00417 	ldw	r3,16(sp)
 8003fd4:	9d800044 	addi	r22,r19,1
 8003fd8:	9c800005 	stb	r18,0(r19)
 8003fdc:	b02f883a 	mov	r23,r22
 8003fe0:	98c10626 	beq	r19,r3,80043fc <_dtoa_r+0x12f4>
 8003fe4:	800b883a 	mov	r5,r16
 8003fe8:	000f883a 	mov	r7,zero
 8003fec:	01800284 	movi	r6,10
 8003ff0:	e009883a 	mov	r4,fp
 8003ff4:	80053740 	call	8005374 <__multadd>
 8003ff8:	1021883a 	mov	r16,r2
 8003ffc:	000f883a 	mov	r7,zero
 8004000:	01800284 	movi	r6,10
 8004004:	880b883a 	mov	r5,r17
 8004008:	e009883a 	mov	r4,fp
 800400c:	8d002526 	beq	r17,r20,80040a4 <_dtoa_r+0xf9c>
 8004010:	80053740 	call	8005374 <__multadd>
 8004014:	a00b883a 	mov	r5,r20
 8004018:	000f883a 	mov	r7,zero
 800401c:	01800284 	movi	r6,10
 8004020:	e009883a 	mov	r4,fp
 8004024:	1023883a 	mov	r17,r2
 8004028:	80053740 	call	8005374 <__multadd>
 800402c:	1029883a 	mov	r20,r2
 8004030:	b027883a 	mov	r19,r22
 8004034:	003fc006 	br	8003f38 <__alt_data_end+0xfc003f38>
 8004038:	9011883a 	mov	r8,r18
 800403c:	00800e0e 	bge	zero,r2,8004078 <_dtoa_r+0xf70>
 8004040:	800b883a 	mov	r5,r16
 8004044:	01800044 	movi	r6,1
 8004048:	e009883a 	mov	r4,fp
 800404c:	da001715 	stw	r8,92(sp)
 8004050:	8005ae00 	call	8005ae0 <__lshift>
 8004054:	a80b883a 	mov	r5,r21
 8004058:	1009883a 	mov	r4,r2
 800405c:	1021883a 	mov	r16,r2
 8004060:	8005c280 	call	8005c28 <__mcmp>
 8004064:	da001717 	ldw	r8,92(sp)
 8004068:	0081960e 	bge	zero,r2,80046c4 <_dtoa_r+0x15bc>
 800406c:	00800e44 	movi	r2,57
 8004070:	40817026 	beq	r8,r2,8004634 <_dtoa_r+0x152c>
 8004074:	ba000c44 	addi	r8,r23,49
 8004078:	8825883a 	mov	r18,r17
 800407c:	9dc00044 	addi	r23,r19,1
 8004080:	9a000005 	stb	r8,0(r19)
 8004084:	a023883a 	mov	r17,r20
 8004088:	dc000915 	stw	r16,36(sp)
 800408c:	003f2406 	br	8003d20 <__alt_data_end+0xfc003d20>
 8004090:	00800e44 	movi	r2,57
 8004094:	9011883a 	mov	r8,r18
 8004098:	90816626 	beq	r18,r2,8004634 <_dtoa_r+0x152c>
 800409c:	05bff516 	blt	zero,r22,8004074 <__alt_data_end+0xfc004074>
 80040a0:	003ff506 	br	8004078 <__alt_data_end+0xfc004078>
 80040a4:	80053740 	call	8005374 <__multadd>
 80040a8:	1023883a 	mov	r17,r2
 80040ac:	1029883a 	mov	r20,r2
 80040b0:	003fdf06 	br	8004030 <__alt_data_end+0xfc004030>
 80040b4:	e009883a 	mov	r4,fp
 80040b8:	800534c0 	call	800534c <_Bfree>
 80040bc:	00800044 	movi	r2,1
 80040c0:	003fbc06 	br	8003fb4 <__alt_data_end+0xfc003fb4>
 80040c4:	a80b883a 	mov	r5,r21
 80040c8:	8009883a 	mov	r4,r16
 80040cc:	8005c280 	call	8005c28 <__mcmp>
 80040d0:	103edb0e 	bge	r2,zero,8003c40 <__alt_data_end+0xfc003c40>
 80040d4:	800b883a 	mov	r5,r16
 80040d8:	000f883a 	mov	r7,zero
 80040dc:	01800284 	movi	r6,10
 80040e0:	e009883a 	mov	r4,fp
 80040e4:	80053740 	call	8005374 <__multadd>
 80040e8:	1021883a 	mov	r16,r2
 80040ec:	d8800517 	ldw	r2,20(sp)
 80040f0:	d8c00b17 	ldw	r3,44(sp)
 80040f4:	10bfffc4 	addi	r2,r2,-1
 80040f8:	d8800515 	stw	r2,20(sp)
 80040fc:	183f761e 	bne	r3,zero,8003ed8 <__alt_data_end+0xfc003ed8>
 8004100:	d9000c17 	ldw	r4,48(sp)
 8004104:	0101730e 	bge	zero,r4,80046d4 <_dtoa_r+0x15cc>
 8004108:	d9000615 	stw	r4,24(sp)
 800410c:	003ed006 	br	8003c50 <__alt_data_end+0xfc003c50>
 8004110:	00800084 	movi	r2,2
 8004114:	3081861e 	bne	r6,r2,8004730 <_dtoa_r+0x1628>
 8004118:	d8000b15 	stw	zero,44(sp)
 800411c:	003f3c06 	br	8003e10 <__alt_data_end+0xfc003e10>
 8004120:	dc000917 	ldw	r16,36(sp)
 8004124:	003e9206 	br	8003b70 <__alt_data_end+0xfc003b70>
 8004128:	d9c00317 	ldw	r7,12(sp)
 800412c:	00800084 	movi	r2,2
 8004130:	11fec50e 	bge	r2,r7,8003c48 <__alt_data_end+0xfc003c48>
 8004134:	d9000617 	ldw	r4,24(sp)
 8004138:	20013c1e 	bne	r4,zero,800462c <_dtoa_r+0x1524>
 800413c:	a80b883a 	mov	r5,r21
 8004140:	000f883a 	mov	r7,zero
 8004144:	01800144 	movi	r6,5
 8004148:	e009883a 	mov	r4,fp
 800414c:	80053740 	call	8005374 <__multadd>
 8004150:	100b883a 	mov	r5,r2
 8004154:	8009883a 	mov	r4,r16
 8004158:	102b883a 	mov	r21,r2
 800415c:	8005c280 	call	8005c28 <__mcmp>
 8004160:	dc000915 	stw	r16,36(sp)
 8004164:	00bf410e 	bge	zero,r2,8003e6c <__alt_data_end+0xfc003e6c>
 8004168:	d9c00717 	ldw	r7,28(sp)
 800416c:	00800c44 	movi	r2,49
 8004170:	38800005 	stb	r2,0(r7)
 8004174:	d8800517 	ldw	r2,20(sp)
 8004178:	3dc00044 	addi	r23,r7,1
 800417c:	10800044 	addi	r2,r2,1
 8004180:	d8800515 	stw	r2,20(sp)
 8004184:	003f3d06 	br	8003e7c <__alt_data_end+0xfc003e7c>
 8004188:	d9800517 	ldw	r6,20(sp)
 800418c:	d9c00717 	ldw	r7,28(sp)
 8004190:	00800c44 	movi	r2,49
 8004194:	31800044 	addi	r6,r6,1
 8004198:	d9800515 	stw	r6,20(sp)
 800419c:	38800005 	stb	r2,0(r7)
 80041a0:	003edf06 	br	8003d20 <__alt_data_end+0xfc003d20>
 80041a4:	d8000b15 	stw	zero,44(sp)
 80041a8:	003c9f06 	br	8003428 <__alt_data_end+0xfc003428>
 80041ac:	903e7e1e 	bne	r18,zero,8003ba8 <__alt_data_end+0xfc003ba8>
 80041b0:	00800434 	movhi	r2,16
 80041b4:	10bfffc4 	addi	r2,r2,-1
 80041b8:	9884703a 	and	r2,r19,r2
 80041bc:	1000ea1e 	bne	r2,zero,8004568 <_dtoa_r+0x1460>
 80041c0:	9cdffc2c 	andhi	r19,r19,32752
 80041c4:	9800e826 	beq	r19,zero,8004568 <_dtoa_r+0x1460>
 80041c8:	d9c00817 	ldw	r7,32(sp)
 80041cc:	b5800044 	addi	r22,r22,1
 80041d0:	04c00044 	movi	r19,1
 80041d4:	39c00044 	addi	r7,r7,1
 80041d8:	d9c00815 	stw	r7,32(sp)
 80041dc:	d8800d17 	ldw	r2,52(sp)
 80041e0:	103e721e 	bne	r2,zero,8003bac <__alt_data_end+0xfc003bac>
 80041e4:	00800044 	movi	r2,1
 80041e8:	003e7906 	br	8003bd0 <__alt_data_end+0xfc003bd0>
 80041ec:	8009883a 	mov	r4,r16
 80041f0:	800baf00 	call	800baf0 <__floatsidf>
 80041f4:	d9800f17 	ldw	r6,60(sp)
 80041f8:	d9c01017 	ldw	r7,64(sp)
 80041fc:	1009883a 	mov	r4,r2
 8004200:	180b883a 	mov	r5,r3
 8004204:	800a9080 	call	800a908 <__muldf3>
 8004208:	000d883a 	mov	r6,zero
 800420c:	01d00734 	movhi	r7,16412
 8004210:	1009883a 	mov	r4,r2
 8004214:	180b883a 	mov	r5,r3
 8004218:	80094340 	call	8009434 <__adddf3>
 800421c:	047f3034 	movhi	r17,64704
 8004220:	1021883a 	mov	r16,r2
 8004224:	1c63883a 	add	r17,r3,r17
 8004228:	d9000f17 	ldw	r4,60(sp)
 800422c:	d9401017 	ldw	r5,64(sp)
 8004230:	000d883a 	mov	r6,zero
 8004234:	01d00534 	movhi	r7,16404
 8004238:	800b1740 	call	800b174 <__subdf3>
 800423c:	800d883a 	mov	r6,r16
 8004240:	880f883a 	mov	r7,r17
 8004244:	1009883a 	mov	r4,r2
 8004248:	180b883a 	mov	r5,r3
 800424c:	102b883a 	mov	r21,r2
 8004250:	1829883a 	mov	r20,r3
 8004254:	800a7380 	call	800a738 <__gedf2>
 8004258:	00806c16 	blt	zero,r2,800440c <_dtoa_r+0x1304>
 800425c:	89e0003c 	xorhi	r7,r17,32768
 8004260:	800d883a 	mov	r6,r16
 8004264:	a809883a 	mov	r4,r21
 8004268:	a00b883a 	mov	r5,r20
 800426c:	800a8140 	call	800a814 <__ledf2>
 8004270:	103d7e0e 	bge	r2,zero,800386c <__alt_data_end+0xfc00386c>
 8004274:	002b883a 	mov	r21,zero
 8004278:	0023883a 	mov	r17,zero
 800427c:	003efb06 	br	8003e6c <__alt_data_end+0xfc003e6c>
 8004280:	d8800717 	ldw	r2,28(sp)
 8004284:	003bd006 	br	80031c8 <__alt_data_end+0xfc0031c8>
 8004288:	d9000a17 	ldw	r4,40(sp)
 800428c:	d9800d17 	ldw	r6,52(sp)
 8004290:	dd400a15 	stw	r21,40(sp)
 8004294:	a905c83a 	sub	r2,r21,r4
 8004298:	308d883a 	add	r6,r6,r2
 800429c:	d9800d15 	stw	r6,52(sp)
 80042a0:	002b883a 	mov	r21,zero
 80042a4:	003e0606 	br	8003ac0 <__alt_data_end+0xfc003ac0>
 80042a8:	9023883a 	mov	r17,r18
 80042ac:	9829883a 	mov	r20,r19
 80042b0:	04000084 	movi	r16,2
 80042b4:	003c9206 	br	8003500 <__alt_data_end+0xfc003500>
 80042b8:	04000044 	movi	r16,1
 80042bc:	dc000c15 	stw	r16,48(sp)
 80042c0:	dc000615 	stw	r16,24(sp)
 80042c4:	dc002215 	stw	r16,136(sp)
 80042c8:	e0001115 	stw	zero,68(fp)
 80042cc:	000b883a 	mov	r5,zero
 80042d0:	003c6906 	br	8003478 <__alt_data_end+0xfc003478>
 80042d4:	3021883a 	mov	r16,r6
 80042d8:	003ffb06 	br	80042c8 <__alt_data_end+0xfc0042c8>
 80042dc:	1000021e 	bne	r2,zero,80042e8 <_dtoa_r+0x11e0>
 80042e0:	4200004c 	andi	r8,r8,1
 80042e4:	403e7d1e 	bne	r8,zero,8003cdc <__alt_data_end+0xfc003cdc>
 80042e8:	01000c04 	movi	r4,48
 80042ec:	00000106 	br	80042f4 <_dtoa_r+0x11ec>
 80042f0:	102f883a 	mov	r23,r2
 80042f4:	b8bfffc4 	addi	r2,r23,-1
 80042f8:	10c00007 	ldb	r3,0(r2)
 80042fc:	193ffc26 	beq	r3,r4,80042f0 <__alt_data_end+0xfc0042f0>
 8004300:	003e8706 	br	8003d20 <__alt_data_end+0xfc003d20>
 8004304:	d8800517 	ldw	r2,20(sp)
 8004308:	00a3c83a 	sub	r17,zero,r2
 800430c:	8800a426 	beq	r17,zero,80045a0 <_dtoa_r+0x1498>
 8004310:	888003cc 	andi	r2,r17,15
 8004314:	100490fa 	slli	r2,r2,3
 8004318:	00c20074 	movhi	r3,2049
 800431c:	18f87204 	addi	r3,r3,-7736
 8004320:	1885883a 	add	r2,r3,r2
 8004324:	11800017 	ldw	r6,0(r2)
 8004328:	11c00117 	ldw	r7,4(r2)
 800432c:	9009883a 	mov	r4,r18
 8004330:	980b883a 	mov	r5,r19
 8004334:	8823d13a 	srai	r17,r17,4
 8004338:	800a9080 	call	800a908 <__muldf3>
 800433c:	d8800f15 	stw	r2,60(sp)
 8004340:	d8c01015 	stw	r3,64(sp)
 8004344:	8800e826 	beq	r17,zero,80046e8 <_dtoa_r+0x15e0>
 8004348:	05020074 	movhi	r20,2049
 800434c:	a5386804 	addi	r20,r20,-7776
 8004350:	04000084 	movi	r16,2
 8004354:	8980004c 	andi	r6,r17,1
 8004358:	1009883a 	mov	r4,r2
 800435c:	8823d07a 	srai	r17,r17,1
 8004360:	180b883a 	mov	r5,r3
 8004364:	30000426 	beq	r6,zero,8004378 <_dtoa_r+0x1270>
 8004368:	a1800017 	ldw	r6,0(r20)
 800436c:	a1c00117 	ldw	r7,4(r20)
 8004370:	84000044 	addi	r16,r16,1
 8004374:	800a9080 	call	800a908 <__muldf3>
 8004378:	a5000204 	addi	r20,r20,8
 800437c:	883ff51e 	bne	r17,zero,8004354 <__alt_data_end+0xfc004354>
 8004380:	d8800f15 	stw	r2,60(sp)
 8004384:	d8c01015 	stw	r3,64(sp)
 8004388:	003c7606 	br	8003564 <__alt_data_end+0xfc003564>
 800438c:	00c00c04 	movi	r3,48
 8004390:	10c00005 	stb	r3,0(r2)
 8004394:	d8c00517 	ldw	r3,20(sp)
 8004398:	bd3fffc3 	ldbu	r20,-1(r23)
 800439c:	18c00044 	addi	r3,r3,1
 80043a0:	d8c00515 	stw	r3,20(sp)
 80043a4:	003db906 	br	8003a8c <__alt_data_end+0xfc003a8c>
 80043a8:	89400117 	ldw	r5,4(r17)
 80043ac:	e009883a 	mov	r4,fp
 80043b0:	80052a40 	call	80052a4 <_Balloc>
 80043b4:	89800417 	ldw	r6,16(r17)
 80043b8:	89400304 	addi	r5,r17,12
 80043bc:	11000304 	addi	r4,r2,12
 80043c0:	31800084 	addi	r6,r6,2
 80043c4:	318d883a 	add	r6,r6,r6
 80043c8:	318d883a 	add	r6,r6,r6
 80043cc:	1027883a 	mov	r19,r2
 80043d0:	800515c0 	call	800515c <memcpy>
 80043d4:	01800044 	movi	r6,1
 80043d8:	980b883a 	mov	r5,r19
 80043dc:	e009883a 	mov	r4,fp
 80043e0:	8005ae00 	call	8005ae0 <__lshift>
 80043e4:	1029883a 	mov	r20,r2
 80043e8:	003ecc06 	br	8003f1c <__alt_data_end+0xfc003f1c>
 80043ec:	00800e44 	movi	r2,57
 80043f0:	90809026 	beq	r18,r2,8004634 <_dtoa_r+0x152c>
 80043f4:	92000044 	addi	r8,r18,1
 80043f8:	003f1f06 	br	8004078 <__alt_data_end+0xfc004078>
 80043fc:	9011883a 	mov	r8,r18
 8004400:	8825883a 	mov	r18,r17
 8004404:	a023883a 	mov	r17,r20
 8004408:	003e2906 	br	8003cb0 <__alt_data_end+0xfc003cb0>
 800440c:	002b883a 	mov	r21,zero
 8004410:	0023883a 	mov	r17,zero
 8004414:	003f5406 	br	8004168 <__alt_data_end+0xfc004168>
 8004418:	61bfffc4 	addi	r6,r12,-1
 800441c:	300490fa 	slli	r2,r6,3
 8004420:	00c20074 	movhi	r3,2049
 8004424:	18f87204 	addi	r3,r3,-7736
 8004428:	1885883a 	add	r2,r3,r2
 800442c:	11000017 	ldw	r4,0(r2)
 8004430:	11400117 	ldw	r5,4(r2)
 8004434:	d8800717 	ldw	r2,28(sp)
 8004438:	880f883a 	mov	r7,r17
 800443c:	d9801215 	stw	r6,72(sp)
 8004440:	800d883a 	mov	r6,r16
 8004444:	db001615 	stw	r12,88(sp)
 8004448:	15c00044 	addi	r23,r2,1
 800444c:	800a9080 	call	800a908 <__muldf3>
 8004450:	d9401017 	ldw	r5,64(sp)
 8004454:	d9000f17 	ldw	r4,60(sp)
 8004458:	d8c01515 	stw	r3,84(sp)
 800445c:	d8801415 	stw	r2,80(sp)
 8004460:	800ba700 	call	800ba70 <__fixdfsi>
 8004464:	1009883a 	mov	r4,r2
 8004468:	1021883a 	mov	r16,r2
 800446c:	800baf00 	call	800baf0 <__floatsidf>
 8004470:	d9000f17 	ldw	r4,60(sp)
 8004474:	d9401017 	ldw	r5,64(sp)
 8004478:	100d883a 	mov	r6,r2
 800447c:	180f883a 	mov	r7,r3
 8004480:	800b1740 	call	800b174 <__subdf3>
 8004484:	1829883a 	mov	r20,r3
 8004488:	d8c00717 	ldw	r3,28(sp)
 800448c:	84000c04 	addi	r16,r16,48
 8004490:	1023883a 	mov	r17,r2
 8004494:	1c000005 	stb	r16,0(r3)
 8004498:	db001617 	ldw	r12,88(sp)
 800449c:	00800044 	movi	r2,1
 80044a0:	60802226 	beq	r12,r2,800452c <_dtoa_r+0x1424>
 80044a4:	d9c00717 	ldw	r7,28(sp)
 80044a8:	8805883a 	mov	r2,r17
 80044ac:	b82b883a 	mov	r21,r23
 80044b0:	3b19883a 	add	r12,r7,r12
 80044b4:	6023883a 	mov	r17,r12
 80044b8:	a007883a 	mov	r3,r20
 80044bc:	dc800f15 	stw	r18,60(sp)
 80044c0:	000d883a 	mov	r6,zero
 80044c4:	01d00934 	movhi	r7,16420
 80044c8:	1009883a 	mov	r4,r2
 80044cc:	180b883a 	mov	r5,r3
 80044d0:	800a9080 	call	800a908 <__muldf3>
 80044d4:	180b883a 	mov	r5,r3
 80044d8:	1009883a 	mov	r4,r2
 80044dc:	1829883a 	mov	r20,r3
 80044e0:	1025883a 	mov	r18,r2
 80044e4:	800ba700 	call	800ba70 <__fixdfsi>
 80044e8:	1009883a 	mov	r4,r2
 80044ec:	1021883a 	mov	r16,r2
 80044f0:	800baf00 	call	800baf0 <__floatsidf>
 80044f4:	100d883a 	mov	r6,r2
 80044f8:	180f883a 	mov	r7,r3
 80044fc:	9009883a 	mov	r4,r18
 8004500:	a00b883a 	mov	r5,r20
 8004504:	84000c04 	addi	r16,r16,48
 8004508:	800b1740 	call	800b174 <__subdf3>
 800450c:	ad400044 	addi	r21,r21,1
 8004510:	ac3fffc5 	stb	r16,-1(r21)
 8004514:	ac7fea1e 	bne	r21,r17,80044c0 <__alt_data_end+0xfc0044c0>
 8004518:	1023883a 	mov	r17,r2
 800451c:	d8801217 	ldw	r2,72(sp)
 8004520:	dc800f17 	ldw	r18,60(sp)
 8004524:	1829883a 	mov	r20,r3
 8004528:	b8af883a 	add	r23,r23,r2
 800452c:	d9001417 	ldw	r4,80(sp)
 8004530:	d9401517 	ldw	r5,84(sp)
 8004534:	000d883a 	mov	r6,zero
 8004538:	01cff834 	movhi	r7,16352
 800453c:	80094340 	call	8009434 <__adddf3>
 8004540:	880d883a 	mov	r6,r17
 8004544:	a00f883a 	mov	r7,r20
 8004548:	1009883a 	mov	r4,r2
 800454c:	180b883a 	mov	r5,r3
 8004550:	800a8140 	call	800a814 <__ledf2>
 8004554:	10003e0e 	bge	r2,zero,8004650 <_dtoa_r+0x1548>
 8004558:	d9001317 	ldw	r4,76(sp)
 800455c:	bd3fffc3 	ldbu	r20,-1(r23)
 8004560:	d9000515 	stw	r4,20(sp)
 8004564:	003d3b06 	br	8003a54 <__alt_data_end+0xfc003a54>
 8004568:	0027883a 	mov	r19,zero
 800456c:	003f1b06 	br	80041dc <__alt_data_end+0xfc0041dc>
 8004570:	d8800817 	ldw	r2,32(sp)
 8004574:	11e9c83a 	sub	r20,r2,r7
 8004578:	0005883a 	mov	r2,zero
 800457c:	003d5406 	br	8003ad0 <__alt_data_end+0xfc003ad0>
 8004580:	00800044 	movi	r2,1
 8004584:	003dc706 	br	8003ca4 <__alt_data_end+0xfc003ca4>
 8004588:	d8c00217 	ldw	r3,8(sp)
 800458c:	00800d84 	movi	r2,54
 8004590:	dd400a17 	ldw	r21,40(sp)
 8004594:	10c5c83a 	sub	r2,r2,r3
 8004598:	dd000817 	ldw	r20,32(sp)
 800459c:	003d4c06 	br	8003ad0 <__alt_data_end+0xfc003ad0>
 80045a0:	dc800f15 	stw	r18,60(sp)
 80045a4:	dcc01015 	stw	r19,64(sp)
 80045a8:	04000084 	movi	r16,2
 80045ac:	003bed06 	br	8003564 <__alt_data_end+0xfc003564>
 80045b0:	d9000617 	ldw	r4,24(sp)
 80045b4:	203f0d26 	beq	r4,zero,80041ec <__alt_data_end+0xfc0041ec>
 80045b8:	d9800c17 	ldw	r6,48(sp)
 80045bc:	01bcab0e 	bge	zero,r6,800386c <__alt_data_end+0xfc00386c>
 80045c0:	d9401017 	ldw	r5,64(sp)
 80045c4:	d9000f17 	ldw	r4,60(sp)
 80045c8:	000d883a 	mov	r6,zero
 80045cc:	01d00934 	movhi	r7,16420
 80045d0:	800a9080 	call	800a908 <__muldf3>
 80045d4:	81000044 	addi	r4,r16,1
 80045d8:	d8800f15 	stw	r2,60(sp)
 80045dc:	d8c01015 	stw	r3,64(sp)
 80045e0:	800baf00 	call	800baf0 <__floatsidf>
 80045e4:	d9800f17 	ldw	r6,60(sp)
 80045e8:	d9c01017 	ldw	r7,64(sp)
 80045ec:	1009883a 	mov	r4,r2
 80045f0:	180b883a 	mov	r5,r3
 80045f4:	800a9080 	call	800a908 <__muldf3>
 80045f8:	01d00734 	movhi	r7,16412
 80045fc:	000d883a 	mov	r6,zero
 8004600:	1009883a 	mov	r4,r2
 8004604:	180b883a 	mov	r5,r3
 8004608:	80094340 	call	8009434 <__adddf3>
 800460c:	d9c00517 	ldw	r7,20(sp)
 8004610:	047f3034 	movhi	r17,64704
 8004614:	1021883a 	mov	r16,r2
 8004618:	39ffffc4 	addi	r7,r7,-1
 800461c:	d9c01315 	stw	r7,76(sp)
 8004620:	1c63883a 	add	r17,r3,r17
 8004624:	db000c17 	ldw	r12,48(sp)
 8004628:	003bea06 	br	80035d4 <__alt_data_end+0xfc0035d4>
 800462c:	dc000915 	stw	r16,36(sp)
 8004630:	003e0e06 	br	8003e6c <__alt_data_end+0xfc003e6c>
 8004634:	01000e44 	movi	r4,57
 8004638:	8825883a 	mov	r18,r17
 800463c:	9dc00044 	addi	r23,r19,1
 8004640:	99000005 	stb	r4,0(r19)
 8004644:	a023883a 	mov	r17,r20
 8004648:	dc000915 	stw	r16,36(sp)
 800464c:	003da406 	br	8003ce0 <__alt_data_end+0xfc003ce0>
 8004650:	d9801417 	ldw	r6,80(sp)
 8004654:	d9c01517 	ldw	r7,84(sp)
 8004658:	0009883a 	mov	r4,zero
 800465c:	014ff834 	movhi	r5,16352
 8004660:	800b1740 	call	800b174 <__subdf3>
 8004664:	880d883a 	mov	r6,r17
 8004668:	a00f883a 	mov	r7,r20
 800466c:	1009883a 	mov	r4,r2
 8004670:	180b883a 	mov	r5,r3
 8004674:	800a7380 	call	800a738 <__gedf2>
 8004678:	00bc7c0e 	bge	zero,r2,800386c <__alt_data_end+0xfc00386c>
 800467c:	01000c04 	movi	r4,48
 8004680:	00000106 	br	8004688 <_dtoa_r+0x1580>
 8004684:	102f883a 	mov	r23,r2
 8004688:	b8bfffc4 	addi	r2,r23,-1
 800468c:	10c00007 	ldb	r3,0(r2)
 8004690:	193ffc26 	beq	r3,r4,8004684 <__alt_data_end+0xfc004684>
 8004694:	d9801317 	ldw	r6,76(sp)
 8004698:	d9800515 	stw	r6,20(sp)
 800469c:	003c4406 	br	80037b0 <__alt_data_end+0xfc0037b0>
 80046a0:	d9801317 	ldw	r6,76(sp)
 80046a4:	d9800515 	stw	r6,20(sp)
 80046a8:	003cea06 	br	8003a54 <__alt_data_end+0xfc003a54>
 80046ac:	dd800f17 	ldw	r22,60(sp)
 80046b0:	dcc01017 	ldw	r19,64(sp)
 80046b4:	dc801217 	ldw	r18,72(sp)
 80046b8:	003c6c06 	br	800386c <__alt_data_end+0xfc00386c>
 80046bc:	903e031e 	bne	r18,zero,8003ecc <__alt_data_end+0xfc003ecc>
 80046c0:	003ebb06 	br	80041b0 <__alt_data_end+0xfc0041b0>
 80046c4:	103e6c1e 	bne	r2,zero,8004078 <__alt_data_end+0xfc004078>
 80046c8:	4080004c 	andi	r2,r8,1
 80046cc:	103e6a26 	beq	r2,zero,8004078 <__alt_data_end+0xfc004078>
 80046d0:	003e6606 	br	800406c <__alt_data_end+0xfc00406c>
 80046d4:	d8c00317 	ldw	r3,12(sp)
 80046d8:	00800084 	movi	r2,2
 80046dc:	10c02916 	blt	r2,r3,8004784 <_dtoa_r+0x167c>
 80046e0:	d9000c17 	ldw	r4,48(sp)
 80046e4:	003e8806 	br	8004108 <__alt_data_end+0xfc004108>
 80046e8:	04000084 	movi	r16,2
 80046ec:	003b9d06 	br	8003564 <__alt_data_end+0xfc003564>
 80046f0:	d9001317 	ldw	r4,76(sp)
 80046f4:	d9000515 	stw	r4,20(sp)
 80046f8:	003cd606 	br	8003a54 <__alt_data_end+0xfc003a54>
 80046fc:	d8801317 	ldw	r2,76(sp)
 8004700:	d8800515 	stw	r2,20(sp)
 8004704:	003c2a06 	br	80037b0 <__alt_data_end+0xfc0037b0>
 8004708:	d9800317 	ldw	r6,12(sp)
 800470c:	00800084 	movi	r2,2
 8004710:	11801516 	blt	r2,r6,8004768 <_dtoa_r+0x1660>
 8004714:	d9c00c17 	ldw	r7,48(sp)
 8004718:	d9c00615 	stw	r7,24(sp)
 800471c:	003df706 	br	8003efc <__alt_data_end+0xfc003efc>
 8004720:	193d3926 	beq	r3,r4,8003c08 <__alt_data_end+0xfc003c08>
 8004724:	00c00f04 	movi	r3,60
 8004728:	1885c83a 	sub	r2,r3,r2
 800472c:	003ddf06 	br	8003eac <__alt_data_end+0xfc003eac>
 8004730:	e009883a 	mov	r4,fp
 8004734:	e0001115 	stw	zero,68(fp)
 8004738:	000b883a 	mov	r5,zero
 800473c:	80052a40 	call	80052a4 <_Balloc>
 8004740:	d8800715 	stw	r2,28(sp)
 8004744:	d8c00717 	ldw	r3,28(sp)
 8004748:	00bfffc4 	movi	r2,-1
 800474c:	01000044 	movi	r4,1
 8004750:	d8800c15 	stw	r2,48(sp)
 8004754:	e0c01015 	stw	r3,64(fp)
 8004758:	d9000b15 	stw	r4,44(sp)
 800475c:	d8800615 	stw	r2,24(sp)
 8004760:	d8002215 	stw	zero,136(sp)
 8004764:	003c4106 	br	800386c <__alt_data_end+0xfc00386c>
 8004768:	d8c00c17 	ldw	r3,48(sp)
 800476c:	d8c00615 	stw	r3,24(sp)
 8004770:	003e7006 	br	8004134 <__alt_data_end+0xfc004134>
 8004774:	04400044 	movi	r17,1
 8004778:	003b2006 	br	80033fc <__alt_data_end+0xfc0033fc>
 800477c:	000b883a 	mov	r5,zero
 8004780:	003b3d06 	br	8003478 <__alt_data_end+0xfc003478>
 8004784:	d8800c17 	ldw	r2,48(sp)
 8004788:	d8800615 	stw	r2,24(sp)
 800478c:	003e6906 	br	8004134 <__alt_data_end+0xfc004134>

08004790 <_setlocale_r>:
 8004790:	30001b26 	beq	r6,zero,8004800 <_setlocale_r+0x70>
 8004794:	01420074 	movhi	r5,2049
 8004798:	defffe04 	addi	sp,sp,-8
 800479c:	29785804 	addi	r5,r5,-7840
 80047a0:	3009883a 	mov	r4,r6
 80047a4:	dc000015 	stw	r16,0(sp)
 80047a8:	dfc00115 	stw	ra,4(sp)
 80047ac:	3021883a 	mov	r16,r6
 80047b0:	80064240 	call	8006424 <strcmp>
 80047b4:	1000061e 	bne	r2,zero,80047d0 <_setlocale_r+0x40>
 80047b8:	00820074 	movhi	r2,2049
 80047bc:	10b85704 	addi	r2,r2,-7844
 80047c0:	dfc00117 	ldw	ra,4(sp)
 80047c4:	dc000017 	ldw	r16,0(sp)
 80047c8:	dec00204 	addi	sp,sp,8
 80047cc:	f800283a 	ret
 80047d0:	01420074 	movhi	r5,2049
 80047d4:	29785704 	addi	r5,r5,-7844
 80047d8:	8009883a 	mov	r4,r16
 80047dc:	80064240 	call	8006424 <strcmp>
 80047e0:	103ff526 	beq	r2,zero,80047b8 <__alt_data_end+0xfc0047b8>
 80047e4:	01420074 	movhi	r5,2049
 80047e8:	29784204 	addi	r5,r5,-7928
 80047ec:	8009883a 	mov	r4,r16
 80047f0:	80064240 	call	8006424 <strcmp>
 80047f4:	103ff026 	beq	r2,zero,80047b8 <__alt_data_end+0xfc0047b8>
 80047f8:	0005883a 	mov	r2,zero
 80047fc:	003ff006 	br	80047c0 <__alt_data_end+0xfc0047c0>
 8004800:	00820074 	movhi	r2,2049
 8004804:	10b85704 	addi	r2,r2,-7844
 8004808:	f800283a 	ret

0800480c <__locale_charset>:
 800480c:	00820074 	movhi	r2,2049
 8004810:	10ba6404 	addi	r2,r2,-5744
 8004814:	f800283a 	ret

08004818 <__locale_mb_cur_max>:
 8004818:	00820074 	movhi	r2,2049
 800481c:	10800104 	addi	r2,r2,4
 8004820:	10800017 	ldw	r2,0(r2)
 8004824:	f800283a 	ret

08004828 <__locale_msgcharset>:
 8004828:	00820074 	movhi	r2,2049
 800482c:	10ba5c04 	addi	r2,r2,-5776
 8004830:	f800283a 	ret

08004834 <__locale_cjk_lang>:
 8004834:	0005883a 	mov	r2,zero
 8004838:	f800283a 	ret

0800483c <_localeconv_r>:
 800483c:	00820074 	movhi	r2,2049
 8004840:	10ba6c04 	addi	r2,r2,-5712
 8004844:	f800283a 	ret

08004848 <setlocale>:
 8004848:	00820074 	movhi	r2,2049
 800484c:	10800004 	addi	r2,r2,0
 8004850:	280d883a 	mov	r6,r5
 8004854:	200b883a 	mov	r5,r4
 8004858:	11000017 	ldw	r4,0(r2)
 800485c:	80047901 	jmpi	8004790 <_setlocale_r>

08004860 <localeconv>:
 8004860:	00820074 	movhi	r2,2049
 8004864:	10ba6c04 	addi	r2,r2,-5712
 8004868:	f800283a 	ret

0800486c <_malloc_r>:
 800486c:	defff504 	addi	sp,sp,-44
 8004870:	dc800315 	stw	r18,12(sp)
 8004874:	dfc00a15 	stw	ra,40(sp)
 8004878:	df000915 	stw	fp,36(sp)
 800487c:	ddc00815 	stw	r23,32(sp)
 8004880:	dd800715 	stw	r22,28(sp)
 8004884:	dd400615 	stw	r21,24(sp)
 8004888:	dd000515 	stw	r20,20(sp)
 800488c:	dcc00415 	stw	r19,16(sp)
 8004890:	dc400215 	stw	r17,8(sp)
 8004894:	dc000115 	stw	r16,4(sp)
 8004898:	288002c4 	addi	r2,r5,11
 800489c:	00c00584 	movi	r3,22
 80048a0:	2025883a 	mov	r18,r4
 80048a4:	18807f2e 	bgeu	r3,r2,8004aa4 <_malloc_r+0x238>
 80048a8:	047ffe04 	movi	r17,-8
 80048ac:	1462703a 	and	r17,r2,r17
 80048b0:	8800a316 	blt	r17,zero,8004b40 <_malloc_r+0x2d4>
 80048b4:	8940a236 	bltu	r17,r5,8004b40 <_malloc_r+0x2d4>
 80048b8:	800be400 	call	800be40 <__malloc_lock>
 80048bc:	00807dc4 	movi	r2,503
 80048c0:	1441e92e 	bgeu	r2,r17,8005068 <_malloc_r+0x7fc>
 80048c4:	8804d27a 	srli	r2,r17,9
 80048c8:	1000a126 	beq	r2,zero,8004b50 <_malloc_r+0x2e4>
 80048cc:	00c00104 	movi	r3,4
 80048d0:	18811e36 	bltu	r3,r2,8004d4c <_malloc_r+0x4e0>
 80048d4:	8804d1ba 	srli	r2,r17,6
 80048d8:	12000e44 	addi	r8,r2,57
 80048dc:	11c00e04 	addi	r7,r2,56
 80048e0:	4209883a 	add	r4,r8,r8
 80048e4:	04c20074 	movhi	r19,2049
 80048e8:	2109883a 	add	r4,r4,r4
 80048ec:	9cfa7a04 	addi	r19,r19,-5656
 80048f0:	2109883a 	add	r4,r4,r4
 80048f4:	9909883a 	add	r4,r19,r4
 80048f8:	24000117 	ldw	r16,4(r4)
 80048fc:	213ffe04 	addi	r4,r4,-8
 8004900:	24009726 	beq	r4,r16,8004b60 <_malloc_r+0x2f4>
 8004904:	80800117 	ldw	r2,4(r16)
 8004908:	01bfff04 	movi	r6,-4
 800490c:	014003c4 	movi	r5,15
 8004910:	1184703a 	and	r2,r2,r6
 8004914:	1447c83a 	sub	r3,r2,r17
 8004918:	28c00716 	blt	r5,r3,8004938 <_malloc_r+0xcc>
 800491c:	1800920e 	bge	r3,zero,8004b68 <_malloc_r+0x2fc>
 8004920:	84000317 	ldw	r16,12(r16)
 8004924:	24008e26 	beq	r4,r16,8004b60 <_malloc_r+0x2f4>
 8004928:	80800117 	ldw	r2,4(r16)
 800492c:	1184703a 	and	r2,r2,r6
 8004930:	1447c83a 	sub	r3,r2,r17
 8004934:	28fff90e 	bge	r5,r3,800491c <__alt_data_end+0xfc00491c>
 8004938:	3809883a 	mov	r4,r7
 800493c:	01820074 	movhi	r6,2049
 8004940:	9c000417 	ldw	r16,16(r19)
 8004944:	31ba7a04 	addi	r6,r6,-5656
 8004948:	32000204 	addi	r8,r6,8
 800494c:	82013426 	beq	r16,r8,8004e20 <_malloc_r+0x5b4>
 8004950:	80c00117 	ldw	r3,4(r16)
 8004954:	00bfff04 	movi	r2,-4
 8004958:	188e703a 	and	r7,r3,r2
 800495c:	3c45c83a 	sub	r2,r7,r17
 8004960:	00c003c4 	movi	r3,15
 8004964:	18811f16 	blt	r3,r2,8004de4 <_malloc_r+0x578>
 8004968:	32000515 	stw	r8,20(r6)
 800496c:	32000415 	stw	r8,16(r6)
 8004970:	10007f0e 	bge	r2,zero,8004b70 <_malloc_r+0x304>
 8004974:	00807fc4 	movi	r2,511
 8004978:	11c0fd36 	bltu	r2,r7,8004d70 <_malloc_r+0x504>
 800497c:	3806d0fa 	srli	r3,r7,3
 8004980:	01c00044 	movi	r7,1
 8004984:	30800117 	ldw	r2,4(r6)
 8004988:	19400044 	addi	r5,r3,1
 800498c:	294b883a 	add	r5,r5,r5
 8004990:	1807d0ba 	srai	r3,r3,2
 8004994:	294b883a 	add	r5,r5,r5
 8004998:	294b883a 	add	r5,r5,r5
 800499c:	298b883a 	add	r5,r5,r6
 80049a0:	38c6983a 	sll	r3,r7,r3
 80049a4:	29c00017 	ldw	r7,0(r5)
 80049a8:	2a7ffe04 	addi	r9,r5,-8
 80049ac:	1886b03a 	or	r3,r3,r2
 80049b0:	82400315 	stw	r9,12(r16)
 80049b4:	81c00215 	stw	r7,8(r16)
 80049b8:	30c00115 	stw	r3,4(r6)
 80049bc:	2c000015 	stw	r16,0(r5)
 80049c0:	3c000315 	stw	r16,12(r7)
 80049c4:	2005d0ba 	srai	r2,r4,2
 80049c8:	01400044 	movi	r5,1
 80049cc:	288a983a 	sll	r5,r5,r2
 80049d0:	19406f36 	bltu	r3,r5,8004b90 <_malloc_r+0x324>
 80049d4:	28c4703a 	and	r2,r5,r3
 80049d8:	10000a1e 	bne	r2,zero,8004a04 <_malloc_r+0x198>
 80049dc:	00bfff04 	movi	r2,-4
 80049e0:	294b883a 	add	r5,r5,r5
 80049e4:	2088703a 	and	r4,r4,r2
 80049e8:	28c4703a 	and	r2,r5,r3
 80049ec:	21000104 	addi	r4,r4,4
 80049f0:	1000041e 	bne	r2,zero,8004a04 <_malloc_r+0x198>
 80049f4:	294b883a 	add	r5,r5,r5
 80049f8:	28c4703a 	and	r2,r5,r3
 80049fc:	21000104 	addi	r4,r4,4
 8004a00:	103ffc26 	beq	r2,zero,80049f4 <__alt_data_end+0xfc0049f4>
 8004a04:	02bfff04 	movi	r10,-4
 8004a08:	024003c4 	movi	r9,15
 8004a0c:	21800044 	addi	r6,r4,1
 8004a10:	318d883a 	add	r6,r6,r6
 8004a14:	318d883a 	add	r6,r6,r6
 8004a18:	318d883a 	add	r6,r6,r6
 8004a1c:	998d883a 	add	r6,r19,r6
 8004a20:	333ffe04 	addi	r12,r6,-8
 8004a24:	2017883a 	mov	r11,r4
 8004a28:	31800104 	addi	r6,r6,4
 8004a2c:	34000017 	ldw	r16,0(r6)
 8004a30:	31fffd04 	addi	r7,r6,-12
 8004a34:	81c0041e 	bne	r16,r7,8004a48 <_malloc_r+0x1dc>
 8004a38:	0000fb06 	br	8004e28 <_malloc_r+0x5bc>
 8004a3c:	1801030e 	bge	r3,zero,8004e4c <_malloc_r+0x5e0>
 8004a40:	84000317 	ldw	r16,12(r16)
 8004a44:	81c0f826 	beq	r16,r7,8004e28 <_malloc_r+0x5bc>
 8004a48:	80800117 	ldw	r2,4(r16)
 8004a4c:	1284703a 	and	r2,r2,r10
 8004a50:	1447c83a 	sub	r3,r2,r17
 8004a54:	48fff90e 	bge	r9,r3,8004a3c <__alt_data_end+0xfc004a3c>
 8004a58:	80800317 	ldw	r2,12(r16)
 8004a5c:	81000217 	ldw	r4,8(r16)
 8004a60:	89400054 	ori	r5,r17,1
 8004a64:	81400115 	stw	r5,4(r16)
 8004a68:	20800315 	stw	r2,12(r4)
 8004a6c:	11000215 	stw	r4,8(r2)
 8004a70:	8463883a 	add	r17,r16,r17
 8004a74:	9c400515 	stw	r17,20(r19)
 8004a78:	9c400415 	stw	r17,16(r19)
 8004a7c:	18800054 	ori	r2,r3,1
 8004a80:	88800115 	stw	r2,4(r17)
 8004a84:	8a000315 	stw	r8,12(r17)
 8004a88:	8a000215 	stw	r8,8(r17)
 8004a8c:	88e3883a 	add	r17,r17,r3
 8004a90:	88c00015 	stw	r3,0(r17)
 8004a94:	9009883a 	mov	r4,r18
 8004a98:	800be640 	call	800be64 <__malloc_unlock>
 8004a9c:	80800204 	addi	r2,r16,8
 8004aa0:	00001b06 	br	8004b10 <_malloc_r+0x2a4>
 8004aa4:	04400404 	movi	r17,16
 8004aa8:	89402536 	bltu	r17,r5,8004b40 <_malloc_r+0x2d4>
 8004aac:	800be400 	call	800be40 <__malloc_lock>
 8004ab0:	00800184 	movi	r2,6
 8004ab4:	01000084 	movi	r4,2
 8004ab8:	04c20074 	movhi	r19,2049
 8004abc:	1085883a 	add	r2,r2,r2
 8004ac0:	9cfa7a04 	addi	r19,r19,-5656
 8004ac4:	1085883a 	add	r2,r2,r2
 8004ac8:	9885883a 	add	r2,r19,r2
 8004acc:	14000117 	ldw	r16,4(r2)
 8004ad0:	10fffe04 	addi	r3,r2,-8
 8004ad4:	80c0d926 	beq	r16,r3,8004e3c <_malloc_r+0x5d0>
 8004ad8:	80c00117 	ldw	r3,4(r16)
 8004adc:	81000317 	ldw	r4,12(r16)
 8004ae0:	00bfff04 	movi	r2,-4
 8004ae4:	1884703a 	and	r2,r3,r2
 8004ae8:	81400217 	ldw	r5,8(r16)
 8004aec:	8085883a 	add	r2,r16,r2
 8004af0:	10c00117 	ldw	r3,4(r2)
 8004af4:	29000315 	stw	r4,12(r5)
 8004af8:	21400215 	stw	r5,8(r4)
 8004afc:	18c00054 	ori	r3,r3,1
 8004b00:	10c00115 	stw	r3,4(r2)
 8004b04:	9009883a 	mov	r4,r18
 8004b08:	800be640 	call	800be64 <__malloc_unlock>
 8004b0c:	80800204 	addi	r2,r16,8
 8004b10:	dfc00a17 	ldw	ra,40(sp)
 8004b14:	df000917 	ldw	fp,36(sp)
 8004b18:	ddc00817 	ldw	r23,32(sp)
 8004b1c:	dd800717 	ldw	r22,28(sp)
 8004b20:	dd400617 	ldw	r21,24(sp)
 8004b24:	dd000517 	ldw	r20,20(sp)
 8004b28:	dcc00417 	ldw	r19,16(sp)
 8004b2c:	dc800317 	ldw	r18,12(sp)
 8004b30:	dc400217 	ldw	r17,8(sp)
 8004b34:	dc000117 	ldw	r16,4(sp)
 8004b38:	dec00b04 	addi	sp,sp,44
 8004b3c:	f800283a 	ret
 8004b40:	00800304 	movi	r2,12
 8004b44:	90800015 	stw	r2,0(r18)
 8004b48:	0005883a 	mov	r2,zero
 8004b4c:	003ff006 	br	8004b10 <__alt_data_end+0xfc004b10>
 8004b50:	01002004 	movi	r4,128
 8004b54:	02001004 	movi	r8,64
 8004b58:	01c00fc4 	movi	r7,63
 8004b5c:	003f6106 	br	80048e4 <__alt_data_end+0xfc0048e4>
 8004b60:	4009883a 	mov	r4,r8
 8004b64:	003f7506 	br	800493c <__alt_data_end+0xfc00493c>
 8004b68:	81000317 	ldw	r4,12(r16)
 8004b6c:	003fde06 	br	8004ae8 <__alt_data_end+0xfc004ae8>
 8004b70:	81c5883a 	add	r2,r16,r7
 8004b74:	11400117 	ldw	r5,4(r2)
 8004b78:	9009883a 	mov	r4,r18
 8004b7c:	29400054 	ori	r5,r5,1
 8004b80:	11400115 	stw	r5,4(r2)
 8004b84:	800be640 	call	800be64 <__malloc_unlock>
 8004b88:	80800204 	addi	r2,r16,8
 8004b8c:	003fe006 	br	8004b10 <__alt_data_end+0xfc004b10>
 8004b90:	9c000217 	ldw	r16,8(r19)
 8004b94:	00bfff04 	movi	r2,-4
 8004b98:	85800117 	ldw	r22,4(r16)
 8004b9c:	b0ac703a 	and	r22,r22,r2
 8004ba0:	b4400336 	bltu	r22,r17,8004bb0 <_malloc_r+0x344>
 8004ba4:	b445c83a 	sub	r2,r22,r17
 8004ba8:	00c003c4 	movi	r3,15
 8004bac:	18805d16 	blt	r3,r2,8004d24 <_malloc_r+0x4b8>
 8004bb0:	05c20074 	movhi	r23,2049
 8004bb4:	00820074 	movhi	r2,2049
 8004bb8:	10872a04 	addi	r2,r2,7336
 8004bbc:	bdc00204 	addi	r23,r23,8
 8004bc0:	15400017 	ldw	r21,0(r2)
 8004bc4:	b8c00017 	ldw	r3,0(r23)
 8004bc8:	00bfffc4 	movi	r2,-1
 8004bcc:	858d883a 	add	r6,r16,r22
 8004bd0:	8d6b883a 	add	r21,r17,r21
 8004bd4:	1880ea26 	beq	r3,r2,8004f80 <_malloc_r+0x714>
 8004bd8:	ad4403c4 	addi	r21,r21,4111
 8004bdc:	00bc0004 	movi	r2,-4096
 8004be0:	a8aa703a 	and	r21,r21,r2
 8004be4:	a80b883a 	mov	r5,r21
 8004be8:	9009883a 	mov	r4,r18
 8004bec:	d9800015 	stw	r6,0(sp)
 8004bf0:	80063d00 	call	80063d0 <_sbrk_r>
 8004bf4:	1029883a 	mov	r20,r2
 8004bf8:	00bfffc4 	movi	r2,-1
 8004bfc:	d9800017 	ldw	r6,0(sp)
 8004c00:	a080e826 	beq	r20,r2,8004fa4 <_malloc_r+0x738>
 8004c04:	a180a636 	bltu	r20,r6,8004ea0 <_malloc_r+0x634>
 8004c08:	07020074 	movhi	fp,2049
 8004c0c:	e7073304 	addi	fp,fp,7372
 8004c10:	e0800017 	ldw	r2,0(fp)
 8004c14:	a887883a 	add	r3,r21,r2
 8004c18:	e0c00015 	stw	r3,0(fp)
 8004c1c:	3500e626 	beq	r6,r20,8004fb8 <_malloc_r+0x74c>
 8004c20:	b9000017 	ldw	r4,0(r23)
 8004c24:	00bfffc4 	movi	r2,-1
 8004c28:	2080ee26 	beq	r4,r2,8004fe4 <_malloc_r+0x778>
 8004c2c:	a185c83a 	sub	r2,r20,r6
 8004c30:	10c5883a 	add	r2,r2,r3
 8004c34:	e0800015 	stw	r2,0(fp)
 8004c38:	a0c001cc 	andi	r3,r20,7
 8004c3c:	1800bc26 	beq	r3,zero,8004f30 <_malloc_r+0x6c4>
 8004c40:	a0e9c83a 	sub	r20,r20,r3
 8004c44:	00840204 	movi	r2,4104
 8004c48:	a5000204 	addi	r20,r20,8
 8004c4c:	10c7c83a 	sub	r3,r2,r3
 8004c50:	a545883a 	add	r2,r20,r21
 8004c54:	1083ffcc 	andi	r2,r2,4095
 8004c58:	18abc83a 	sub	r21,r3,r2
 8004c5c:	a80b883a 	mov	r5,r21
 8004c60:	9009883a 	mov	r4,r18
 8004c64:	80063d00 	call	80063d0 <_sbrk_r>
 8004c68:	00ffffc4 	movi	r3,-1
 8004c6c:	10c0e126 	beq	r2,r3,8004ff4 <_malloc_r+0x788>
 8004c70:	1505c83a 	sub	r2,r2,r20
 8004c74:	1545883a 	add	r2,r2,r21
 8004c78:	10800054 	ori	r2,r2,1
 8004c7c:	e0c00017 	ldw	r3,0(fp)
 8004c80:	9d000215 	stw	r20,8(r19)
 8004c84:	a0800115 	stw	r2,4(r20)
 8004c88:	a8c7883a 	add	r3,r21,r3
 8004c8c:	e0c00015 	stw	r3,0(fp)
 8004c90:	84c00e26 	beq	r16,r19,8004ccc <_malloc_r+0x460>
 8004c94:	018003c4 	movi	r6,15
 8004c98:	3580a72e 	bgeu	r6,r22,8004f38 <_malloc_r+0x6cc>
 8004c9c:	81400117 	ldw	r5,4(r16)
 8004ca0:	013ffe04 	movi	r4,-8
 8004ca4:	b0bffd04 	addi	r2,r22,-12
 8004ca8:	1104703a 	and	r2,r2,r4
 8004cac:	2900004c 	andi	r4,r5,1
 8004cb0:	2088b03a 	or	r4,r4,r2
 8004cb4:	81000115 	stw	r4,4(r16)
 8004cb8:	01400144 	movi	r5,5
 8004cbc:	8089883a 	add	r4,r16,r2
 8004cc0:	21400115 	stw	r5,4(r4)
 8004cc4:	21400215 	stw	r5,8(r4)
 8004cc8:	3080cd36 	bltu	r6,r2,8005000 <_malloc_r+0x794>
 8004ccc:	00820074 	movhi	r2,2049
 8004cd0:	10872904 	addi	r2,r2,7332
 8004cd4:	11000017 	ldw	r4,0(r2)
 8004cd8:	20c0012e 	bgeu	r4,r3,8004ce0 <_malloc_r+0x474>
 8004cdc:	10c00015 	stw	r3,0(r2)
 8004ce0:	00820074 	movhi	r2,2049
 8004ce4:	10872804 	addi	r2,r2,7328
 8004ce8:	11000017 	ldw	r4,0(r2)
 8004cec:	9c000217 	ldw	r16,8(r19)
 8004cf0:	20c0012e 	bgeu	r4,r3,8004cf8 <_malloc_r+0x48c>
 8004cf4:	10c00015 	stw	r3,0(r2)
 8004cf8:	80c00117 	ldw	r3,4(r16)
 8004cfc:	00bfff04 	movi	r2,-4
 8004d00:	1886703a 	and	r3,r3,r2
 8004d04:	1c45c83a 	sub	r2,r3,r17
 8004d08:	1c400236 	bltu	r3,r17,8004d14 <_malloc_r+0x4a8>
 8004d0c:	00c003c4 	movi	r3,15
 8004d10:	18800416 	blt	r3,r2,8004d24 <_malloc_r+0x4b8>
 8004d14:	9009883a 	mov	r4,r18
 8004d18:	800be640 	call	800be64 <__malloc_unlock>
 8004d1c:	0005883a 	mov	r2,zero
 8004d20:	003f7b06 	br	8004b10 <__alt_data_end+0xfc004b10>
 8004d24:	88c00054 	ori	r3,r17,1
 8004d28:	80c00115 	stw	r3,4(r16)
 8004d2c:	8463883a 	add	r17,r16,r17
 8004d30:	10800054 	ori	r2,r2,1
 8004d34:	9c400215 	stw	r17,8(r19)
 8004d38:	88800115 	stw	r2,4(r17)
 8004d3c:	9009883a 	mov	r4,r18
 8004d40:	800be640 	call	800be64 <__malloc_unlock>
 8004d44:	80800204 	addi	r2,r16,8
 8004d48:	003f7106 	br	8004b10 <__alt_data_end+0xfc004b10>
 8004d4c:	00c00504 	movi	r3,20
 8004d50:	18804a2e 	bgeu	r3,r2,8004e7c <_malloc_r+0x610>
 8004d54:	00c01504 	movi	r3,84
 8004d58:	18806e36 	bltu	r3,r2,8004f14 <_malloc_r+0x6a8>
 8004d5c:	8804d33a 	srli	r2,r17,12
 8004d60:	12001bc4 	addi	r8,r2,111
 8004d64:	11c01b84 	addi	r7,r2,110
 8004d68:	4209883a 	add	r4,r8,r8
 8004d6c:	003edd06 	br	80048e4 <__alt_data_end+0xfc0048e4>
 8004d70:	3804d27a 	srli	r2,r7,9
 8004d74:	00c00104 	movi	r3,4
 8004d78:	1880442e 	bgeu	r3,r2,8004e8c <_malloc_r+0x620>
 8004d7c:	00c00504 	movi	r3,20
 8004d80:	18808136 	bltu	r3,r2,8004f88 <_malloc_r+0x71c>
 8004d84:	11401704 	addi	r5,r2,92
 8004d88:	10c016c4 	addi	r3,r2,91
 8004d8c:	294b883a 	add	r5,r5,r5
 8004d90:	294b883a 	add	r5,r5,r5
 8004d94:	294b883a 	add	r5,r5,r5
 8004d98:	994b883a 	add	r5,r19,r5
 8004d9c:	28800017 	ldw	r2,0(r5)
 8004da0:	01820074 	movhi	r6,2049
 8004da4:	297ffe04 	addi	r5,r5,-8
 8004da8:	31ba7a04 	addi	r6,r6,-5656
 8004dac:	28806526 	beq	r5,r2,8004f44 <_malloc_r+0x6d8>
 8004db0:	01bfff04 	movi	r6,-4
 8004db4:	10c00117 	ldw	r3,4(r2)
 8004db8:	1986703a 	and	r3,r3,r6
 8004dbc:	38c0022e 	bgeu	r7,r3,8004dc8 <_malloc_r+0x55c>
 8004dc0:	10800217 	ldw	r2,8(r2)
 8004dc4:	28bffb1e 	bne	r5,r2,8004db4 <__alt_data_end+0xfc004db4>
 8004dc8:	11400317 	ldw	r5,12(r2)
 8004dcc:	98c00117 	ldw	r3,4(r19)
 8004dd0:	81400315 	stw	r5,12(r16)
 8004dd4:	80800215 	stw	r2,8(r16)
 8004dd8:	2c000215 	stw	r16,8(r5)
 8004ddc:	14000315 	stw	r16,12(r2)
 8004de0:	003ef806 	br	80049c4 <__alt_data_end+0xfc0049c4>
 8004de4:	88c00054 	ori	r3,r17,1
 8004de8:	80c00115 	stw	r3,4(r16)
 8004dec:	8463883a 	add	r17,r16,r17
 8004df0:	34400515 	stw	r17,20(r6)
 8004df4:	34400415 	stw	r17,16(r6)
 8004df8:	10c00054 	ori	r3,r2,1
 8004dfc:	8a000315 	stw	r8,12(r17)
 8004e00:	8a000215 	stw	r8,8(r17)
 8004e04:	88c00115 	stw	r3,4(r17)
 8004e08:	88a3883a 	add	r17,r17,r2
 8004e0c:	88800015 	stw	r2,0(r17)
 8004e10:	9009883a 	mov	r4,r18
 8004e14:	800be640 	call	800be64 <__malloc_unlock>
 8004e18:	80800204 	addi	r2,r16,8
 8004e1c:	003f3c06 	br	8004b10 <__alt_data_end+0xfc004b10>
 8004e20:	30c00117 	ldw	r3,4(r6)
 8004e24:	003ee706 	br	80049c4 <__alt_data_end+0xfc0049c4>
 8004e28:	5ac00044 	addi	r11,r11,1
 8004e2c:	588000cc 	andi	r2,r11,3
 8004e30:	31800204 	addi	r6,r6,8
 8004e34:	103efd1e 	bne	r2,zero,8004a2c <__alt_data_end+0xfc004a2c>
 8004e38:	00002406 	br	8004ecc <_malloc_r+0x660>
 8004e3c:	14000317 	ldw	r16,12(r2)
 8004e40:	143f251e 	bne	r2,r16,8004ad8 <__alt_data_end+0xfc004ad8>
 8004e44:	21000084 	addi	r4,r4,2
 8004e48:	003ebc06 	br	800493c <__alt_data_end+0xfc00493c>
 8004e4c:	8085883a 	add	r2,r16,r2
 8004e50:	10c00117 	ldw	r3,4(r2)
 8004e54:	81000317 	ldw	r4,12(r16)
 8004e58:	81400217 	ldw	r5,8(r16)
 8004e5c:	18c00054 	ori	r3,r3,1
 8004e60:	10c00115 	stw	r3,4(r2)
 8004e64:	29000315 	stw	r4,12(r5)
 8004e68:	21400215 	stw	r5,8(r4)
 8004e6c:	9009883a 	mov	r4,r18
 8004e70:	800be640 	call	800be64 <__malloc_unlock>
 8004e74:	80800204 	addi	r2,r16,8
 8004e78:	003f2506 	br	8004b10 <__alt_data_end+0xfc004b10>
 8004e7c:	12001704 	addi	r8,r2,92
 8004e80:	11c016c4 	addi	r7,r2,91
 8004e84:	4209883a 	add	r4,r8,r8
 8004e88:	003e9606 	br	80048e4 <__alt_data_end+0xfc0048e4>
 8004e8c:	3804d1ba 	srli	r2,r7,6
 8004e90:	11400e44 	addi	r5,r2,57
 8004e94:	10c00e04 	addi	r3,r2,56
 8004e98:	294b883a 	add	r5,r5,r5
 8004e9c:	003fbc06 	br	8004d90 <__alt_data_end+0xfc004d90>
 8004ea0:	84ff5926 	beq	r16,r19,8004c08 <__alt_data_end+0xfc004c08>
 8004ea4:	00820074 	movhi	r2,2049
 8004ea8:	10ba7a04 	addi	r2,r2,-5656
 8004eac:	14000217 	ldw	r16,8(r2)
 8004eb0:	00bfff04 	movi	r2,-4
 8004eb4:	80c00117 	ldw	r3,4(r16)
 8004eb8:	1886703a 	and	r3,r3,r2
 8004ebc:	003f9106 	br	8004d04 <__alt_data_end+0xfc004d04>
 8004ec0:	60800217 	ldw	r2,8(r12)
 8004ec4:	213fffc4 	addi	r4,r4,-1
 8004ec8:	1300651e 	bne	r2,r12,8005060 <_malloc_r+0x7f4>
 8004ecc:	208000cc 	andi	r2,r4,3
 8004ed0:	633ffe04 	addi	r12,r12,-8
 8004ed4:	103ffa1e 	bne	r2,zero,8004ec0 <__alt_data_end+0xfc004ec0>
 8004ed8:	98800117 	ldw	r2,4(r19)
 8004edc:	0146303a 	nor	r3,zero,r5
 8004ee0:	1884703a 	and	r2,r3,r2
 8004ee4:	98800115 	stw	r2,4(r19)
 8004ee8:	294b883a 	add	r5,r5,r5
 8004eec:	117f2836 	bltu	r2,r5,8004b90 <__alt_data_end+0xfc004b90>
 8004ef0:	283f2726 	beq	r5,zero,8004b90 <__alt_data_end+0xfc004b90>
 8004ef4:	2886703a 	and	r3,r5,r2
 8004ef8:	5809883a 	mov	r4,r11
 8004efc:	183ec31e 	bne	r3,zero,8004a0c <__alt_data_end+0xfc004a0c>
 8004f00:	294b883a 	add	r5,r5,r5
 8004f04:	2886703a 	and	r3,r5,r2
 8004f08:	21000104 	addi	r4,r4,4
 8004f0c:	183ffc26 	beq	r3,zero,8004f00 <__alt_data_end+0xfc004f00>
 8004f10:	003ebe06 	br	8004a0c <__alt_data_end+0xfc004a0c>
 8004f14:	00c05504 	movi	r3,340
 8004f18:	18801236 	bltu	r3,r2,8004f64 <_malloc_r+0x6f8>
 8004f1c:	8804d3fa 	srli	r2,r17,15
 8004f20:	12001e04 	addi	r8,r2,120
 8004f24:	11c01dc4 	addi	r7,r2,119
 8004f28:	4209883a 	add	r4,r8,r8
 8004f2c:	003e6d06 	br	80048e4 <__alt_data_end+0xfc0048e4>
 8004f30:	00c40004 	movi	r3,4096
 8004f34:	003f4606 	br	8004c50 <__alt_data_end+0xfc004c50>
 8004f38:	00800044 	movi	r2,1
 8004f3c:	a0800115 	stw	r2,4(r20)
 8004f40:	003f7406 	br	8004d14 <__alt_data_end+0xfc004d14>
 8004f44:	1805d0ba 	srai	r2,r3,2
 8004f48:	01c00044 	movi	r7,1
 8004f4c:	30c00117 	ldw	r3,4(r6)
 8004f50:	388e983a 	sll	r7,r7,r2
 8004f54:	2805883a 	mov	r2,r5
 8004f58:	38c6b03a 	or	r3,r7,r3
 8004f5c:	30c00115 	stw	r3,4(r6)
 8004f60:	003f9b06 	br	8004dd0 <__alt_data_end+0xfc004dd0>
 8004f64:	00c15504 	movi	r3,1364
 8004f68:	18801a36 	bltu	r3,r2,8004fd4 <_malloc_r+0x768>
 8004f6c:	8804d4ba 	srli	r2,r17,18
 8004f70:	12001f44 	addi	r8,r2,125
 8004f74:	11c01f04 	addi	r7,r2,124
 8004f78:	4209883a 	add	r4,r8,r8
 8004f7c:	003e5906 	br	80048e4 <__alt_data_end+0xfc0048e4>
 8004f80:	ad400404 	addi	r21,r21,16
 8004f84:	003f1706 	br	8004be4 <__alt_data_end+0xfc004be4>
 8004f88:	00c01504 	movi	r3,84
 8004f8c:	18802336 	bltu	r3,r2,800501c <_malloc_r+0x7b0>
 8004f90:	3804d33a 	srli	r2,r7,12
 8004f94:	11401bc4 	addi	r5,r2,111
 8004f98:	10c01b84 	addi	r3,r2,110
 8004f9c:	294b883a 	add	r5,r5,r5
 8004fa0:	003f7b06 	br	8004d90 <__alt_data_end+0xfc004d90>
 8004fa4:	9c000217 	ldw	r16,8(r19)
 8004fa8:	00bfff04 	movi	r2,-4
 8004fac:	80c00117 	ldw	r3,4(r16)
 8004fb0:	1886703a 	and	r3,r3,r2
 8004fb4:	003f5306 	br	8004d04 <__alt_data_end+0xfc004d04>
 8004fb8:	3083ffcc 	andi	r2,r6,4095
 8004fbc:	103f181e 	bne	r2,zero,8004c20 <__alt_data_end+0xfc004c20>
 8004fc0:	99000217 	ldw	r4,8(r19)
 8004fc4:	b545883a 	add	r2,r22,r21
 8004fc8:	10800054 	ori	r2,r2,1
 8004fcc:	20800115 	stw	r2,4(r4)
 8004fd0:	003f3e06 	br	8004ccc <__alt_data_end+0xfc004ccc>
 8004fd4:	01003f84 	movi	r4,254
 8004fd8:	02001fc4 	movi	r8,127
 8004fdc:	01c01f84 	movi	r7,126
 8004fe0:	003e4006 	br	80048e4 <__alt_data_end+0xfc0048e4>
 8004fe4:	00820074 	movhi	r2,2049
 8004fe8:	10800204 	addi	r2,r2,8
 8004fec:	15000015 	stw	r20,0(r2)
 8004ff0:	003f1106 	br	8004c38 <__alt_data_end+0xfc004c38>
 8004ff4:	00800044 	movi	r2,1
 8004ff8:	002b883a 	mov	r21,zero
 8004ffc:	003f1f06 	br	8004c7c <__alt_data_end+0xfc004c7c>
 8005000:	81400204 	addi	r5,r16,8
 8005004:	9009883a 	mov	r4,r18
 8005008:	8007c700 	call	8007c70 <_free_r>
 800500c:	00820074 	movhi	r2,2049
 8005010:	10873304 	addi	r2,r2,7372
 8005014:	10c00017 	ldw	r3,0(r2)
 8005018:	003f2c06 	br	8004ccc <__alt_data_end+0xfc004ccc>
 800501c:	00c05504 	movi	r3,340
 8005020:	18800536 	bltu	r3,r2,8005038 <_malloc_r+0x7cc>
 8005024:	3804d3fa 	srli	r2,r7,15
 8005028:	11401e04 	addi	r5,r2,120
 800502c:	10c01dc4 	addi	r3,r2,119
 8005030:	294b883a 	add	r5,r5,r5
 8005034:	003f5606 	br	8004d90 <__alt_data_end+0xfc004d90>
 8005038:	00c15504 	movi	r3,1364
 800503c:	18800536 	bltu	r3,r2,8005054 <_malloc_r+0x7e8>
 8005040:	3804d4ba 	srli	r2,r7,18
 8005044:	11401f44 	addi	r5,r2,125
 8005048:	10c01f04 	addi	r3,r2,124
 800504c:	294b883a 	add	r5,r5,r5
 8005050:	003f4f06 	br	8004d90 <__alt_data_end+0xfc004d90>
 8005054:	01403f84 	movi	r5,254
 8005058:	00c01f84 	movi	r3,126
 800505c:	003f4c06 	br	8004d90 <__alt_data_end+0xfc004d90>
 8005060:	98800117 	ldw	r2,4(r19)
 8005064:	003fa006 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 8005068:	8808d0fa 	srli	r4,r17,3
 800506c:	20800044 	addi	r2,r4,1
 8005070:	1085883a 	add	r2,r2,r2
 8005074:	003e9006 	br	8004ab8 <__alt_data_end+0xfc004ab8>

08005078 <memchr>:
 8005078:	208000cc 	andi	r2,r4,3
 800507c:	280f883a 	mov	r7,r5
 8005080:	10003426 	beq	r2,zero,8005154 <memchr+0xdc>
 8005084:	30bfffc4 	addi	r2,r6,-1
 8005088:	30001a26 	beq	r6,zero,80050f4 <memchr+0x7c>
 800508c:	20c00003 	ldbu	r3,0(r4)
 8005090:	29803fcc 	andi	r6,r5,255
 8005094:	30c0051e 	bne	r6,r3,80050ac <memchr+0x34>
 8005098:	00001806 	br	80050fc <memchr+0x84>
 800509c:	10001526 	beq	r2,zero,80050f4 <memchr+0x7c>
 80050a0:	20c00003 	ldbu	r3,0(r4)
 80050a4:	10bfffc4 	addi	r2,r2,-1
 80050a8:	30c01426 	beq	r6,r3,80050fc <memchr+0x84>
 80050ac:	21000044 	addi	r4,r4,1
 80050b0:	20c000cc 	andi	r3,r4,3
 80050b4:	183ff91e 	bne	r3,zero,800509c <__alt_data_end+0xfc00509c>
 80050b8:	020000c4 	movi	r8,3
 80050bc:	40801136 	bltu	r8,r2,8005104 <memchr+0x8c>
 80050c0:	10000c26 	beq	r2,zero,80050f4 <memchr+0x7c>
 80050c4:	20c00003 	ldbu	r3,0(r4)
 80050c8:	29403fcc 	andi	r5,r5,255
 80050cc:	28c00b26 	beq	r5,r3,80050fc <memchr+0x84>
 80050d0:	20c00044 	addi	r3,r4,1
 80050d4:	39803fcc 	andi	r6,r7,255
 80050d8:	2089883a 	add	r4,r4,r2
 80050dc:	00000306 	br	80050ec <memchr+0x74>
 80050e0:	18c00044 	addi	r3,r3,1
 80050e4:	197fffc3 	ldbu	r5,-1(r3)
 80050e8:	31400526 	beq	r6,r5,8005100 <memchr+0x88>
 80050ec:	1805883a 	mov	r2,r3
 80050f0:	20fffb1e 	bne	r4,r3,80050e0 <__alt_data_end+0xfc0050e0>
 80050f4:	0005883a 	mov	r2,zero
 80050f8:	f800283a 	ret
 80050fc:	2005883a 	mov	r2,r4
 8005100:	f800283a 	ret
 8005104:	28c03fcc 	andi	r3,r5,255
 8005108:	1812923a 	slli	r9,r3,8
 800510c:	02ffbff4 	movhi	r11,65279
 8005110:	02a02074 	movhi	r10,32897
 8005114:	48d2b03a 	or	r9,r9,r3
 8005118:	4806943a 	slli	r3,r9,16
 800511c:	5affbfc4 	addi	r11,r11,-257
 8005120:	52a02004 	addi	r10,r10,-32640
 8005124:	48d2b03a 	or	r9,r9,r3
 8005128:	20c00017 	ldw	r3,0(r4)
 800512c:	48c6f03a 	xor	r3,r9,r3
 8005130:	1acd883a 	add	r6,r3,r11
 8005134:	00c6303a 	nor	r3,zero,r3
 8005138:	30c6703a 	and	r3,r6,r3
 800513c:	1a86703a 	and	r3,r3,r10
 8005140:	183fe01e 	bne	r3,zero,80050c4 <__alt_data_end+0xfc0050c4>
 8005144:	10bfff04 	addi	r2,r2,-4
 8005148:	21000104 	addi	r4,r4,4
 800514c:	40bff636 	bltu	r8,r2,8005128 <__alt_data_end+0xfc005128>
 8005150:	003fdb06 	br	80050c0 <__alt_data_end+0xfc0050c0>
 8005154:	3005883a 	mov	r2,r6
 8005158:	003fd706 	br	80050b8 <__alt_data_end+0xfc0050b8>

0800515c <memcpy>:
 800515c:	defffd04 	addi	sp,sp,-12
 8005160:	dfc00215 	stw	ra,8(sp)
 8005164:	dc400115 	stw	r17,4(sp)
 8005168:	dc000015 	stw	r16,0(sp)
 800516c:	00c003c4 	movi	r3,15
 8005170:	2005883a 	mov	r2,r4
 8005174:	1980452e 	bgeu	r3,r6,800528c <memcpy+0x130>
 8005178:	2906b03a 	or	r3,r5,r4
 800517c:	18c000cc 	andi	r3,r3,3
 8005180:	1800441e 	bne	r3,zero,8005294 <memcpy+0x138>
 8005184:	347ffc04 	addi	r17,r6,-16
 8005188:	8822d13a 	srli	r17,r17,4
 800518c:	28c00104 	addi	r3,r5,4
 8005190:	23400104 	addi	r13,r4,4
 8005194:	8820913a 	slli	r16,r17,4
 8005198:	2b000204 	addi	r12,r5,8
 800519c:	22c00204 	addi	r11,r4,8
 80051a0:	84000504 	addi	r16,r16,20
 80051a4:	2a800304 	addi	r10,r5,12
 80051a8:	22400304 	addi	r9,r4,12
 80051ac:	2c21883a 	add	r16,r5,r16
 80051b0:	2811883a 	mov	r8,r5
 80051b4:	200f883a 	mov	r7,r4
 80051b8:	41000017 	ldw	r4,0(r8)
 80051bc:	1fc00017 	ldw	ra,0(r3)
 80051c0:	63c00017 	ldw	r15,0(r12)
 80051c4:	39000015 	stw	r4,0(r7)
 80051c8:	53800017 	ldw	r14,0(r10)
 80051cc:	6fc00015 	stw	ra,0(r13)
 80051d0:	5bc00015 	stw	r15,0(r11)
 80051d4:	4b800015 	stw	r14,0(r9)
 80051d8:	18c00404 	addi	r3,r3,16
 80051dc:	39c00404 	addi	r7,r7,16
 80051e0:	42000404 	addi	r8,r8,16
 80051e4:	6b400404 	addi	r13,r13,16
 80051e8:	63000404 	addi	r12,r12,16
 80051ec:	5ac00404 	addi	r11,r11,16
 80051f0:	52800404 	addi	r10,r10,16
 80051f4:	4a400404 	addi	r9,r9,16
 80051f8:	1c3fef1e 	bne	r3,r16,80051b8 <__alt_data_end+0xfc0051b8>
 80051fc:	89c00044 	addi	r7,r17,1
 8005200:	380e913a 	slli	r7,r7,4
 8005204:	310003cc 	andi	r4,r6,15
 8005208:	02c000c4 	movi	r11,3
 800520c:	11c7883a 	add	r3,r2,r7
 8005210:	29cb883a 	add	r5,r5,r7
 8005214:	5900212e 	bgeu	r11,r4,800529c <memcpy+0x140>
 8005218:	1813883a 	mov	r9,r3
 800521c:	2811883a 	mov	r8,r5
 8005220:	200f883a 	mov	r7,r4
 8005224:	42800017 	ldw	r10,0(r8)
 8005228:	4a400104 	addi	r9,r9,4
 800522c:	39ffff04 	addi	r7,r7,-4
 8005230:	4abfff15 	stw	r10,-4(r9)
 8005234:	42000104 	addi	r8,r8,4
 8005238:	59fffa36 	bltu	r11,r7,8005224 <__alt_data_end+0xfc005224>
 800523c:	213fff04 	addi	r4,r4,-4
 8005240:	2008d0ba 	srli	r4,r4,2
 8005244:	318000cc 	andi	r6,r6,3
 8005248:	21000044 	addi	r4,r4,1
 800524c:	2109883a 	add	r4,r4,r4
 8005250:	2109883a 	add	r4,r4,r4
 8005254:	1907883a 	add	r3,r3,r4
 8005258:	290b883a 	add	r5,r5,r4
 800525c:	30000626 	beq	r6,zero,8005278 <memcpy+0x11c>
 8005260:	198d883a 	add	r6,r3,r6
 8005264:	29c00003 	ldbu	r7,0(r5)
 8005268:	18c00044 	addi	r3,r3,1
 800526c:	29400044 	addi	r5,r5,1
 8005270:	19ffffc5 	stb	r7,-1(r3)
 8005274:	19bffb1e 	bne	r3,r6,8005264 <__alt_data_end+0xfc005264>
 8005278:	dfc00217 	ldw	ra,8(sp)
 800527c:	dc400117 	ldw	r17,4(sp)
 8005280:	dc000017 	ldw	r16,0(sp)
 8005284:	dec00304 	addi	sp,sp,12
 8005288:	f800283a 	ret
 800528c:	2007883a 	mov	r3,r4
 8005290:	003ff206 	br	800525c <__alt_data_end+0xfc00525c>
 8005294:	2007883a 	mov	r3,r4
 8005298:	003ff106 	br	8005260 <__alt_data_end+0xfc005260>
 800529c:	200d883a 	mov	r6,r4
 80052a0:	003fee06 	br	800525c <__alt_data_end+0xfc00525c>

080052a4 <_Balloc>:
 80052a4:	20801317 	ldw	r2,76(r4)
 80052a8:	defffc04 	addi	sp,sp,-16
 80052ac:	dc400115 	stw	r17,4(sp)
 80052b0:	dc000015 	stw	r16,0(sp)
 80052b4:	dfc00315 	stw	ra,12(sp)
 80052b8:	dc800215 	stw	r18,8(sp)
 80052bc:	2023883a 	mov	r17,r4
 80052c0:	2821883a 	mov	r16,r5
 80052c4:	10000f26 	beq	r2,zero,8005304 <_Balloc+0x60>
 80052c8:	8407883a 	add	r3,r16,r16
 80052cc:	18c7883a 	add	r3,r3,r3
 80052d0:	10c7883a 	add	r3,r2,r3
 80052d4:	18800017 	ldw	r2,0(r3)
 80052d8:	10001126 	beq	r2,zero,8005320 <_Balloc+0x7c>
 80052dc:	11000017 	ldw	r4,0(r2)
 80052e0:	19000015 	stw	r4,0(r3)
 80052e4:	10000415 	stw	zero,16(r2)
 80052e8:	10000315 	stw	zero,12(r2)
 80052ec:	dfc00317 	ldw	ra,12(sp)
 80052f0:	dc800217 	ldw	r18,8(sp)
 80052f4:	dc400117 	ldw	r17,4(sp)
 80052f8:	dc000017 	ldw	r16,0(sp)
 80052fc:	dec00404 	addi	sp,sp,16
 8005300:	f800283a 	ret
 8005304:	01800844 	movi	r6,33
 8005308:	01400104 	movi	r5,4
 800530c:	8007a700 	call	8007a70 <_calloc_r>
 8005310:	88801315 	stw	r2,76(r17)
 8005314:	103fec1e 	bne	r2,zero,80052c8 <__alt_data_end+0xfc0052c8>
 8005318:	0005883a 	mov	r2,zero
 800531c:	003ff306 	br	80052ec <__alt_data_end+0xfc0052ec>
 8005320:	01400044 	movi	r5,1
 8005324:	2c24983a 	sll	r18,r5,r16
 8005328:	8809883a 	mov	r4,r17
 800532c:	91800144 	addi	r6,r18,5
 8005330:	318d883a 	add	r6,r6,r6
 8005334:	318d883a 	add	r6,r6,r6
 8005338:	8007a700 	call	8007a70 <_calloc_r>
 800533c:	103ff626 	beq	r2,zero,8005318 <__alt_data_end+0xfc005318>
 8005340:	14000115 	stw	r16,4(r2)
 8005344:	14800215 	stw	r18,8(r2)
 8005348:	003fe606 	br	80052e4 <__alt_data_end+0xfc0052e4>

0800534c <_Bfree>:
 800534c:	28000826 	beq	r5,zero,8005370 <_Bfree+0x24>
 8005350:	28c00117 	ldw	r3,4(r5)
 8005354:	20801317 	ldw	r2,76(r4)
 8005358:	18c7883a 	add	r3,r3,r3
 800535c:	18c7883a 	add	r3,r3,r3
 8005360:	10c5883a 	add	r2,r2,r3
 8005364:	10c00017 	ldw	r3,0(r2)
 8005368:	28c00015 	stw	r3,0(r5)
 800536c:	11400015 	stw	r5,0(r2)
 8005370:	f800283a 	ret

08005374 <__multadd>:
 8005374:	defff704 	addi	sp,sp,-36
 8005378:	dc800215 	stw	r18,8(sp)
 800537c:	2c800417 	ldw	r18,16(r5)
 8005380:	dd800615 	stw	r22,24(sp)
 8005384:	dd400515 	stw	r21,20(sp)
 8005388:	dd000415 	stw	r20,16(sp)
 800538c:	dcc00315 	stw	r19,12(sp)
 8005390:	dc400115 	stw	r17,4(sp)
 8005394:	dc000015 	stw	r16,0(sp)
 8005398:	dfc00815 	stw	ra,32(sp)
 800539c:	ddc00715 	stw	r23,28(sp)
 80053a0:	2827883a 	mov	r19,r5
 80053a4:	2029883a 	mov	r20,r4
 80053a8:	3023883a 	mov	r17,r6
 80053ac:	3821883a 	mov	r16,r7
 80053b0:	2d400504 	addi	r21,r5,20
 80053b4:	002d883a 	mov	r22,zero
 80053b8:	adc00017 	ldw	r23,0(r21)
 80053bc:	880b883a 	mov	r5,r17
 80053c0:	ad400104 	addi	r21,r21,4
 80053c4:	b93fffcc 	andi	r4,r23,65535
 80053c8:	8000a240 	call	8000a24 <__mulsi3>
 80053cc:	b808d43a 	srli	r4,r23,16
 80053d0:	880b883a 	mov	r5,r17
 80053d4:	1421883a 	add	r16,r2,r16
 80053d8:	8000a240 	call	8000a24 <__mulsi3>
 80053dc:	800ed43a 	srli	r7,r16,16
 80053e0:	80ffffcc 	andi	r3,r16,65535
 80053e4:	b5800044 	addi	r22,r22,1
 80053e8:	11c5883a 	add	r2,r2,r7
 80053ec:	100e943a 	slli	r7,r2,16
 80053f0:	1020d43a 	srli	r16,r2,16
 80053f4:	38c7883a 	add	r3,r7,r3
 80053f8:	a8ffff15 	stw	r3,-4(r21)
 80053fc:	b4bfee16 	blt	r22,r18,80053b8 <__alt_data_end+0xfc0053b8>
 8005400:	80000926 	beq	r16,zero,8005428 <__multadd+0xb4>
 8005404:	98800217 	ldw	r2,8(r19)
 8005408:	9080130e 	bge	r18,r2,8005458 <__multadd+0xe4>
 800540c:	90800144 	addi	r2,r18,5
 8005410:	1085883a 	add	r2,r2,r2
 8005414:	1085883a 	add	r2,r2,r2
 8005418:	9885883a 	add	r2,r19,r2
 800541c:	14000015 	stw	r16,0(r2)
 8005420:	94800044 	addi	r18,r18,1
 8005424:	9c800415 	stw	r18,16(r19)
 8005428:	9805883a 	mov	r2,r19
 800542c:	dfc00817 	ldw	ra,32(sp)
 8005430:	ddc00717 	ldw	r23,28(sp)
 8005434:	dd800617 	ldw	r22,24(sp)
 8005438:	dd400517 	ldw	r21,20(sp)
 800543c:	dd000417 	ldw	r20,16(sp)
 8005440:	dcc00317 	ldw	r19,12(sp)
 8005444:	dc800217 	ldw	r18,8(sp)
 8005448:	dc400117 	ldw	r17,4(sp)
 800544c:	dc000017 	ldw	r16,0(sp)
 8005450:	dec00904 	addi	sp,sp,36
 8005454:	f800283a 	ret
 8005458:	99400117 	ldw	r5,4(r19)
 800545c:	a009883a 	mov	r4,r20
 8005460:	29400044 	addi	r5,r5,1
 8005464:	80052a40 	call	80052a4 <_Balloc>
 8005468:	99800417 	ldw	r6,16(r19)
 800546c:	99400304 	addi	r5,r19,12
 8005470:	11000304 	addi	r4,r2,12
 8005474:	31800084 	addi	r6,r6,2
 8005478:	318d883a 	add	r6,r6,r6
 800547c:	318d883a 	add	r6,r6,r6
 8005480:	1023883a 	mov	r17,r2
 8005484:	800515c0 	call	800515c <memcpy>
 8005488:	98000a26 	beq	r19,zero,80054b4 <__multadd+0x140>
 800548c:	98c00117 	ldw	r3,4(r19)
 8005490:	a0801317 	ldw	r2,76(r20)
 8005494:	18c7883a 	add	r3,r3,r3
 8005498:	18c7883a 	add	r3,r3,r3
 800549c:	10c5883a 	add	r2,r2,r3
 80054a0:	10c00017 	ldw	r3,0(r2)
 80054a4:	98c00015 	stw	r3,0(r19)
 80054a8:	14c00015 	stw	r19,0(r2)
 80054ac:	8827883a 	mov	r19,r17
 80054b0:	003fd606 	br	800540c <__alt_data_end+0xfc00540c>
 80054b4:	8827883a 	mov	r19,r17
 80054b8:	003fd406 	br	800540c <__alt_data_end+0xfc00540c>

080054bc <__s2b>:
 80054bc:	defff904 	addi	sp,sp,-28
 80054c0:	dc400115 	stw	r17,4(sp)
 80054c4:	dc000015 	stw	r16,0(sp)
 80054c8:	2023883a 	mov	r17,r4
 80054cc:	2821883a 	mov	r16,r5
 80054d0:	39000204 	addi	r4,r7,8
 80054d4:	01400244 	movi	r5,9
 80054d8:	dcc00315 	stw	r19,12(sp)
 80054dc:	dc800215 	stw	r18,8(sp)
 80054e0:	dfc00615 	stw	ra,24(sp)
 80054e4:	dd400515 	stw	r21,20(sp)
 80054e8:	dd000415 	stw	r20,16(sp)
 80054ec:	3825883a 	mov	r18,r7
 80054f0:	3027883a 	mov	r19,r6
 80054f4:	80008700 	call	8000870 <__divsi3>
 80054f8:	00c00044 	movi	r3,1
 80054fc:	000b883a 	mov	r5,zero
 8005500:	1880030e 	bge	r3,r2,8005510 <__s2b+0x54>
 8005504:	18c7883a 	add	r3,r3,r3
 8005508:	29400044 	addi	r5,r5,1
 800550c:	18bffd16 	blt	r3,r2,8005504 <__alt_data_end+0xfc005504>
 8005510:	8809883a 	mov	r4,r17
 8005514:	80052a40 	call	80052a4 <_Balloc>
 8005518:	d8c00717 	ldw	r3,28(sp)
 800551c:	10c00515 	stw	r3,20(r2)
 8005520:	00c00044 	movi	r3,1
 8005524:	10c00415 	stw	r3,16(r2)
 8005528:	00c00244 	movi	r3,9
 800552c:	1cc0210e 	bge	r3,r19,80055b4 <__s2b+0xf8>
 8005530:	80eb883a 	add	r21,r16,r3
 8005534:	a829883a 	mov	r20,r21
 8005538:	84e1883a 	add	r16,r16,r19
 800553c:	a1c00007 	ldb	r7,0(r20)
 8005540:	01800284 	movi	r6,10
 8005544:	a5000044 	addi	r20,r20,1
 8005548:	100b883a 	mov	r5,r2
 800554c:	39fff404 	addi	r7,r7,-48
 8005550:	8809883a 	mov	r4,r17
 8005554:	80053740 	call	8005374 <__multadd>
 8005558:	a43ff81e 	bne	r20,r16,800553c <__alt_data_end+0xfc00553c>
 800555c:	ace1883a 	add	r16,r21,r19
 8005560:	843ffe04 	addi	r16,r16,-8
 8005564:	9c800a0e 	bge	r19,r18,8005590 <__s2b+0xd4>
 8005568:	94e5c83a 	sub	r18,r18,r19
 800556c:	84a5883a 	add	r18,r16,r18
 8005570:	81c00007 	ldb	r7,0(r16)
 8005574:	01800284 	movi	r6,10
 8005578:	84000044 	addi	r16,r16,1
 800557c:	100b883a 	mov	r5,r2
 8005580:	39fff404 	addi	r7,r7,-48
 8005584:	8809883a 	mov	r4,r17
 8005588:	80053740 	call	8005374 <__multadd>
 800558c:	84bff81e 	bne	r16,r18,8005570 <__alt_data_end+0xfc005570>
 8005590:	dfc00617 	ldw	ra,24(sp)
 8005594:	dd400517 	ldw	r21,20(sp)
 8005598:	dd000417 	ldw	r20,16(sp)
 800559c:	dcc00317 	ldw	r19,12(sp)
 80055a0:	dc800217 	ldw	r18,8(sp)
 80055a4:	dc400117 	ldw	r17,4(sp)
 80055a8:	dc000017 	ldw	r16,0(sp)
 80055ac:	dec00704 	addi	sp,sp,28
 80055b0:	f800283a 	ret
 80055b4:	84000284 	addi	r16,r16,10
 80055b8:	1827883a 	mov	r19,r3
 80055bc:	003fe906 	br	8005564 <__alt_data_end+0xfc005564>

080055c0 <__hi0bits>:
 80055c0:	20bfffec 	andhi	r2,r4,65535
 80055c4:	1000141e 	bne	r2,zero,8005618 <__hi0bits+0x58>
 80055c8:	2008943a 	slli	r4,r4,16
 80055cc:	00800404 	movi	r2,16
 80055d0:	20ffc02c 	andhi	r3,r4,65280
 80055d4:	1800021e 	bne	r3,zero,80055e0 <__hi0bits+0x20>
 80055d8:	2008923a 	slli	r4,r4,8
 80055dc:	10800204 	addi	r2,r2,8
 80055e0:	20fc002c 	andhi	r3,r4,61440
 80055e4:	1800021e 	bne	r3,zero,80055f0 <__hi0bits+0x30>
 80055e8:	2008913a 	slli	r4,r4,4
 80055ec:	10800104 	addi	r2,r2,4
 80055f0:	20f0002c 	andhi	r3,r4,49152
 80055f4:	1800031e 	bne	r3,zero,8005604 <__hi0bits+0x44>
 80055f8:	2109883a 	add	r4,r4,r4
 80055fc:	10800084 	addi	r2,r2,2
 8005600:	2109883a 	add	r4,r4,r4
 8005604:	20000316 	blt	r4,zero,8005614 <__hi0bits+0x54>
 8005608:	2110002c 	andhi	r4,r4,16384
 800560c:	2000041e 	bne	r4,zero,8005620 <__hi0bits+0x60>
 8005610:	00800804 	movi	r2,32
 8005614:	f800283a 	ret
 8005618:	0005883a 	mov	r2,zero
 800561c:	003fec06 	br	80055d0 <__alt_data_end+0xfc0055d0>
 8005620:	10800044 	addi	r2,r2,1
 8005624:	f800283a 	ret

08005628 <__lo0bits>:
 8005628:	20c00017 	ldw	r3,0(r4)
 800562c:	188001cc 	andi	r2,r3,7
 8005630:	10000826 	beq	r2,zero,8005654 <__lo0bits+0x2c>
 8005634:	1880004c 	andi	r2,r3,1
 8005638:	1000211e 	bne	r2,zero,80056c0 <__lo0bits+0x98>
 800563c:	1880008c 	andi	r2,r3,2
 8005640:	1000211e 	bne	r2,zero,80056c8 <__lo0bits+0xa0>
 8005644:	1806d0ba 	srli	r3,r3,2
 8005648:	00800084 	movi	r2,2
 800564c:	20c00015 	stw	r3,0(r4)
 8005650:	f800283a 	ret
 8005654:	18bfffcc 	andi	r2,r3,65535
 8005658:	10001326 	beq	r2,zero,80056a8 <__lo0bits+0x80>
 800565c:	0005883a 	mov	r2,zero
 8005660:	19403fcc 	andi	r5,r3,255
 8005664:	2800021e 	bne	r5,zero,8005670 <__lo0bits+0x48>
 8005668:	1806d23a 	srli	r3,r3,8
 800566c:	10800204 	addi	r2,r2,8
 8005670:	194003cc 	andi	r5,r3,15
 8005674:	2800021e 	bne	r5,zero,8005680 <__lo0bits+0x58>
 8005678:	1806d13a 	srli	r3,r3,4
 800567c:	10800104 	addi	r2,r2,4
 8005680:	194000cc 	andi	r5,r3,3
 8005684:	2800021e 	bne	r5,zero,8005690 <__lo0bits+0x68>
 8005688:	1806d0ba 	srli	r3,r3,2
 800568c:	10800084 	addi	r2,r2,2
 8005690:	1940004c 	andi	r5,r3,1
 8005694:	2800081e 	bne	r5,zero,80056b8 <__lo0bits+0x90>
 8005698:	1806d07a 	srli	r3,r3,1
 800569c:	1800051e 	bne	r3,zero,80056b4 <__lo0bits+0x8c>
 80056a0:	00800804 	movi	r2,32
 80056a4:	f800283a 	ret
 80056a8:	1806d43a 	srli	r3,r3,16
 80056ac:	00800404 	movi	r2,16
 80056b0:	003feb06 	br	8005660 <__alt_data_end+0xfc005660>
 80056b4:	10800044 	addi	r2,r2,1
 80056b8:	20c00015 	stw	r3,0(r4)
 80056bc:	f800283a 	ret
 80056c0:	0005883a 	mov	r2,zero
 80056c4:	f800283a 	ret
 80056c8:	1806d07a 	srli	r3,r3,1
 80056cc:	00800044 	movi	r2,1
 80056d0:	20c00015 	stw	r3,0(r4)
 80056d4:	f800283a 	ret

080056d8 <__i2b>:
 80056d8:	defffd04 	addi	sp,sp,-12
 80056dc:	dc000015 	stw	r16,0(sp)
 80056e0:	04000044 	movi	r16,1
 80056e4:	dc400115 	stw	r17,4(sp)
 80056e8:	2823883a 	mov	r17,r5
 80056ec:	800b883a 	mov	r5,r16
 80056f0:	dfc00215 	stw	ra,8(sp)
 80056f4:	80052a40 	call	80052a4 <_Balloc>
 80056f8:	14400515 	stw	r17,20(r2)
 80056fc:	14000415 	stw	r16,16(r2)
 8005700:	dfc00217 	ldw	ra,8(sp)
 8005704:	dc400117 	ldw	r17,4(sp)
 8005708:	dc000017 	ldw	r16,0(sp)
 800570c:	dec00304 	addi	sp,sp,12
 8005710:	f800283a 	ret

08005714 <__multiply>:
 8005714:	deffef04 	addi	sp,sp,-68
 8005718:	dc400815 	stw	r17,32(sp)
 800571c:	dc000715 	stw	r16,28(sp)
 8005720:	34400417 	ldw	r17,16(r6)
 8005724:	2c000417 	ldw	r16,16(r5)
 8005728:	dd800d15 	stw	r22,52(sp)
 800572c:	dc800915 	stw	r18,36(sp)
 8005730:	dfc01015 	stw	ra,64(sp)
 8005734:	df000f15 	stw	fp,60(sp)
 8005738:	ddc00e15 	stw	r23,56(sp)
 800573c:	dd400c15 	stw	r21,48(sp)
 8005740:	dd000b15 	stw	r20,44(sp)
 8005744:	dcc00a15 	stw	r19,40(sp)
 8005748:	2825883a 	mov	r18,r5
 800574c:	302d883a 	mov	r22,r6
 8005750:	8440050e 	bge	r16,r17,8005768 <__multiply+0x54>
 8005754:	8007883a 	mov	r3,r16
 8005758:	3025883a 	mov	r18,r6
 800575c:	8821883a 	mov	r16,r17
 8005760:	282d883a 	mov	r22,r5
 8005764:	1823883a 	mov	r17,r3
 8005768:	90800217 	ldw	r2,8(r18)
 800576c:	8447883a 	add	r3,r16,r17
 8005770:	d8c00215 	stw	r3,8(sp)
 8005774:	91400117 	ldw	r5,4(r18)
 8005778:	10c0010e 	bge	r2,r3,8005780 <__multiply+0x6c>
 800577c:	29400044 	addi	r5,r5,1
 8005780:	80052a40 	call	80052a4 <_Balloc>
 8005784:	d8c00217 	ldw	r3,8(sp)
 8005788:	d8800615 	stw	r2,24(sp)
 800578c:	18eb883a 	add	r21,r3,r3
 8005790:	ad6b883a 	add	r21,r21,r21
 8005794:	10c00504 	addi	r3,r2,20
 8005798:	1d6b883a 	add	r21,r3,r21
 800579c:	d8c00115 	stw	r3,4(sp)
 80057a0:	dd400315 	stw	r21,12(sp)
 80057a4:	1805883a 	mov	r2,r3
 80057a8:	1d40042e 	bgeu	r3,r21,80057bc <__multiply+0xa8>
 80057ac:	d8c00317 	ldw	r3,12(sp)
 80057b0:	10000015 	stw	zero,0(r2)
 80057b4:	10800104 	addi	r2,r2,4
 80057b8:	10fffc36 	bltu	r2,r3,80057ac <__alt_data_end+0xfc0057ac>
 80057bc:	8c63883a 	add	r17,r17,r17
 80057c0:	b5800504 	addi	r22,r22,20
 80057c4:	8c63883a 	add	r17,r17,r17
 80057c8:	94800504 	addi	r18,r18,20
 80057cc:	8421883a 	add	r16,r16,r16
 80057d0:	b463883a 	add	r17,r22,r17
 80057d4:	8421883a 	add	r16,r16,r16
 80057d8:	dd800015 	stw	r22,0(sp)
 80057dc:	dc800415 	stw	r18,16(sp)
 80057e0:	dc400515 	stw	r17,20(sp)
 80057e4:	9429883a 	add	r20,r18,r16
 80057e8:	b4404f2e 	bgeu	r22,r17,8005928 <__multiply+0x214>
 80057ec:	d8c00017 	ldw	r3,0(sp)
 80057f0:	1c800017 	ldw	r18,0(r3)
 80057f4:	947fffcc 	andi	r17,r18,65535
 80057f8:	88001e26 	beq	r17,zero,8005874 <__multiply+0x160>
 80057fc:	dd800117 	ldw	r22,4(sp)
 8005800:	dd400417 	ldw	r21,16(sp)
 8005804:	0027883a 	mov	r19,zero
 8005808:	ac800017 	ldw	r18,0(r21)
 800580c:	b4000017 	ldw	r16,0(r22)
 8005810:	880b883a 	mov	r5,r17
 8005814:	913fffcc 	andi	r4,r18,65535
 8005818:	8000a240 	call	8000a24 <__mulsi3>
 800581c:	9008d43a 	srli	r4,r18,16
 8005820:	84bfffcc 	andi	r18,r16,65535
 8005824:	1485883a 	add	r2,r2,r18
 8005828:	14e5883a 	add	r18,r2,r19
 800582c:	8020d43a 	srli	r16,r16,16
 8005830:	9026d43a 	srli	r19,r18,16
 8005834:	880b883a 	mov	r5,r17
 8005838:	8000a240 	call	8000a24 <__mulsi3>
 800583c:	1405883a 	add	r2,r2,r16
 8005840:	14e1883a 	add	r16,r2,r19
 8005844:	90ffffcc 	andi	r3,r18,65535
 8005848:	8024943a 	slli	r18,r16,16
 800584c:	ad400104 	addi	r21,r21,4
 8005850:	b005883a 	mov	r2,r22
 8005854:	90c6b03a 	or	r3,r18,r3
 8005858:	b0c00015 	stw	r3,0(r22)
 800585c:	8026d43a 	srli	r19,r16,16
 8005860:	b5800104 	addi	r22,r22,4
 8005864:	ad3fe836 	bltu	r21,r20,8005808 <__alt_data_end+0xfc005808>
 8005868:	d8c00017 	ldw	r3,0(sp)
 800586c:	14c00115 	stw	r19,4(r2)
 8005870:	1c800017 	ldw	r18,0(r3)
 8005874:	9024d43a 	srli	r18,r18,16
 8005878:	90002226 	beq	r18,zero,8005904 <__multiply+0x1f0>
 800587c:	d8c00117 	ldw	r3,4(sp)
 8005880:	dd800417 	ldw	r22,16(sp)
 8005884:	002f883a 	mov	r23,zero
 8005888:	1f000017 	ldw	fp,0(r3)
 800588c:	1823883a 	mov	r17,r3
 8005890:	182b883a 	mov	r21,r3
 8005894:	e021883a 	mov	r16,fp
 8005898:	00000106 	br	80058a0 <__multiply+0x18c>
 800589c:	982b883a 	mov	r21,r19
 80058a0:	b100000b 	ldhu	r4,0(r22)
 80058a4:	8020d43a 	srli	r16,r16,16
 80058a8:	900b883a 	mov	r5,r18
 80058ac:	8000a240 	call	8000a24 <__mulsi3>
 80058b0:	1405883a 	add	r2,r2,r16
 80058b4:	15ef883a 	add	r23,r2,r23
 80058b8:	b804943a 	slli	r2,r23,16
 80058bc:	e0ffffcc 	andi	r3,fp,65535
 80058c0:	8c400104 	addi	r17,r17,4
 80058c4:	10c6b03a 	or	r3,r2,r3
 80058c8:	88ffff15 	stw	r3,-4(r17)
 80058cc:	b5800104 	addi	r22,r22,4
 80058d0:	b13fff17 	ldw	r4,-4(r22)
 80058d4:	acc00104 	addi	r19,r21,4
 80058d8:	900b883a 	mov	r5,r18
 80058dc:	2008d43a 	srli	r4,r4,16
 80058e0:	9c000017 	ldw	r16,0(r19)
 80058e4:	8000a240 	call	8000a24 <__mulsi3>
 80058e8:	b806d43a 	srli	r3,r23,16
 80058ec:	813fffcc 	andi	r4,r16,65535
 80058f0:	1105883a 	add	r2,r2,r4
 80058f4:	10f9883a 	add	fp,r2,r3
 80058f8:	e02ed43a 	srli	r23,fp,16
 80058fc:	b53fe736 	bltu	r22,r20,800589c <__alt_data_end+0xfc00589c>
 8005900:	af000115 	stw	fp,4(r21)
 8005904:	d8c00017 	ldw	r3,0(sp)
 8005908:	d9000517 	ldw	r4,20(sp)
 800590c:	18c00104 	addi	r3,r3,4
 8005910:	d8c00015 	stw	r3,0(sp)
 8005914:	d8c00117 	ldw	r3,4(sp)
 8005918:	18c00104 	addi	r3,r3,4
 800591c:	d8c00115 	stw	r3,4(sp)
 8005920:	d8c00017 	ldw	r3,0(sp)
 8005924:	193fb136 	bltu	r3,r4,80057ec <__alt_data_end+0xfc0057ec>
 8005928:	d8c00217 	ldw	r3,8(sp)
 800592c:	00c00c0e 	bge	zero,r3,8005960 <__multiply+0x24c>
 8005930:	d8c00317 	ldw	r3,12(sp)
 8005934:	18bfff17 	ldw	r2,-4(r3)
 8005938:	1d7fff04 	addi	r21,r3,-4
 800593c:	10000326 	beq	r2,zero,800594c <__multiply+0x238>
 8005940:	00000706 	br	8005960 <__multiply+0x24c>
 8005944:	a8800017 	ldw	r2,0(r21)
 8005948:	1000051e 	bne	r2,zero,8005960 <__multiply+0x24c>
 800594c:	d8c00217 	ldw	r3,8(sp)
 8005950:	ad7fff04 	addi	r21,r21,-4
 8005954:	18ffffc4 	addi	r3,r3,-1
 8005958:	d8c00215 	stw	r3,8(sp)
 800595c:	183ff91e 	bne	r3,zero,8005944 <__alt_data_end+0xfc005944>
 8005960:	d8c00617 	ldw	r3,24(sp)
 8005964:	d9000217 	ldw	r4,8(sp)
 8005968:	1805883a 	mov	r2,r3
 800596c:	19000415 	stw	r4,16(r3)
 8005970:	dfc01017 	ldw	ra,64(sp)
 8005974:	df000f17 	ldw	fp,60(sp)
 8005978:	ddc00e17 	ldw	r23,56(sp)
 800597c:	dd800d17 	ldw	r22,52(sp)
 8005980:	dd400c17 	ldw	r21,48(sp)
 8005984:	dd000b17 	ldw	r20,44(sp)
 8005988:	dcc00a17 	ldw	r19,40(sp)
 800598c:	dc800917 	ldw	r18,36(sp)
 8005990:	dc400817 	ldw	r17,32(sp)
 8005994:	dc000717 	ldw	r16,28(sp)
 8005998:	dec01104 	addi	sp,sp,68
 800599c:	f800283a 	ret

080059a0 <__pow5mult>:
 80059a0:	defffa04 	addi	sp,sp,-24
 80059a4:	dcc00315 	stw	r19,12(sp)
 80059a8:	dc000015 	stw	r16,0(sp)
 80059ac:	dfc00515 	stw	ra,20(sp)
 80059b0:	dd000415 	stw	r20,16(sp)
 80059b4:	dc800215 	stw	r18,8(sp)
 80059b8:	dc400115 	stw	r17,4(sp)
 80059bc:	308000cc 	andi	r2,r6,3
 80059c0:	3021883a 	mov	r16,r6
 80059c4:	2027883a 	mov	r19,r4
 80059c8:	10002f1e 	bne	r2,zero,8005a88 <__pow5mult+0xe8>
 80059cc:	2825883a 	mov	r18,r5
 80059d0:	8021d0ba 	srai	r16,r16,2
 80059d4:	80001a26 	beq	r16,zero,8005a40 <__pow5mult+0xa0>
 80059d8:	9c401217 	ldw	r17,72(r19)
 80059dc:	8800061e 	bne	r17,zero,80059f8 <__pow5mult+0x58>
 80059e0:	00003406 	br	8005ab4 <__pow5mult+0x114>
 80059e4:	8021d07a 	srai	r16,r16,1
 80059e8:	80001526 	beq	r16,zero,8005a40 <__pow5mult+0xa0>
 80059ec:	88800017 	ldw	r2,0(r17)
 80059f0:	10001c26 	beq	r2,zero,8005a64 <__pow5mult+0xc4>
 80059f4:	1023883a 	mov	r17,r2
 80059f8:	8080004c 	andi	r2,r16,1
 80059fc:	103ff926 	beq	r2,zero,80059e4 <__alt_data_end+0xfc0059e4>
 8005a00:	880d883a 	mov	r6,r17
 8005a04:	900b883a 	mov	r5,r18
 8005a08:	9809883a 	mov	r4,r19
 8005a0c:	80057140 	call	8005714 <__multiply>
 8005a10:	90001b26 	beq	r18,zero,8005a80 <__pow5mult+0xe0>
 8005a14:	91000117 	ldw	r4,4(r18)
 8005a18:	98c01317 	ldw	r3,76(r19)
 8005a1c:	8021d07a 	srai	r16,r16,1
 8005a20:	2109883a 	add	r4,r4,r4
 8005a24:	2109883a 	add	r4,r4,r4
 8005a28:	1907883a 	add	r3,r3,r4
 8005a2c:	19000017 	ldw	r4,0(r3)
 8005a30:	91000015 	stw	r4,0(r18)
 8005a34:	1c800015 	stw	r18,0(r3)
 8005a38:	1025883a 	mov	r18,r2
 8005a3c:	803feb1e 	bne	r16,zero,80059ec <__alt_data_end+0xfc0059ec>
 8005a40:	9005883a 	mov	r2,r18
 8005a44:	dfc00517 	ldw	ra,20(sp)
 8005a48:	dd000417 	ldw	r20,16(sp)
 8005a4c:	dcc00317 	ldw	r19,12(sp)
 8005a50:	dc800217 	ldw	r18,8(sp)
 8005a54:	dc400117 	ldw	r17,4(sp)
 8005a58:	dc000017 	ldw	r16,0(sp)
 8005a5c:	dec00604 	addi	sp,sp,24
 8005a60:	f800283a 	ret
 8005a64:	880d883a 	mov	r6,r17
 8005a68:	880b883a 	mov	r5,r17
 8005a6c:	9809883a 	mov	r4,r19
 8005a70:	80057140 	call	8005714 <__multiply>
 8005a74:	88800015 	stw	r2,0(r17)
 8005a78:	10000015 	stw	zero,0(r2)
 8005a7c:	003fdd06 	br	80059f4 <__alt_data_end+0xfc0059f4>
 8005a80:	1025883a 	mov	r18,r2
 8005a84:	003fd706 	br	80059e4 <__alt_data_end+0xfc0059e4>
 8005a88:	10bfffc4 	addi	r2,r2,-1
 8005a8c:	1085883a 	add	r2,r2,r2
 8005a90:	00c20074 	movhi	r3,2049
 8005a94:	18f85b04 	addi	r3,r3,-7828
 8005a98:	1085883a 	add	r2,r2,r2
 8005a9c:	1885883a 	add	r2,r3,r2
 8005aa0:	11800017 	ldw	r6,0(r2)
 8005aa4:	000f883a 	mov	r7,zero
 8005aa8:	80053740 	call	8005374 <__multadd>
 8005aac:	1025883a 	mov	r18,r2
 8005ab0:	003fc706 	br	80059d0 <__alt_data_end+0xfc0059d0>
 8005ab4:	05000044 	movi	r20,1
 8005ab8:	a00b883a 	mov	r5,r20
 8005abc:	9809883a 	mov	r4,r19
 8005ac0:	80052a40 	call	80052a4 <_Balloc>
 8005ac4:	1023883a 	mov	r17,r2
 8005ac8:	00809c44 	movi	r2,625
 8005acc:	88800515 	stw	r2,20(r17)
 8005ad0:	8d000415 	stw	r20,16(r17)
 8005ad4:	9c401215 	stw	r17,72(r19)
 8005ad8:	88000015 	stw	zero,0(r17)
 8005adc:	003fc606 	br	80059f8 <__alt_data_end+0xfc0059f8>

08005ae0 <__lshift>:
 8005ae0:	defff904 	addi	sp,sp,-28
 8005ae4:	dd400515 	stw	r21,20(sp)
 8005ae8:	dcc00315 	stw	r19,12(sp)
 8005aec:	302bd17a 	srai	r21,r6,5
 8005af0:	2cc00417 	ldw	r19,16(r5)
 8005af4:	28800217 	ldw	r2,8(r5)
 8005af8:	dd000415 	stw	r20,16(sp)
 8005afc:	ace7883a 	add	r19,r21,r19
 8005b00:	dc800215 	stw	r18,8(sp)
 8005b04:	dc400115 	stw	r17,4(sp)
 8005b08:	dc000015 	stw	r16,0(sp)
 8005b0c:	dfc00615 	stw	ra,24(sp)
 8005b10:	9c000044 	addi	r16,r19,1
 8005b14:	2823883a 	mov	r17,r5
 8005b18:	3029883a 	mov	r20,r6
 8005b1c:	2025883a 	mov	r18,r4
 8005b20:	29400117 	ldw	r5,4(r5)
 8005b24:	1400030e 	bge	r2,r16,8005b34 <__lshift+0x54>
 8005b28:	1085883a 	add	r2,r2,r2
 8005b2c:	29400044 	addi	r5,r5,1
 8005b30:	143ffd16 	blt	r2,r16,8005b28 <__alt_data_end+0xfc005b28>
 8005b34:	9009883a 	mov	r4,r18
 8005b38:	80052a40 	call	80052a4 <_Balloc>
 8005b3c:	10c00504 	addi	r3,r2,20
 8005b40:	0540070e 	bge	zero,r21,8005b60 <__lshift+0x80>
 8005b44:	ad6b883a 	add	r21,r21,r21
 8005b48:	ad6b883a 	add	r21,r21,r21
 8005b4c:	1809883a 	mov	r4,r3
 8005b50:	1d47883a 	add	r3,r3,r21
 8005b54:	20000015 	stw	zero,0(r4)
 8005b58:	21000104 	addi	r4,r4,4
 8005b5c:	193ffd1e 	bne	r3,r4,8005b54 <__alt_data_end+0xfc005b54>
 8005b60:	8a000417 	ldw	r8,16(r17)
 8005b64:	89000504 	addi	r4,r17,20
 8005b68:	a18007cc 	andi	r6,r20,31
 8005b6c:	4211883a 	add	r8,r8,r8
 8005b70:	4211883a 	add	r8,r8,r8
 8005b74:	2211883a 	add	r8,r4,r8
 8005b78:	30002326 	beq	r6,zero,8005c08 <__lshift+0x128>
 8005b7c:	02400804 	movi	r9,32
 8005b80:	4993c83a 	sub	r9,r9,r6
 8005b84:	000b883a 	mov	r5,zero
 8005b88:	21c00017 	ldw	r7,0(r4)
 8005b8c:	1815883a 	mov	r10,r3
 8005b90:	18c00104 	addi	r3,r3,4
 8005b94:	398e983a 	sll	r7,r7,r6
 8005b98:	21000104 	addi	r4,r4,4
 8005b9c:	394ab03a 	or	r5,r7,r5
 8005ba0:	197fff15 	stw	r5,-4(r3)
 8005ba4:	217fff17 	ldw	r5,-4(r4)
 8005ba8:	2a4ad83a 	srl	r5,r5,r9
 8005bac:	223ff636 	bltu	r4,r8,8005b88 <__alt_data_end+0xfc005b88>
 8005bb0:	51400115 	stw	r5,4(r10)
 8005bb4:	28001a1e 	bne	r5,zero,8005c20 <__lshift+0x140>
 8005bb8:	843fffc4 	addi	r16,r16,-1
 8005bbc:	14000415 	stw	r16,16(r2)
 8005bc0:	88000826 	beq	r17,zero,8005be4 <__lshift+0x104>
 8005bc4:	89000117 	ldw	r4,4(r17)
 8005bc8:	90c01317 	ldw	r3,76(r18)
 8005bcc:	2109883a 	add	r4,r4,r4
 8005bd0:	2109883a 	add	r4,r4,r4
 8005bd4:	1907883a 	add	r3,r3,r4
 8005bd8:	19000017 	ldw	r4,0(r3)
 8005bdc:	89000015 	stw	r4,0(r17)
 8005be0:	1c400015 	stw	r17,0(r3)
 8005be4:	dfc00617 	ldw	ra,24(sp)
 8005be8:	dd400517 	ldw	r21,20(sp)
 8005bec:	dd000417 	ldw	r20,16(sp)
 8005bf0:	dcc00317 	ldw	r19,12(sp)
 8005bf4:	dc800217 	ldw	r18,8(sp)
 8005bf8:	dc400117 	ldw	r17,4(sp)
 8005bfc:	dc000017 	ldw	r16,0(sp)
 8005c00:	dec00704 	addi	sp,sp,28
 8005c04:	f800283a 	ret
 8005c08:	21400017 	ldw	r5,0(r4)
 8005c0c:	18c00104 	addi	r3,r3,4
 8005c10:	21000104 	addi	r4,r4,4
 8005c14:	197fff15 	stw	r5,-4(r3)
 8005c18:	223ffb36 	bltu	r4,r8,8005c08 <__alt_data_end+0xfc005c08>
 8005c1c:	003fe606 	br	8005bb8 <__alt_data_end+0xfc005bb8>
 8005c20:	9c000084 	addi	r16,r19,2
 8005c24:	003fe406 	br	8005bb8 <__alt_data_end+0xfc005bb8>

08005c28 <__mcmp>:
 8005c28:	20800417 	ldw	r2,16(r4)
 8005c2c:	28c00417 	ldw	r3,16(r5)
 8005c30:	10c5c83a 	sub	r2,r2,r3
 8005c34:	1000111e 	bne	r2,zero,8005c7c <__mcmp+0x54>
 8005c38:	18c7883a 	add	r3,r3,r3
 8005c3c:	18c7883a 	add	r3,r3,r3
 8005c40:	21000504 	addi	r4,r4,20
 8005c44:	29400504 	addi	r5,r5,20
 8005c48:	20c5883a 	add	r2,r4,r3
 8005c4c:	28cb883a 	add	r5,r5,r3
 8005c50:	00000106 	br	8005c58 <__mcmp+0x30>
 8005c54:	20800a2e 	bgeu	r4,r2,8005c80 <__mcmp+0x58>
 8005c58:	10bfff04 	addi	r2,r2,-4
 8005c5c:	297fff04 	addi	r5,r5,-4
 8005c60:	11800017 	ldw	r6,0(r2)
 8005c64:	28c00017 	ldw	r3,0(r5)
 8005c68:	30fffa26 	beq	r6,r3,8005c54 <__alt_data_end+0xfc005c54>
 8005c6c:	30c00236 	bltu	r6,r3,8005c78 <__mcmp+0x50>
 8005c70:	00800044 	movi	r2,1
 8005c74:	f800283a 	ret
 8005c78:	00bfffc4 	movi	r2,-1
 8005c7c:	f800283a 	ret
 8005c80:	0005883a 	mov	r2,zero
 8005c84:	f800283a 	ret

08005c88 <__mdiff>:
 8005c88:	28c00417 	ldw	r3,16(r5)
 8005c8c:	30800417 	ldw	r2,16(r6)
 8005c90:	defffa04 	addi	sp,sp,-24
 8005c94:	dcc00315 	stw	r19,12(sp)
 8005c98:	dc800215 	stw	r18,8(sp)
 8005c9c:	dfc00515 	stw	ra,20(sp)
 8005ca0:	dd000415 	stw	r20,16(sp)
 8005ca4:	dc400115 	stw	r17,4(sp)
 8005ca8:	dc000015 	stw	r16,0(sp)
 8005cac:	1887c83a 	sub	r3,r3,r2
 8005cb0:	2825883a 	mov	r18,r5
 8005cb4:	3027883a 	mov	r19,r6
 8005cb8:	1800141e 	bne	r3,zero,8005d0c <__mdiff+0x84>
 8005cbc:	1085883a 	add	r2,r2,r2
 8005cc0:	1085883a 	add	r2,r2,r2
 8005cc4:	2a000504 	addi	r8,r5,20
 8005cc8:	34000504 	addi	r16,r6,20
 8005ccc:	4087883a 	add	r3,r8,r2
 8005cd0:	8085883a 	add	r2,r16,r2
 8005cd4:	00000106 	br	8005cdc <__mdiff+0x54>
 8005cd8:	40c0592e 	bgeu	r8,r3,8005e40 <__mdiff+0x1b8>
 8005cdc:	18ffff04 	addi	r3,r3,-4
 8005ce0:	10bfff04 	addi	r2,r2,-4
 8005ce4:	19c00017 	ldw	r7,0(r3)
 8005ce8:	11400017 	ldw	r5,0(r2)
 8005cec:	397ffa26 	beq	r7,r5,8005cd8 <__alt_data_end+0xfc005cd8>
 8005cf0:	3940592e 	bgeu	r7,r5,8005e58 <__mdiff+0x1d0>
 8005cf4:	9005883a 	mov	r2,r18
 8005cf8:	4023883a 	mov	r17,r8
 8005cfc:	9825883a 	mov	r18,r19
 8005d00:	05000044 	movi	r20,1
 8005d04:	1027883a 	mov	r19,r2
 8005d08:	00000406 	br	8005d1c <__mdiff+0x94>
 8005d0c:	18005616 	blt	r3,zero,8005e68 <__mdiff+0x1e0>
 8005d10:	34400504 	addi	r17,r6,20
 8005d14:	2c000504 	addi	r16,r5,20
 8005d18:	0029883a 	mov	r20,zero
 8005d1c:	91400117 	ldw	r5,4(r18)
 8005d20:	80052a40 	call	80052a4 <_Balloc>
 8005d24:	92400417 	ldw	r9,16(r18)
 8005d28:	9b000417 	ldw	r12,16(r19)
 8005d2c:	12c00504 	addi	r11,r2,20
 8005d30:	4a51883a 	add	r8,r9,r9
 8005d34:	6319883a 	add	r12,r12,r12
 8005d38:	4211883a 	add	r8,r8,r8
 8005d3c:	6319883a 	add	r12,r12,r12
 8005d40:	15000315 	stw	r20,12(r2)
 8005d44:	8211883a 	add	r8,r16,r8
 8005d48:	8b19883a 	add	r12,r17,r12
 8005d4c:	0007883a 	mov	r3,zero
 8005d50:	81400017 	ldw	r5,0(r16)
 8005d54:	89c00017 	ldw	r7,0(r17)
 8005d58:	59800104 	addi	r6,r11,4
 8005d5c:	293fffcc 	andi	r4,r5,65535
 8005d60:	20c7883a 	add	r3,r4,r3
 8005d64:	393fffcc 	andi	r4,r7,65535
 8005d68:	1909c83a 	sub	r4,r3,r4
 8005d6c:	280ad43a 	srli	r5,r5,16
 8005d70:	380ed43a 	srli	r7,r7,16
 8005d74:	2007d43a 	srai	r3,r4,16
 8005d78:	213fffcc 	andi	r4,r4,65535
 8005d7c:	29cbc83a 	sub	r5,r5,r7
 8005d80:	28c7883a 	add	r3,r5,r3
 8005d84:	180a943a 	slli	r5,r3,16
 8005d88:	8c400104 	addi	r17,r17,4
 8005d8c:	84000104 	addi	r16,r16,4
 8005d90:	2908b03a 	or	r4,r5,r4
 8005d94:	59000015 	stw	r4,0(r11)
 8005d98:	1807d43a 	srai	r3,r3,16
 8005d9c:	3015883a 	mov	r10,r6
 8005da0:	3017883a 	mov	r11,r6
 8005da4:	8b3fea36 	bltu	r17,r12,8005d50 <__alt_data_end+0xfc005d50>
 8005da8:	8200162e 	bgeu	r16,r8,8005e04 <__mdiff+0x17c>
 8005dac:	8017883a 	mov	r11,r16
 8005db0:	59400017 	ldw	r5,0(r11)
 8005db4:	31800104 	addi	r6,r6,4
 8005db8:	5ac00104 	addi	r11,r11,4
 8005dbc:	293fffcc 	andi	r4,r5,65535
 8005dc0:	20c7883a 	add	r3,r4,r3
 8005dc4:	280ed43a 	srli	r7,r5,16
 8005dc8:	180bd43a 	srai	r5,r3,16
 8005dcc:	193fffcc 	andi	r4,r3,65535
 8005dd0:	3947883a 	add	r3,r7,r5
 8005dd4:	180a943a 	slli	r5,r3,16
 8005dd8:	1807d43a 	srai	r3,r3,16
 8005ddc:	2908b03a 	or	r4,r5,r4
 8005de0:	313fff15 	stw	r4,-4(r6)
 8005de4:	5a3ff236 	bltu	r11,r8,8005db0 <__alt_data_end+0xfc005db0>
 8005de8:	0406303a 	nor	r3,zero,r16
 8005dec:	1a07883a 	add	r3,r3,r8
 8005df0:	1806d0ba 	srli	r3,r3,2
 8005df4:	18c00044 	addi	r3,r3,1
 8005df8:	18c7883a 	add	r3,r3,r3
 8005dfc:	18c7883a 	add	r3,r3,r3
 8005e00:	50d5883a 	add	r10,r10,r3
 8005e04:	50ffff04 	addi	r3,r10,-4
 8005e08:	2000041e 	bne	r4,zero,8005e1c <__mdiff+0x194>
 8005e0c:	18ffff04 	addi	r3,r3,-4
 8005e10:	19000017 	ldw	r4,0(r3)
 8005e14:	4a7fffc4 	addi	r9,r9,-1
 8005e18:	203ffc26 	beq	r4,zero,8005e0c <__alt_data_end+0xfc005e0c>
 8005e1c:	12400415 	stw	r9,16(r2)
 8005e20:	dfc00517 	ldw	ra,20(sp)
 8005e24:	dd000417 	ldw	r20,16(sp)
 8005e28:	dcc00317 	ldw	r19,12(sp)
 8005e2c:	dc800217 	ldw	r18,8(sp)
 8005e30:	dc400117 	ldw	r17,4(sp)
 8005e34:	dc000017 	ldw	r16,0(sp)
 8005e38:	dec00604 	addi	sp,sp,24
 8005e3c:	f800283a 	ret
 8005e40:	000b883a 	mov	r5,zero
 8005e44:	80052a40 	call	80052a4 <_Balloc>
 8005e48:	00c00044 	movi	r3,1
 8005e4c:	10c00415 	stw	r3,16(r2)
 8005e50:	10000515 	stw	zero,20(r2)
 8005e54:	003ff206 	br	8005e20 <__alt_data_end+0xfc005e20>
 8005e58:	8023883a 	mov	r17,r16
 8005e5c:	0029883a 	mov	r20,zero
 8005e60:	4021883a 	mov	r16,r8
 8005e64:	003fad06 	br	8005d1c <__alt_data_end+0xfc005d1c>
 8005e68:	9005883a 	mov	r2,r18
 8005e6c:	94400504 	addi	r17,r18,20
 8005e70:	9c000504 	addi	r16,r19,20
 8005e74:	9825883a 	mov	r18,r19
 8005e78:	05000044 	movi	r20,1
 8005e7c:	1027883a 	mov	r19,r2
 8005e80:	003fa606 	br	8005d1c <__alt_data_end+0xfc005d1c>

08005e84 <__ulp>:
 8005e84:	295ffc2c 	andhi	r5,r5,32752
 8005e88:	00bf3034 	movhi	r2,64704
 8005e8c:	2887883a 	add	r3,r5,r2
 8005e90:	00c0020e 	bge	zero,r3,8005e9c <__ulp+0x18>
 8005e94:	0005883a 	mov	r2,zero
 8005e98:	f800283a 	ret
 8005e9c:	00c7c83a 	sub	r3,zero,r3
 8005ea0:	1807d53a 	srai	r3,r3,20
 8005ea4:	008004c4 	movi	r2,19
 8005ea8:	10c00b0e 	bge	r2,r3,8005ed8 <__ulp+0x54>
 8005eac:	18bffb04 	addi	r2,r3,-20
 8005eb0:	01000784 	movi	r4,30
 8005eb4:	0007883a 	mov	r3,zero
 8005eb8:	20800516 	blt	r4,r2,8005ed0 <__ulp+0x4c>
 8005ebc:	010007c4 	movi	r4,31
 8005ec0:	2089c83a 	sub	r4,r4,r2
 8005ec4:	00800044 	movi	r2,1
 8005ec8:	1104983a 	sll	r2,r2,r4
 8005ecc:	f800283a 	ret
 8005ed0:	00800044 	movi	r2,1
 8005ed4:	f800283a 	ret
 8005ed8:	01400234 	movhi	r5,8
 8005edc:	28c7d83a 	sra	r3,r5,r3
 8005ee0:	0005883a 	mov	r2,zero
 8005ee4:	f800283a 	ret

08005ee8 <__b2d>:
 8005ee8:	defffa04 	addi	sp,sp,-24
 8005eec:	dc000015 	stw	r16,0(sp)
 8005ef0:	24000417 	ldw	r16,16(r4)
 8005ef4:	dc400115 	stw	r17,4(sp)
 8005ef8:	24400504 	addi	r17,r4,20
 8005efc:	8421883a 	add	r16,r16,r16
 8005f00:	8421883a 	add	r16,r16,r16
 8005f04:	8c21883a 	add	r16,r17,r16
 8005f08:	dc800215 	stw	r18,8(sp)
 8005f0c:	84bfff17 	ldw	r18,-4(r16)
 8005f10:	dd000415 	stw	r20,16(sp)
 8005f14:	dcc00315 	stw	r19,12(sp)
 8005f18:	9009883a 	mov	r4,r18
 8005f1c:	2829883a 	mov	r20,r5
 8005f20:	dfc00515 	stw	ra,20(sp)
 8005f24:	80055c00 	call	80055c0 <__hi0bits>
 8005f28:	00c00804 	movi	r3,32
 8005f2c:	1889c83a 	sub	r4,r3,r2
 8005f30:	a1000015 	stw	r4,0(r20)
 8005f34:	01000284 	movi	r4,10
 8005f38:	84ffff04 	addi	r19,r16,-4
 8005f3c:	20801216 	blt	r4,r2,8005f88 <__b2d+0xa0>
 8005f40:	018002c4 	movi	r6,11
 8005f44:	308dc83a 	sub	r6,r6,r2
 8005f48:	9186d83a 	srl	r3,r18,r6
 8005f4c:	18cffc34 	orhi	r3,r3,16368
 8005f50:	8cc0212e 	bgeu	r17,r19,8005fd8 <__b2d+0xf0>
 8005f54:	813ffe17 	ldw	r4,-8(r16)
 8005f58:	218cd83a 	srl	r6,r4,r6
 8005f5c:	10800544 	addi	r2,r2,21
 8005f60:	9084983a 	sll	r2,r18,r2
 8005f64:	1184b03a 	or	r2,r2,r6
 8005f68:	dfc00517 	ldw	ra,20(sp)
 8005f6c:	dd000417 	ldw	r20,16(sp)
 8005f70:	dcc00317 	ldw	r19,12(sp)
 8005f74:	dc800217 	ldw	r18,8(sp)
 8005f78:	dc400117 	ldw	r17,4(sp)
 8005f7c:	dc000017 	ldw	r16,0(sp)
 8005f80:	dec00604 	addi	sp,sp,24
 8005f84:	f800283a 	ret
 8005f88:	8cc00f2e 	bgeu	r17,r19,8005fc8 <__b2d+0xe0>
 8005f8c:	117ffd44 	addi	r5,r2,-11
 8005f90:	80bffe17 	ldw	r2,-8(r16)
 8005f94:	28000e26 	beq	r5,zero,8005fd0 <__b2d+0xe8>
 8005f98:	1949c83a 	sub	r4,r3,r5
 8005f9c:	9164983a 	sll	r18,r18,r5
 8005fa0:	1106d83a 	srl	r3,r2,r4
 8005fa4:	81bffe04 	addi	r6,r16,-8
 8005fa8:	948ffc34 	orhi	r18,r18,16368
 8005fac:	90c6b03a 	or	r3,r18,r3
 8005fb0:	89800e2e 	bgeu	r17,r6,8005fec <__b2d+0x104>
 8005fb4:	81bffd17 	ldw	r6,-12(r16)
 8005fb8:	1144983a 	sll	r2,r2,r5
 8005fbc:	310ad83a 	srl	r5,r6,r4
 8005fc0:	2884b03a 	or	r2,r5,r2
 8005fc4:	003fe806 	br	8005f68 <__alt_data_end+0xfc005f68>
 8005fc8:	10bffd44 	addi	r2,r2,-11
 8005fcc:	1000041e 	bne	r2,zero,8005fe0 <__b2d+0xf8>
 8005fd0:	90cffc34 	orhi	r3,r18,16368
 8005fd4:	003fe406 	br	8005f68 <__alt_data_end+0xfc005f68>
 8005fd8:	000d883a 	mov	r6,zero
 8005fdc:	003fdf06 	br	8005f5c <__alt_data_end+0xfc005f5c>
 8005fe0:	90a4983a 	sll	r18,r18,r2
 8005fe4:	0005883a 	mov	r2,zero
 8005fe8:	003ff906 	br	8005fd0 <__alt_data_end+0xfc005fd0>
 8005fec:	1144983a 	sll	r2,r2,r5
 8005ff0:	003fdd06 	br	8005f68 <__alt_data_end+0xfc005f68>

08005ff4 <__d2b>:
 8005ff4:	defff804 	addi	sp,sp,-32
 8005ff8:	dc000215 	stw	r16,8(sp)
 8005ffc:	3021883a 	mov	r16,r6
 8006000:	dc400315 	stw	r17,12(sp)
 8006004:	8022907a 	slli	r17,r16,1
 8006008:	dd000615 	stw	r20,24(sp)
 800600c:	2829883a 	mov	r20,r5
 8006010:	01400044 	movi	r5,1
 8006014:	dcc00515 	stw	r19,20(sp)
 8006018:	dc800415 	stw	r18,16(sp)
 800601c:	dfc00715 	stw	ra,28(sp)
 8006020:	3825883a 	mov	r18,r7
 8006024:	8822d57a 	srli	r17,r17,21
 8006028:	80052a40 	call	80052a4 <_Balloc>
 800602c:	1027883a 	mov	r19,r2
 8006030:	00800434 	movhi	r2,16
 8006034:	10bfffc4 	addi	r2,r2,-1
 8006038:	808c703a 	and	r6,r16,r2
 800603c:	88000126 	beq	r17,zero,8006044 <__d2b+0x50>
 8006040:	31800434 	orhi	r6,r6,16
 8006044:	d9800015 	stw	r6,0(sp)
 8006048:	a0002426 	beq	r20,zero,80060dc <__d2b+0xe8>
 800604c:	d9000104 	addi	r4,sp,4
 8006050:	dd000115 	stw	r20,4(sp)
 8006054:	80056280 	call	8005628 <__lo0bits>
 8006058:	d8c00017 	ldw	r3,0(sp)
 800605c:	10002f1e 	bne	r2,zero,800611c <__d2b+0x128>
 8006060:	d9000117 	ldw	r4,4(sp)
 8006064:	99000515 	stw	r4,20(r19)
 8006068:	1821003a 	cmpeq	r16,r3,zero
 800606c:	01000084 	movi	r4,2
 8006070:	2421c83a 	sub	r16,r4,r16
 8006074:	98c00615 	stw	r3,24(r19)
 8006078:	9c000415 	stw	r16,16(r19)
 800607c:	88001f1e 	bne	r17,zero,80060fc <__d2b+0x108>
 8006080:	10bef384 	addi	r2,r2,-1074
 8006084:	90800015 	stw	r2,0(r18)
 8006088:	00900034 	movhi	r2,16384
 800608c:	10bfffc4 	addi	r2,r2,-1
 8006090:	8085883a 	add	r2,r16,r2
 8006094:	1085883a 	add	r2,r2,r2
 8006098:	1085883a 	add	r2,r2,r2
 800609c:	9885883a 	add	r2,r19,r2
 80060a0:	11000517 	ldw	r4,20(r2)
 80060a4:	8020917a 	slli	r16,r16,5
 80060a8:	80055c00 	call	80055c0 <__hi0bits>
 80060ac:	d8c00817 	ldw	r3,32(sp)
 80060b0:	8085c83a 	sub	r2,r16,r2
 80060b4:	18800015 	stw	r2,0(r3)
 80060b8:	9805883a 	mov	r2,r19
 80060bc:	dfc00717 	ldw	ra,28(sp)
 80060c0:	dd000617 	ldw	r20,24(sp)
 80060c4:	dcc00517 	ldw	r19,20(sp)
 80060c8:	dc800417 	ldw	r18,16(sp)
 80060cc:	dc400317 	ldw	r17,12(sp)
 80060d0:	dc000217 	ldw	r16,8(sp)
 80060d4:	dec00804 	addi	sp,sp,32
 80060d8:	f800283a 	ret
 80060dc:	d809883a 	mov	r4,sp
 80060e0:	80056280 	call	8005628 <__lo0bits>
 80060e4:	d8c00017 	ldw	r3,0(sp)
 80060e8:	04000044 	movi	r16,1
 80060ec:	9c000415 	stw	r16,16(r19)
 80060f0:	98c00515 	stw	r3,20(r19)
 80060f4:	10800804 	addi	r2,r2,32
 80060f8:	883fe126 	beq	r17,zero,8006080 <__alt_data_end+0xfc006080>
 80060fc:	00c00d44 	movi	r3,53
 8006100:	8c7ef344 	addi	r17,r17,-1075
 8006104:	88a3883a 	add	r17,r17,r2
 8006108:	1885c83a 	sub	r2,r3,r2
 800610c:	d8c00817 	ldw	r3,32(sp)
 8006110:	94400015 	stw	r17,0(r18)
 8006114:	18800015 	stw	r2,0(r3)
 8006118:	003fe706 	br	80060b8 <__alt_data_end+0xfc0060b8>
 800611c:	01000804 	movi	r4,32
 8006120:	2089c83a 	sub	r4,r4,r2
 8006124:	1908983a 	sll	r4,r3,r4
 8006128:	d9400117 	ldw	r5,4(sp)
 800612c:	1886d83a 	srl	r3,r3,r2
 8006130:	2148b03a 	or	r4,r4,r5
 8006134:	99000515 	stw	r4,20(r19)
 8006138:	d8c00015 	stw	r3,0(sp)
 800613c:	003fca06 	br	8006068 <__alt_data_end+0xfc006068>

08006140 <__ratio>:
 8006140:	defff904 	addi	sp,sp,-28
 8006144:	dc400315 	stw	r17,12(sp)
 8006148:	2823883a 	mov	r17,r5
 800614c:	d9400104 	addi	r5,sp,4
 8006150:	dfc00615 	stw	ra,24(sp)
 8006154:	dcc00515 	stw	r19,20(sp)
 8006158:	dc800415 	stw	r18,16(sp)
 800615c:	2027883a 	mov	r19,r4
 8006160:	dc000215 	stw	r16,8(sp)
 8006164:	8005ee80 	call	8005ee8 <__b2d>
 8006168:	d80b883a 	mov	r5,sp
 800616c:	8809883a 	mov	r4,r17
 8006170:	1025883a 	mov	r18,r2
 8006174:	1821883a 	mov	r16,r3
 8006178:	8005ee80 	call	8005ee8 <__b2d>
 800617c:	8a000417 	ldw	r8,16(r17)
 8006180:	99000417 	ldw	r4,16(r19)
 8006184:	d9400117 	ldw	r5,4(sp)
 8006188:	2209c83a 	sub	r4,r4,r8
 800618c:	2010917a 	slli	r8,r4,5
 8006190:	d9000017 	ldw	r4,0(sp)
 8006194:	2909c83a 	sub	r4,r5,r4
 8006198:	4109883a 	add	r4,r8,r4
 800619c:	01000e0e 	bge	zero,r4,80061d8 <__ratio+0x98>
 80061a0:	2008953a 	slli	r4,r4,20
 80061a4:	2421883a 	add	r16,r4,r16
 80061a8:	100d883a 	mov	r6,r2
 80061ac:	180f883a 	mov	r7,r3
 80061b0:	9009883a 	mov	r4,r18
 80061b4:	800b883a 	mov	r5,r16
 80061b8:	8009ce00 	call	8009ce0 <__divdf3>
 80061bc:	dfc00617 	ldw	ra,24(sp)
 80061c0:	dcc00517 	ldw	r19,20(sp)
 80061c4:	dc800417 	ldw	r18,16(sp)
 80061c8:	dc400317 	ldw	r17,12(sp)
 80061cc:	dc000217 	ldw	r16,8(sp)
 80061d0:	dec00704 	addi	sp,sp,28
 80061d4:	f800283a 	ret
 80061d8:	2008953a 	slli	r4,r4,20
 80061dc:	1907c83a 	sub	r3,r3,r4
 80061e0:	003ff106 	br	80061a8 <__alt_data_end+0xfc0061a8>

080061e4 <_mprec_log10>:
 80061e4:	defffe04 	addi	sp,sp,-8
 80061e8:	dc000015 	stw	r16,0(sp)
 80061ec:	dfc00115 	stw	ra,4(sp)
 80061f0:	008005c4 	movi	r2,23
 80061f4:	2021883a 	mov	r16,r4
 80061f8:	11000d0e 	bge	r2,r4,8006230 <_mprec_log10+0x4c>
 80061fc:	0005883a 	mov	r2,zero
 8006200:	00cffc34 	movhi	r3,16368
 8006204:	843fffc4 	addi	r16,r16,-1
 8006208:	000d883a 	mov	r6,zero
 800620c:	01d00934 	movhi	r7,16420
 8006210:	1009883a 	mov	r4,r2
 8006214:	180b883a 	mov	r5,r3
 8006218:	800a9080 	call	800a908 <__muldf3>
 800621c:	803ff91e 	bne	r16,zero,8006204 <__alt_data_end+0xfc006204>
 8006220:	dfc00117 	ldw	ra,4(sp)
 8006224:	dc000017 	ldw	r16,0(sp)
 8006228:	dec00204 	addi	sp,sp,8
 800622c:	f800283a 	ret
 8006230:	202090fa 	slli	r16,r4,3
 8006234:	00820074 	movhi	r2,2049
 8006238:	10b87204 	addi	r2,r2,-7736
 800623c:	1421883a 	add	r16,r2,r16
 8006240:	80800017 	ldw	r2,0(r16)
 8006244:	80c00117 	ldw	r3,4(r16)
 8006248:	dfc00117 	ldw	ra,4(sp)
 800624c:	dc000017 	ldw	r16,0(sp)
 8006250:	dec00204 	addi	sp,sp,8
 8006254:	f800283a 	ret

08006258 <__copybits>:
 8006258:	297fffc4 	addi	r5,r5,-1
 800625c:	280fd17a 	srai	r7,r5,5
 8006260:	30c00417 	ldw	r3,16(r6)
 8006264:	30800504 	addi	r2,r6,20
 8006268:	39c00044 	addi	r7,r7,1
 800626c:	18c7883a 	add	r3,r3,r3
 8006270:	39cf883a 	add	r7,r7,r7
 8006274:	18c7883a 	add	r3,r3,r3
 8006278:	39cf883a 	add	r7,r7,r7
 800627c:	10c7883a 	add	r3,r2,r3
 8006280:	21cf883a 	add	r7,r4,r7
 8006284:	10c00d2e 	bgeu	r2,r3,80062bc <__copybits+0x64>
 8006288:	200b883a 	mov	r5,r4
 800628c:	12000017 	ldw	r8,0(r2)
 8006290:	29400104 	addi	r5,r5,4
 8006294:	10800104 	addi	r2,r2,4
 8006298:	2a3fff15 	stw	r8,-4(r5)
 800629c:	10fffb36 	bltu	r2,r3,800628c <__alt_data_end+0xfc00628c>
 80062a0:	1985c83a 	sub	r2,r3,r6
 80062a4:	10bffac4 	addi	r2,r2,-21
 80062a8:	1004d0ba 	srli	r2,r2,2
 80062ac:	10800044 	addi	r2,r2,1
 80062b0:	1085883a 	add	r2,r2,r2
 80062b4:	1085883a 	add	r2,r2,r2
 80062b8:	2089883a 	add	r4,r4,r2
 80062bc:	21c0032e 	bgeu	r4,r7,80062cc <__copybits+0x74>
 80062c0:	20000015 	stw	zero,0(r4)
 80062c4:	21000104 	addi	r4,r4,4
 80062c8:	21fffd36 	bltu	r4,r7,80062c0 <__alt_data_end+0xfc0062c0>
 80062cc:	f800283a 	ret

080062d0 <__any_on>:
 80062d0:	20c00417 	ldw	r3,16(r4)
 80062d4:	2805d17a 	srai	r2,r5,5
 80062d8:	21000504 	addi	r4,r4,20
 80062dc:	18800d0e 	bge	r3,r2,8006314 <__any_on+0x44>
 80062e0:	18c7883a 	add	r3,r3,r3
 80062e4:	18c7883a 	add	r3,r3,r3
 80062e8:	20c7883a 	add	r3,r4,r3
 80062ec:	20c0192e 	bgeu	r4,r3,8006354 <__any_on+0x84>
 80062f0:	18bfff17 	ldw	r2,-4(r3)
 80062f4:	18ffff04 	addi	r3,r3,-4
 80062f8:	1000041e 	bne	r2,zero,800630c <__any_on+0x3c>
 80062fc:	20c0142e 	bgeu	r4,r3,8006350 <__any_on+0x80>
 8006300:	18ffff04 	addi	r3,r3,-4
 8006304:	19400017 	ldw	r5,0(r3)
 8006308:	283ffc26 	beq	r5,zero,80062fc <__alt_data_end+0xfc0062fc>
 800630c:	00800044 	movi	r2,1
 8006310:	f800283a 	ret
 8006314:	10c00a0e 	bge	r2,r3,8006340 <__any_on+0x70>
 8006318:	1085883a 	add	r2,r2,r2
 800631c:	1085883a 	add	r2,r2,r2
 8006320:	294007cc 	andi	r5,r5,31
 8006324:	2087883a 	add	r3,r4,r2
 8006328:	283ff026 	beq	r5,zero,80062ec <__alt_data_end+0xfc0062ec>
 800632c:	19800017 	ldw	r6,0(r3)
 8006330:	3144d83a 	srl	r2,r6,r5
 8006334:	114a983a 	sll	r5,r2,r5
 8006338:	317ff41e 	bne	r6,r5,800630c <__alt_data_end+0xfc00630c>
 800633c:	003feb06 	br	80062ec <__alt_data_end+0xfc0062ec>
 8006340:	1085883a 	add	r2,r2,r2
 8006344:	1085883a 	add	r2,r2,r2
 8006348:	2087883a 	add	r3,r4,r2
 800634c:	003fe706 	br	80062ec <__alt_data_end+0xfc0062ec>
 8006350:	f800283a 	ret
 8006354:	0005883a 	mov	r2,zero
 8006358:	f800283a 	ret

0800635c <__fpclassifyd>:
 800635c:	00a00034 	movhi	r2,32768
 8006360:	10bfffc4 	addi	r2,r2,-1
 8006364:	2884703a 	and	r2,r5,r2
 8006368:	10000726 	beq	r2,zero,8006388 <__fpclassifyd+0x2c>
 800636c:	00fffc34 	movhi	r3,65520
 8006370:	019ff834 	movhi	r6,32736
 8006374:	28c7883a 	add	r3,r5,r3
 8006378:	31bfffc4 	addi	r6,r6,-1
 800637c:	30c00536 	bltu	r6,r3,8006394 <__fpclassifyd+0x38>
 8006380:	00800104 	movi	r2,4
 8006384:	f800283a 	ret
 8006388:	2000021e 	bne	r4,zero,8006394 <__fpclassifyd+0x38>
 800638c:	00800084 	movi	r2,2
 8006390:	f800283a 	ret
 8006394:	00dffc34 	movhi	r3,32752
 8006398:	019ff834 	movhi	r6,32736
 800639c:	28cb883a 	add	r5,r5,r3
 80063a0:	31bfffc4 	addi	r6,r6,-1
 80063a4:	317ff62e 	bgeu	r6,r5,8006380 <__alt_data_end+0xfc006380>
 80063a8:	01400434 	movhi	r5,16
 80063ac:	297fffc4 	addi	r5,r5,-1
 80063b0:	28800236 	bltu	r5,r2,80063bc <__fpclassifyd+0x60>
 80063b4:	008000c4 	movi	r2,3
 80063b8:	f800283a 	ret
 80063bc:	10c00226 	beq	r2,r3,80063c8 <__fpclassifyd+0x6c>
 80063c0:	0005883a 	mov	r2,zero
 80063c4:	f800283a 	ret
 80063c8:	2005003a 	cmpeq	r2,r4,zero
 80063cc:	f800283a 	ret

080063d0 <_sbrk_r>:
 80063d0:	defffd04 	addi	sp,sp,-12
 80063d4:	dc000015 	stw	r16,0(sp)
 80063d8:	04020074 	movhi	r16,2049
 80063dc:	dc400115 	stw	r17,4(sp)
 80063e0:	84072b04 	addi	r16,r16,7340
 80063e4:	2023883a 	mov	r17,r4
 80063e8:	2809883a 	mov	r4,r5
 80063ec:	dfc00215 	stw	ra,8(sp)
 80063f0:	80000015 	stw	zero,0(r16)
 80063f4:	800be880 	call	800be88 <sbrk>
 80063f8:	00ffffc4 	movi	r3,-1
 80063fc:	10c00526 	beq	r2,r3,8006414 <_sbrk_r+0x44>
 8006400:	dfc00217 	ldw	ra,8(sp)
 8006404:	dc400117 	ldw	r17,4(sp)
 8006408:	dc000017 	ldw	r16,0(sp)
 800640c:	dec00304 	addi	sp,sp,12
 8006410:	f800283a 	ret
 8006414:	80c00017 	ldw	r3,0(r16)
 8006418:	183ff926 	beq	r3,zero,8006400 <__alt_data_end+0xfc006400>
 800641c:	88c00015 	stw	r3,0(r17)
 8006420:	003ff706 	br	8006400 <__alt_data_end+0xfc006400>

08006424 <strcmp>:
 8006424:	2144b03a 	or	r2,r4,r5
 8006428:	108000cc 	andi	r2,r2,3
 800642c:	1000171e 	bne	r2,zero,800648c <strcmp+0x68>
 8006430:	20800017 	ldw	r2,0(r4)
 8006434:	28c00017 	ldw	r3,0(r5)
 8006438:	10c0141e 	bne	r2,r3,800648c <strcmp+0x68>
 800643c:	027fbff4 	movhi	r9,65279
 8006440:	4a7fbfc4 	addi	r9,r9,-257
 8006444:	0086303a 	nor	r3,zero,r2
 8006448:	02202074 	movhi	r8,32897
 800644c:	1245883a 	add	r2,r2,r9
 8006450:	42202004 	addi	r8,r8,-32640
 8006454:	10c4703a 	and	r2,r2,r3
 8006458:	1204703a 	and	r2,r2,r8
 800645c:	10000226 	beq	r2,zero,8006468 <strcmp+0x44>
 8006460:	00002306 	br	80064f0 <strcmp+0xcc>
 8006464:	1000221e 	bne	r2,zero,80064f0 <strcmp+0xcc>
 8006468:	21000104 	addi	r4,r4,4
 800646c:	20c00017 	ldw	r3,0(r4)
 8006470:	29400104 	addi	r5,r5,4
 8006474:	29800017 	ldw	r6,0(r5)
 8006478:	1a4f883a 	add	r7,r3,r9
 800647c:	00c4303a 	nor	r2,zero,r3
 8006480:	3884703a 	and	r2,r7,r2
 8006484:	1204703a 	and	r2,r2,r8
 8006488:	19bff626 	beq	r3,r6,8006464 <__alt_data_end+0xfc006464>
 800648c:	20800003 	ldbu	r2,0(r4)
 8006490:	10c03fcc 	andi	r3,r2,255
 8006494:	18c0201c 	xori	r3,r3,128
 8006498:	18ffe004 	addi	r3,r3,-128
 800649c:	18000c26 	beq	r3,zero,80064d0 <strcmp+0xac>
 80064a0:	29800007 	ldb	r6,0(r5)
 80064a4:	19800326 	beq	r3,r6,80064b4 <strcmp+0x90>
 80064a8:	00001306 	br	80064f8 <strcmp+0xd4>
 80064ac:	29800007 	ldb	r6,0(r5)
 80064b0:	11800b1e 	bne	r2,r6,80064e0 <strcmp+0xbc>
 80064b4:	21000044 	addi	r4,r4,1
 80064b8:	20c00003 	ldbu	r3,0(r4)
 80064bc:	29400044 	addi	r5,r5,1
 80064c0:	18803fcc 	andi	r2,r3,255
 80064c4:	1080201c 	xori	r2,r2,128
 80064c8:	10bfe004 	addi	r2,r2,-128
 80064cc:	103ff71e 	bne	r2,zero,80064ac <__alt_data_end+0xfc0064ac>
 80064d0:	0007883a 	mov	r3,zero
 80064d4:	28800003 	ldbu	r2,0(r5)
 80064d8:	1885c83a 	sub	r2,r3,r2
 80064dc:	f800283a 	ret
 80064e0:	28800003 	ldbu	r2,0(r5)
 80064e4:	18c03fcc 	andi	r3,r3,255
 80064e8:	1885c83a 	sub	r2,r3,r2
 80064ec:	f800283a 	ret
 80064f0:	0005883a 	mov	r2,zero
 80064f4:	f800283a 	ret
 80064f8:	10c03fcc 	andi	r3,r2,255
 80064fc:	003ff506 	br	80064d4 <__alt_data_end+0xfc0064d4>

08006500 <__ssprint_r>:
 8006500:	30800217 	ldw	r2,8(r6)
 8006504:	defff604 	addi	sp,sp,-40
 8006508:	dc800215 	stw	r18,8(sp)
 800650c:	dfc00915 	stw	ra,36(sp)
 8006510:	df000815 	stw	fp,32(sp)
 8006514:	ddc00715 	stw	r23,28(sp)
 8006518:	dd800615 	stw	r22,24(sp)
 800651c:	dd400515 	stw	r21,20(sp)
 8006520:	dd000415 	stw	r20,16(sp)
 8006524:	dcc00315 	stw	r19,12(sp)
 8006528:	dc400115 	stw	r17,4(sp)
 800652c:	dc000015 	stw	r16,0(sp)
 8006530:	3025883a 	mov	r18,r6
 8006534:	10005826 	beq	r2,zero,8006698 <__ssprint_r+0x198>
 8006538:	2027883a 	mov	r19,r4
 800653c:	35c00017 	ldw	r23,0(r6)
 8006540:	29000017 	ldw	r4,0(r5)
 8006544:	28800217 	ldw	r2,8(r5)
 8006548:	2823883a 	mov	r17,r5
 800654c:	0039883a 	mov	fp,zero
 8006550:	0021883a 	mov	r16,zero
 8006554:	80003926 	beq	r16,zero,800663c <__ssprint_r+0x13c>
 8006558:	102b883a 	mov	r21,r2
 800655c:	102d883a 	mov	r22,r2
 8006560:	80803a36 	bltu	r16,r2,800664c <__ssprint_r+0x14c>
 8006564:	88c0030b 	ldhu	r3,12(r17)
 8006568:	1881200c 	andi	r2,r3,1152
 800656c:	10002626 	beq	r2,zero,8006608 <__ssprint_r+0x108>
 8006570:	88800517 	ldw	r2,20(r17)
 8006574:	89400417 	ldw	r5,16(r17)
 8006578:	81800044 	addi	r6,r16,1
 800657c:	108f883a 	add	r7,r2,r2
 8006580:	3885883a 	add	r2,r7,r2
 8006584:	100ed7fa 	srli	r7,r2,31
 8006588:	216dc83a 	sub	r22,r4,r5
 800658c:	3589883a 	add	r4,r6,r22
 8006590:	3885883a 	add	r2,r7,r2
 8006594:	102bd07a 	srai	r21,r2,1
 8006598:	a80d883a 	mov	r6,r21
 800659c:	a900022e 	bgeu	r21,r4,80065a8 <__ssprint_r+0xa8>
 80065a0:	202b883a 	mov	r21,r4
 80065a4:	200d883a 	mov	r6,r4
 80065a8:	18c1000c 	andi	r3,r3,1024
 80065ac:	18002a26 	beq	r3,zero,8006658 <__ssprint_r+0x158>
 80065b0:	300b883a 	mov	r5,r6
 80065b4:	9809883a 	mov	r4,r19
 80065b8:	800486c0 	call	800486c <_malloc_r>
 80065bc:	1029883a 	mov	r20,r2
 80065c0:	10002c26 	beq	r2,zero,8006674 <__ssprint_r+0x174>
 80065c4:	89400417 	ldw	r5,16(r17)
 80065c8:	b00d883a 	mov	r6,r22
 80065cc:	1009883a 	mov	r4,r2
 80065d0:	800515c0 	call	800515c <memcpy>
 80065d4:	8880030b 	ldhu	r2,12(r17)
 80065d8:	00fedfc4 	movi	r3,-1153
 80065dc:	10c4703a 	and	r2,r2,r3
 80065e0:	10802014 	ori	r2,r2,128
 80065e4:	8880030d 	sth	r2,12(r17)
 80065e8:	a589883a 	add	r4,r20,r22
 80065ec:	adadc83a 	sub	r22,r21,r22
 80065f0:	8d400515 	stw	r21,20(r17)
 80065f4:	8d800215 	stw	r22,8(r17)
 80065f8:	8d000415 	stw	r20,16(r17)
 80065fc:	89000015 	stw	r4,0(r17)
 8006600:	802b883a 	mov	r21,r16
 8006604:	802d883a 	mov	r22,r16
 8006608:	b00d883a 	mov	r6,r22
 800660c:	e00b883a 	mov	r5,fp
 8006610:	8007f800 	call	8007f80 <memmove>
 8006614:	88800217 	ldw	r2,8(r17)
 8006618:	89000017 	ldw	r4,0(r17)
 800661c:	90c00217 	ldw	r3,8(r18)
 8006620:	1545c83a 	sub	r2,r2,r21
 8006624:	2589883a 	add	r4,r4,r22
 8006628:	88800215 	stw	r2,8(r17)
 800662c:	89000015 	stw	r4,0(r17)
 8006630:	1c21c83a 	sub	r16,r3,r16
 8006634:	94000215 	stw	r16,8(r18)
 8006638:	80001726 	beq	r16,zero,8006698 <__ssprint_r+0x198>
 800663c:	bf000017 	ldw	fp,0(r23)
 8006640:	bc000117 	ldw	r16,4(r23)
 8006644:	bdc00204 	addi	r23,r23,8
 8006648:	003fc206 	br	8006554 <__alt_data_end+0xfc006554>
 800664c:	802b883a 	mov	r21,r16
 8006650:	802d883a 	mov	r22,r16
 8006654:	003fec06 	br	8006608 <__alt_data_end+0xfc006608>
 8006658:	9809883a 	mov	r4,r19
 800665c:	80082040 	call	8008204 <_realloc_r>
 8006660:	1029883a 	mov	r20,r2
 8006664:	103fe01e 	bne	r2,zero,80065e8 <__alt_data_end+0xfc0065e8>
 8006668:	89400417 	ldw	r5,16(r17)
 800666c:	9809883a 	mov	r4,r19
 8006670:	8007c700 	call	8007c70 <_free_r>
 8006674:	88c0030b 	ldhu	r3,12(r17)
 8006678:	00800304 	movi	r2,12
 800667c:	98800015 	stw	r2,0(r19)
 8006680:	18c01014 	ori	r3,r3,64
 8006684:	88c0030d 	sth	r3,12(r17)
 8006688:	00bfffc4 	movi	r2,-1
 800668c:	90000215 	stw	zero,8(r18)
 8006690:	90000115 	stw	zero,4(r18)
 8006694:	00000206 	br	80066a0 <__ssprint_r+0x1a0>
 8006698:	90000115 	stw	zero,4(r18)
 800669c:	0005883a 	mov	r2,zero
 80066a0:	dfc00917 	ldw	ra,36(sp)
 80066a4:	df000817 	ldw	fp,32(sp)
 80066a8:	ddc00717 	ldw	r23,28(sp)
 80066ac:	dd800617 	ldw	r22,24(sp)
 80066b0:	dd400517 	ldw	r21,20(sp)
 80066b4:	dd000417 	ldw	r20,16(sp)
 80066b8:	dcc00317 	ldw	r19,12(sp)
 80066bc:	dc800217 	ldw	r18,8(sp)
 80066c0:	dc400117 	ldw	r17,4(sp)
 80066c4:	dc000017 	ldw	r16,0(sp)
 80066c8:	dec00a04 	addi	sp,sp,40
 80066cc:	f800283a 	ret

080066d0 <___svfiprintf_internal_r>:
 80066d0:	2880030b 	ldhu	r2,12(r5)
 80066d4:	deffc804 	addi	sp,sp,-224
 80066d8:	dcc03115 	stw	r19,196(sp)
 80066dc:	dfc03715 	stw	ra,220(sp)
 80066e0:	df003615 	stw	fp,216(sp)
 80066e4:	ddc03515 	stw	r23,212(sp)
 80066e8:	dd803415 	stw	r22,208(sp)
 80066ec:	dd403315 	stw	r21,204(sp)
 80066f0:	dd003215 	stw	r20,200(sp)
 80066f4:	dc803015 	stw	r18,192(sp)
 80066f8:	dc402f15 	stw	r17,188(sp)
 80066fc:	dc002e15 	stw	r16,184(sp)
 8006700:	d9402315 	stw	r5,140(sp)
 8006704:	d9002715 	stw	r4,156(sp)
 8006708:	1080200c 	andi	r2,r2,128
 800670c:	d9c02415 	stw	r7,144(sp)
 8006710:	3027883a 	mov	r19,r6
 8006714:	10000226 	beq	r2,zero,8006720 <___svfiprintf_internal_r+0x50>
 8006718:	28800417 	ldw	r2,16(r5)
 800671c:	10046d26 	beq	r2,zero,80078d4 <___svfiprintf_internal_r+0x1204>
 8006720:	d8801a04 	addi	r2,sp,104
 8006724:	d8c019c4 	addi	r3,sp,103
 8006728:	05820074 	movhi	r22,2049
 800672c:	10c9c83a 	sub	r4,r2,r3
 8006730:	b5b8a404 	addi	r22,r22,-7536
 8006734:	d8801e15 	stw	r2,120(sp)
 8006738:	d8c01f15 	stw	r3,124(sp)
 800673c:	dec01a15 	stw	sp,104(sp)
 8006740:	d8001c15 	stw	zero,112(sp)
 8006744:	d8001b15 	stw	zero,108(sp)
 8006748:	d811883a 	mov	r8,sp
 800674c:	d8002915 	stw	zero,164(sp)
 8006750:	d8002615 	stw	zero,152(sp)
 8006754:	d9002c15 	stw	r4,176(sp)
 8006758:	98800007 	ldb	r2,0(r19)
 800675c:	10031426 	beq	r2,zero,80073b0 <___svfiprintf_internal_r+0xce0>
 8006760:	00c00944 	movi	r3,37
 8006764:	9825883a 	mov	r18,r19
 8006768:	10c0021e 	bne	r2,r3,8006774 <___svfiprintf_internal_r+0xa4>
 800676c:	00001406 	br	80067c0 <___svfiprintf_internal_r+0xf0>
 8006770:	10c00326 	beq	r2,r3,8006780 <___svfiprintf_internal_r+0xb0>
 8006774:	94800044 	addi	r18,r18,1
 8006778:	90800007 	ldb	r2,0(r18)
 800677c:	103ffc1e 	bne	r2,zero,8006770 <__alt_data_end+0xfc006770>
 8006780:	94e1c83a 	sub	r16,r18,r19
 8006784:	80000e26 	beq	r16,zero,80067c0 <___svfiprintf_internal_r+0xf0>
 8006788:	d8c01c17 	ldw	r3,112(sp)
 800678c:	d8801b17 	ldw	r2,108(sp)
 8006790:	44c00015 	stw	r19,0(r8)
 8006794:	1c07883a 	add	r3,r3,r16
 8006798:	10800044 	addi	r2,r2,1
 800679c:	d8c01c15 	stw	r3,112(sp)
 80067a0:	44000115 	stw	r16,4(r8)
 80067a4:	d8801b15 	stw	r2,108(sp)
 80067a8:	00c001c4 	movi	r3,7
 80067ac:	18835c16 	blt	r3,r2,8007520 <___svfiprintf_internal_r+0xe50>
 80067b0:	42000204 	addi	r8,r8,8
 80067b4:	d9402617 	ldw	r5,152(sp)
 80067b8:	2c0b883a 	add	r5,r5,r16
 80067bc:	d9402615 	stw	r5,152(sp)
 80067c0:	90800007 	ldb	r2,0(r18)
 80067c4:	1002fc26 	beq	r2,zero,80073b8 <___svfiprintf_internal_r+0xce8>
 80067c8:	0023883a 	mov	r17,zero
 80067cc:	00bfffc4 	movi	r2,-1
 80067d0:	0021883a 	mov	r16,zero
 80067d4:	94c00044 	addi	r19,r18,1
 80067d8:	90c00047 	ldb	r3,1(r18)
 80067dc:	dc402105 	stb	r17,132(sp)
 80067e0:	d8001d85 	stb	zero,118(sp)
 80067e4:	002b883a 	mov	r21,zero
 80067e8:	d8802015 	stw	r2,128(sp)
 80067ec:	d8002515 	stw	zero,148(sp)
 80067f0:	04801604 	movi	r18,88
 80067f4:	05000244 	movi	r20,9
 80067f8:	402f883a 	mov	r23,r8
 80067fc:	8023883a 	mov	r17,r16
 8006800:	9cc00044 	addi	r19,r19,1
 8006804:	18bff804 	addi	r2,r3,-32
 8006808:	9081fb36 	bltu	r18,r2,8006ff8 <___svfiprintf_internal_r+0x928>
 800680c:	100490ba 	slli	r2,r2,2
 8006810:	01020034 	movhi	r4,2048
 8006814:	211a0904 	addi	r4,r4,26660
 8006818:	1105883a 	add	r2,r2,r4
 800681c:	10800017 	ldw	r2,0(r2)
 8006820:	1000683a 	jmp	r2
 8006824:	08006a24 	muli	zero,at,424
 8006828:	08006ff8 	rdprs	zero,at,447
 800682c:	08006ff8 	rdprs	zero,at,447
 8006830:	08006a18 	cmpnei	zero,at,424
 8006834:	08006ff8 	rdprs	zero,at,447
 8006838:	08006ff8 	rdprs	zero,at,447
 800683c:	08006ff8 	rdprs	zero,at,447
 8006840:	08006ff8 	rdprs	zero,at,447
 8006844:	08006ff8 	rdprs	zero,at,447
 8006848:	08006ff8 	rdprs	zero,at,447
 800684c:	08006988 	cmpgei	zero,at,422
 8006850:	08006b84 	addi	zero,at,430
 8006854:	08006ff8 	rdprs	zero,at,447
 8006858:	080069b0 	cmpltui	zero,at,422
 800685c:	08007034 	orhi	zero,at,448
 8006860:	08006ff8 	rdprs	zero,at,447
 8006864:	08007028 	cmpgeui	zero,at,448
 8006868:	08006fbc 	xorhi	zero,at,446
 800686c:	08006fbc 	xorhi	zero,at,446
 8006870:	08006fbc 	xorhi	zero,at,446
 8006874:	08006fbc 	xorhi	zero,at,446
 8006878:	08006fbc 	xorhi	zero,at,446
 800687c:	08006fbc 	xorhi	zero,at,446
 8006880:	08006fbc 	xorhi	zero,at,446
 8006884:	08006fbc 	xorhi	zero,at,446
 8006888:	08006fbc 	xorhi	zero,at,446
 800688c:	08006ff8 	rdprs	zero,at,447
 8006890:	08006ff8 	rdprs	zero,at,447
 8006894:	08006ff8 	rdprs	zero,at,447
 8006898:	08006ff8 	rdprs	zero,at,447
 800689c:	08006ff8 	rdprs	zero,at,447
 80068a0:	08006ff8 	rdprs	zero,at,447
 80068a4:	08006ff8 	rdprs	zero,at,447
 80068a8:	08006ff8 	rdprs	zero,at,447
 80068ac:	08006ff8 	rdprs	zero,at,447
 80068b0:	08006ff8 	rdprs	zero,at,447
 80068b4:	08006f40 	call	8006f4 <__alt_mem_onchip_memory2_0+0x8006f4>
 80068b8:	08006ff8 	rdprs	zero,at,447
 80068bc:	08006ff8 	rdprs	zero,at,447
 80068c0:	08006ff8 	rdprs	zero,at,447
 80068c4:	08006ff8 	rdprs	zero,at,447
 80068c8:	08006ff8 	rdprs	zero,at,447
 80068cc:	08006ff8 	rdprs	zero,at,447
 80068d0:	08006ff8 	rdprs	zero,at,447
 80068d4:	08006ff8 	rdprs	zero,at,447
 80068d8:	08006ff8 	rdprs	zero,at,447
 80068dc:	08006ff8 	rdprs	zero,at,447
 80068e0:	080070f0 	cmpltui	zero,at,451
 80068e4:	08006ff8 	rdprs	zero,at,447
 80068e8:	08006ff8 	rdprs	zero,at,447
 80068ec:	08006ff8 	rdprs	zero,at,447
 80068f0:	08006ff8 	rdprs	zero,at,447
 80068f4:	08006ff8 	rdprs	zero,at,447
 80068f8:	0800707c 	xorhi	zero,at,449
 80068fc:	08006ff8 	rdprs	zero,at,447
 8006900:	08006ff8 	rdprs	zero,at,447
 8006904:	08006d7c 	xorhi	zero,at,437
 8006908:	08006ff8 	rdprs	zero,at,447
 800690c:	08006ff8 	rdprs	zero,at,447
 8006910:	08006ff8 	rdprs	zero,at,447
 8006914:	08006ff8 	rdprs	zero,at,447
 8006918:	08006ff8 	rdprs	zero,at,447
 800691c:	08006ff8 	rdprs	zero,at,447
 8006920:	08006ff8 	rdprs	zero,at,447
 8006924:	08006ff8 	rdprs	zero,at,447
 8006928:	08006ff8 	rdprs	zero,at,447
 800692c:	08006ff8 	rdprs	zero,at,447
 8006930:	08006c48 	cmpgei	zero,at,433
 8006934:	08006e2c 	andhi	zero,at,440
 8006938:	08006ff8 	rdprs	zero,at,447
 800693c:	08006ff8 	rdprs	zero,at,447
 8006940:	08006ff8 	rdprs	zero,at,447
 8006944:	08006e20 	cmpeqi	zero,at,440
 8006948:	08006e2c 	andhi	zero,at,440
 800694c:	08006ff8 	rdprs	zero,at,447
 8006950:	08006ff8 	rdprs	zero,at,447
 8006954:	08006e0c 	andi	zero,at,440
 8006958:	08006ff8 	rdprs	zero,at,447
 800695c:	08006dcc 	andi	zero,at,439
 8006960:	08006b98 	cmpnei	zero,at,430
 8006964:	080069bc 	xorhi	zero,at,422
 8006968:	08006f34 	orhi	zero,at,444
 800696c:	08006ff8 	rdprs	zero,at,447
 8006970:	08006ee0 	cmpeqi	zero,at,443
 8006974:	08006ff8 	rdprs	zero,at,447
 8006978:	08006afc 	xorhi	zero,at,427
 800697c:	08006ff8 	rdprs	zero,at,447
 8006980:	08006ff8 	rdprs	zero,at,447
 8006984:	08006a48 	cmpgei	zero,at,425
 8006988:	d9002417 	ldw	r4,144(sp)
 800698c:	d9402417 	ldw	r5,144(sp)
 8006990:	21000017 	ldw	r4,0(r4)
 8006994:	28800104 	addi	r2,r5,4
 8006998:	d9002515 	stw	r4,148(sp)
 800699c:	20032b0e 	bge	r4,zero,800764c <___svfiprintf_internal_r+0xf7c>
 80069a0:	d8c02517 	ldw	r3,148(sp)
 80069a4:	d8802415 	stw	r2,144(sp)
 80069a8:	00c7c83a 	sub	r3,zero,r3
 80069ac:	d8c02515 	stw	r3,148(sp)
 80069b0:	8c400114 	ori	r17,r17,4
 80069b4:	98c00007 	ldb	r3,0(r19)
 80069b8:	003f9106 	br	8006800 <__alt_data_end+0xfc006800>
 80069bc:	00800c04 	movi	r2,48
 80069c0:	d9402417 	ldw	r5,144(sp)
 80069c4:	d9002017 	ldw	r4,128(sp)
 80069c8:	d8801d05 	stb	r2,116(sp)
 80069cc:	00801e04 	movi	r2,120
 80069d0:	d8801d45 	stb	r2,117(sp)
 80069d4:	d8001d85 	stb	zero,118(sp)
 80069d8:	b811883a 	mov	r8,r23
 80069dc:	28c00104 	addi	r3,r5,4
 80069e0:	2c800017 	ldw	r18,0(r5)
 80069e4:	0029883a 	mov	r20,zero
 80069e8:	88800094 	ori	r2,r17,2
 80069ec:	20036316 	blt	r4,zero,800777c <___svfiprintf_internal_r+0x10ac>
 80069f0:	00bfdfc4 	movi	r2,-129
 80069f4:	88a0703a 	and	r16,r17,r2
 80069f8:	d8c02415 	stw	r3,144(sp)
 80069fc:	84000094 	ori	r16,r16,2
 8006a00:	90031c26 	beq	r18,zero,8007674 <___svfiprintf_internal_r+0xfa4>
 8006a04:	01420074 	movhi	r5,2049
 8006a08:	29784304 	addi	r5,r5,-7924
 8006a0c:	002b883a 	mov	r21,zero
 8006a10:	d9402915 	stw	r5,164(sp)
 8006a14:	00002906 	br	8006abc <___svfiprintf_internal_r+0x3ec>
 8006a18:	8c400054 	ori	r17,r17,1
 8006a1c:	98c00007 	ldb	r3,0(r19)
 8006a20:	003f7706 	br	8006800 <__alt_data_end+0xfc006800>
 8006a24:	a8803fcc 	andi	r2,r21,255
 8006a28:	1080201c 	xori	r2,r2,128
 8006a2c:	10bfe004 	addi	r2,r2,-128
 8006a30:	10032a1e 	bne	r2,zero,80076dc <___svfiprintf_internal_r+0x100c>
 8006a34:	00c00044 	movi	r3,1
 8006a38:	d8c02105 	stb	r3,132(sp)
 8006a3c:	05400804 	movi	r21,32
 8006a40:	98c00007 	ldb	r3,0(r19)
 8006a44:	003f6e06 	br	8006800 <__alt_data_end+0xfc006800>
 8006a48:	8821883a 	mov	r16,r17
 8006a4c:	dc402103 	ldbu	r17,132(sp)
 8006a50:	b811883a 	mov	r8,r23
 8006a54:	8c403fcc 	andi	r17,r17,255
 8006a58:	8803f01e 	bne	r17,zero,8007a1c <___svfiprintf_internal_r+0x134c>
 8006a5c:	00820074 	movhi	r2,2049
 8006a60:	10b84304 	addi	r2,r2,-7924
 8006a64:	d8802915 	stw	r2,164(sp)
 8006a68:	8080080c 	andi	r2,r16,32
 8006a6c:	1000cd26 	beq	r2,zero,8006da4 <___svfiprintf_internal_r+0x6d4>
 8006a70:	d9002417 	ldw	r4,144(sp)
 8006a74:	24800017 	ldw	r18,0(r4)
 8006a78:	25000117 	ldw	r20,4(r4)
 8006a7c:	21000204 	addi	r4,r4,8
 8006a80:	d9002415 	stw	r4,144(sp)
 8006a84:	8080004c 	andi	r2,r16,1
 8006a88:	1002c726 	beq	r2,zero,80075a8 <___svfiprintf_internal_r+0xed8>
 8006a8c:	9504b03a 	or	r2,r18,r20
 8006a90:	1003061e 	bne	r2,zero,80076ac <___svfiprintf_internal_r+0xfdc>
 8006a94:	d9002017 	ldw	r4,128(sp)
 8006a98:	d8001d85 	stb	zero,118(sp)
 8006a9c:	20033e16 	blt	r4,zero,8007798 <___svfiprintf_internal_r+0x10c8>
 8006aa0:	00bfdfc4 	movi	r2,-129
 8006aa4:	80a0703a 	and	r16,r16,r2
 8006aa8:	d9402017 	ldw	r5,128(sp)
 8006aac:	002b883a 	mov	r21,zero
 8006ab0:	28002826 	beq	r5,zero,8006b54 <___svfiprintf_internal_r+0x484>
 8006ab4:	0025883a 	mov	r18,zero
 8006ab8:	0029883a 	mov	r20,zero
 8006abc:	d9002917 	ldw	r4,164(sp)
 8006ac0:	dc401a04 	addi	r17,sp,104
 8006ac4:	908003cc 	andi	r2,r18,15
 8006ac8:	a006973a 	slli	r3,r20,28
 8006acc:	2085883a 	add	r2,r4,r2
 8006ad0:	9024d13a 	srli	r18,r18,4
 8006ad4:	10800003 	ldbu	r2,0(r2)
 8006ad8:	a028d13a 	srli	r20,r20,4
 8006adc:	8c7fffc4 	addi	r17,r17,-1
 8006ae0:	1ca4b03a 	or	r18,r3,r18
 8006ae4:	88800005 	stb	r2,0(r17)
 8006ae8:	9504b03a 	or	r2,r18,r20
 8006aec:	103ff51e 	bne	r2,zero,8006ac4 <__alt_data_end+0xfc006ac4>
 8006af0:	d8801e17 	ldw	r2,120(sp)
 8006af4:	1469c83a 	sub	r20,r2,r17
 8006af8:	00001906 	br	8006b60 <___svfiprintf_internal_r+0x490>
 8006afc:	8821883a 	mov	r16,r17
 8006b00:	dc402103 	ldbu	r17,132(sp)
 8006b04:	b811883a 	mov	r8,r23
 8006b08:	8c403fcc 	andi	r17,r17,255
 8006b0c:	8803d01e 	bne	r17,zero,8007a50 <___svfiprintf_internal_r+0x1380>
 8006b10:	8080080c 	andi	r2,r16,32
 8006b14:	10016126 	beq	r2,zero,800709c <___svfiprintf_internal_r+0x9cc>
 8006b18:	d9002417 	ldw	r4,144(sp)
 8006b1c:	d9402017 	ldw	r5,128(sp)
 8006b20:	d8001d85 	stb	zero,118(sp)
 8006b24:	20c00204 	addi	r3,r4,8
 8006b28:	24800017 	ldw	r18,0(r4)
 8006b2c:	25000117 	ldw	r20,4(r4)
 8006b30:	28030f16 	blt	r5,zero,8007770 <___svfiprintf_internal_r+0x10a0>
 8006b34:	013fdfc4 	movi	r4,-129
 8006b38:	9504b03a 	or	r2,r18,r20
 8006b3c:	d8c02415 	stw	r3,144(sp)
 8006b40:	8120703a 	and	r16,r16,r4
 8006b44:	002b883a 	mov	r21,zero
 8006b48:	1000cd1e 	bne	r2,zero,8006e80 <___svfiprintf_internal_r+0x7b0>
 8006b4c:	d8c02017 	ldw	r3,128(sp)
 8006b50:	1803141e 	bne	r3,zero,80077a4 <___svfiprintf_internal_r+0x10d4>
 8006b54:	d8002015 	stw	zero,128(sp)
 8006b58:	0029883a 	mov	r20,zero
 8006b5c:	dc401a04 	addi	r17,sp,104
 8006b60:	dc802017 	ldw	r18,128(sp)
 8006b64:	9500010e 	bge	r18,r20,8006b6c <___svfiprintf_internal_r+0x49c>
 8006b68:	a025883a 	mov	r18,r20
 8006b6c:	ad403fcc 	andi	r21,r21,255
 8006b70:	ad40201c 	xori	r21,r21,128
 8006b74:	ad7fe004 	addi	r21,r21,-128
 8006b78:	a8003f26 	beq	r21,zero,8006c78 <___svfiprintf_internal_r+0x5a8>
 8006b7c:	94800044 	addi	r18,r18,1
 8006b80:	00003d06 	br	8006c78 <___svfiprintf_internal_r+0x5a8>
 8006b84:	00c00044 	movi	r3,1
 8006b88:	d8c02105 	stb	r3,132(sp)
 8006b8c:	05400ac4 	movi	r21,43
 8006b90:	98c00007 	ldb	r3,0(r19)
 8006b94:	003f1a06 	br	8006800 <__alt_data_end+0xfc006800>
 8006b98:	8821883a 	mov	r16,r17
 8006b9c:	dc402103 	ldbu	r17,132(sp)
 8006ba0:	b811883a 	mov	r8,r23
 8006ba4:	8c403fcc 	andi	r17,r17,255
 8006ba8:	8803a71e 	bne	r17,zero,8007a48 <___svfiprintf_internal_r+0x1378>
 8006bac:	8080080c 	andi	r2,r16,32
 8006bb0:	10015726 	beq	r2,zero,8007110 <___svfiprintf_internal_r+0xa40>
 8006bb4:	d8c02417 	ldw	r3,144(sp)
 8006bb8:	d9002017 	ldw	r4,128(sp)
 8006bbc:	d8001d85 	stb	zero,118(sp)
 8006bc0:	18800204 	addi	r2,r3,8
 8006bc4:	1c800017 	ldw	r18,0(r3)
 8006bc8:	1d000117 	ldw	r20,4(r3)
 8006bcc:	2002db16 	blt	r4,zero,800773c <___svfiprintf_internal_r+0x106c>
 8006bd0:	013fdfc4 	movi	r4,-129
 8006bd4:	9506b03a 	or	r3,r18,r20
 8006bd8:	d8802415 	stw	r2,144(sp)
 8006bdc:	8120703a 	and	r16,r16,r4
 8006be0:	18015826 	beq	r3,zero,8007144 <___svfiprintf_internal_r+0xa74>
 8006be4:	002b883a 	mov	r21,zero
 8006be8:	dc401a04 	addi	r17,sp,104
 8006bec:	9006d0fa 	srli	r3,r18,3
 8006bf0:	a008977a 	slli	r4,r20,29
 8006bf4:	a028d0fa 	srli	r20,r20,3
 8006bf8:	948001cc 	andi	r18,r18,7
 8006bfc:	90800c04 	addi	r2,r18,48
 8006c00:	8c7fffc4 	addi	r17,r17,-1
 8006c04:	20e4b03a 	or	r18,r4,r3
 8006c08:	88800005 	stb	r2,0(r17)
 8006c0c:	9506b03a 	or	r3,r18,r20
 8006c10:	183ff61e 	bne	r3,zero,8006bec <__alt_data_end+0xfc006bec>
 8006c14:	80c0004c 	andi	r3,r16,1
 8006c18:	18028926 	beq	r3,zero,8007640 <___svfiprintf_internal_r+0xf70>
 8006c1c:	10803fcc 	andi	r2,r2,255
 8006c20:	1080201c 	xori	r2,r2,128
 8006c24:	10bfe004 	addi	r2,r2,-128
 8006c28:	00c00c04 	movi	r3,48
 8006c2c:	10ffb026 	beq	r2,r3,8006af0 <__alt_data_end+0xfc006af0>
 8006c30:	88ffffc5 	stb	r3,-1(r17)
 8006c34:	d8c01e17 	ldw	r3,120(sp)
 8006c38:	88bfffc4 	addi	r2,r17,-1
 8006c3c:	1023883a 	mov	r17,r2
 8006c40:	18a9c83a 	sub	r20,r3,r2
 8006c44:	003fc606 	br	8006b60 <__alt_data_end+0xfc006b60>
 8006c48:	d8c02417 	ldw	r3,144(sp)
 8006c4c:	04800044 	movi	r18,1
 8006c50:	8821883a 	mov	r16,r17
 8006c54:	18800017 	ldw	r2,0(r3)
 8006c58:	18c00104 	addi	r3,r3,4
 8006c5c:	b811883a 	mov	r8,r23
 8006c60:	d8001d85 	stb	zero,118(sp)
 8006c64:	d8801005 	stb	r2,64(sp)
 8006c68:	d8c02415 	stw	r3,144(sp)
 8006c6c:	9029883a 	mov	r20,r18
 8006c70:	dc401004 	addi	r17,sp,64
 8006c74:	d8002015 	stw	zero,128(sp)
 8006c78:	80c0008c 	andi	r3,r16,2
 8006c7c:	d8c02115 	stw	r3,132(sp)
 8006c80:	18000126 	beq	r3,zero,8006c88 <___svfiprintf_internal_r+0x5b8>
 8006c84:	94800084 	addi	r18,r18,2
 8006c88:	80c0210c 	andi	r3,r16,132
 8006c8c:	d8c02215 	stw	r3,136(sp)
 8006c90:	1801321e 	bne	r3,zero,800715c <___svfiprintf_internal_r+0xa8c>
 8006c94:	d9002517 	ldw	r4,148(sp)
 8006c98:	24b9c83a 	sub	fp,r4,r18
 8006c9c:	07012f0e 	bge	zero,fp,800715c <___svfiprintf_internal_r+0xa8c>
 8006ca0:	02400404 	movi	r9,16
 8006ca4:	d8c01c17 	ldw	r3,112(sp)
 8006ca8:	d8801b17 	ldw	r2,108(sp)
 8006cac:	4f03250e 	bge	r9,fp,8007944 <___svfiprintf_internal_r+0x1274>
 8006cb0:	01020074 	movhi	r4,2049
 8006cb4:	2138a804 	addi	r4,r4,-7520
 8006cb8:	dc002a15 	stw	r16,168(sp)
 8006cbc:	dc402b15 	stw	r17,172(sp)
 8006cc0:	d9002815 	stw	r4,160(sp)
 8006cc4:	e023883a 	mov	r17,fp
 8006cc8:	482f883a 	mov	r23,r9
 8006ccc:	9839883a 	mov	fp,r19
 8006cd0:	054001c4 	movi	r21,7
 8006cd4:	9027883a 	mov	r19,r18
 8006cd8:	dc002717 	ldw	r16,156(sp)
 8006cdc:	dc802317 	ldw	r18,140(sp)
 8006ce0:	00000306 	br	8006cf0 <___svfiprintf_internal_r+0x620>
 8006ce4:	8c7ffc04 	addi	r17,r17,-16
 8006ce8:	42000204 	addi	r8,r8,8
 8006cec:	bc40130e 	bge	r23,r17,8006d3c <___svfiprintf_internal_r+0x66c>
 8006cf0:	01420074 	movhi	r5,2049
 8006cf4:	18c00404 	addi	r3,r3,16
 8006cf8:	10800044 	addi	r2,r2,1
 8006cfc:	2978a804 	addi	r5,r5,-7520
 8006d00:	41400015 	stw	r5,0(r8)
 8006d04:	45c00115 	stw	r23,4(r8)
 8006d08:	d8c01c15 	stw	r3,112(sp)
 8006d0c:	d8801b15 	stw	r2,108(sp)
 8006d10:	a8bff40e 	bge	r21,r2,8006ce4 <__alt_data_end+0xfc006ce4>
 8006d14:	d9801a04 	addi	r6,sp,104
 8006d18:	900b883a 	mov	r5,r18
 8006d1c:	8009883a 	mov	r4,r16
 8006d20:	80065000 	call	8006500 <__ssprint_r>
 8006d24:	1001aa1e 	bne	r2,zero,80073d0 <___svfiprintf_internal_r+0xd00>
 8006d28:	8c7ffc04 	addi	r17,r17,-16
 8006d2c:	d8c01c17 	ldw	r3,112(sp)
 8006d30:	d8801b17 	ldw	r2,108(sp)
 8006d34:	d811883a 	mov	r8,sp
 8006d38:	bc7fed16 	blt	r23,r17,8006cf0 <__alt_data_end+0xfc006cf0>
 8006d3c:	9825883a 	mov	r18,r19
 8006d40:	dc002a17 	ldw	r16,168(sp)
 8006d44:	e027883a 	mov	r19,fp
 8006d48:	8839883a 	mov	fp,r17
 8006d4c:	dc402b17 	ldw	r17,172(sp)
 8006d50:	d9002817 	ldw	r4,160(sp)
 8006d54:	e0c7883a 	add	r3,fp,r3
 8006d58:	10800044 	addi	r2,r2,1
 8006d5c:	41000015 	stw	r4,0(r8)
 8006d60:	47000115 	stw	fp,4(r8)
 8006d64:	d8c01c15 	stw	r3,112(sp)
 8006d68:	d8801b15 	stw	r2,108(sp)
 8006d6c:	010001c4 	movi	r4,7
 8006d70:	20821616 	blt	r4,r2,80075cc <___svfiprintf_internal_r+0xefc>
 8006d74:	42000204 	addi	r8,r8,8
 8006d78:	0000fa06 	br	8007164 <___svfiprintf_internal_r+0xa94>
 8006d7c:	8821883a 	mov	r16,r17
 8006d80:	dc402103 	ldbu	r17,132(sp)
 8006d84:	b811883a 	mov	r8,r23
 8006d88:	8c403fcc 	andi	r17,r17,255
 8006d8c:	8803361e 	bne	r17,zero,8007a68 <___svfiprintf_internal_r+0x1398>
 8006d90:	01420074 	movhi	r5,2049
 8006d94:	29783e04 	addi	r5,r5,-7944
 8006d98:	d9402915 	stw	r5,164(sp)
 8006d9c:	8080080c 	andi	r2,r16,32
 8006da0:	103f331e 	bne	r2,zero,8006a70 <__alt_data_end+0xfc006a70>
 8006da4:	8080040c 	andi	r2,r16,16
 8006da8:	1002551e 	bne	r2,zero,8007700 <___svfiprintf_internal_r+0x1030>
 8006dac:	8080100c 	andi	r2,r16,64
 8006db0:	1002a626 	beq	r2,zero,800784c <___svfiprintf_internal_r+0x117c>
 8006db4:	d8802417 	ldw	r2,144(sp)
 8006db8:	0029883a 	mov	r20,zero
 8006dbc:	1480000b 	ldhu	r18,0(r2)
 8006dc0:	10800104 	addi	r2,r2,4
 8006dc4:	d8802415 	stw	r2,144(sp)
 8006dc8:	003f2e06 	br	8006a84 <__alt_data_end+0xfc006a84>
 8006dcc:	8821883a 	mov	r16,r17
 8006dd0:	dc402103 	ldbu	r17,132(sp)
 8006dd4:	b811883a 	mov	r8,r23
 8006dd8:	8c403fcc 	andi	r17,r17,255
 8006ddc:	88030b1e 	bne	r17,zero,8007a0c <___svfiprintf_internal_r+0x133c>
 8006de0:	8080080c 	andi	r2,r16,32
 8006de4:	1002271e 	bne	r2,zero,8007684 <___svfiprintf_internal_r+0xfb4>
 8006de8:	8080040c 	andi	r2,r16,16
 8006dec:	10028e26 	beq	r2,zero,8007828 <___svfiprintf_internal_r+0x1158>
 8006df0:	d8c02417 	ldw	r3,144(sp)
 8006df4:	d9002617 	ldw	r4,152(sp)
 8006df8:	18800017 	ldw	r2,0(r3)
 8006dfc:	18c00104 	addi	r3,r3,4
 8006e00:	d8c02415 	stw	r3,144(sp)
 8006e04:	11000015 	stw	r4,0(r2)
 8006e08:	003e5306 	br	8006758 <__alt_data_end+0xfc006758>
 8006e0c:	98c00007 	ldb	r3,0(r19)
 8006e10:	01401b04 	movi	r5,108
 8006e14:	19424f26 	beq	r3,r5,8007754 <___svfiprintf_internal_r+0x1084>
 8006e18:	8c400414 	ori	r17,r17,16
 8006e1c:	003e7806 	br	8006800 <__alt_data_end+0xfc006800>
 8006e20:	8c401014 	ori	r17,r17,64
 8006e24:	98c00007 	ldb	r3,0(r19)
 8006e28:	003e7506 	br	8006800 <__alt_data_end+0xfc006800>
 8006e2c:	8821883a 	mov	r16,r17
 8006e30:	dc402103 	ldbu	r17,132(sp)
 8006e34:	b811883a 	mov	r8,r23
 8006e38:	8c403fcc 	andi	r17,r17,255
 8006e3c:	8802fe1e 	bne	r17,zero,8007a38 <___svfiprintf_internal_r+0x1368>
 8006e40:	8080080c 	andi	r2,r16,32
 8006e44:	10004626 	beq	r2,zero,8006f60 <___svfiprintf_internal_r+0x890>
 8006e48:	d9002417 	ldw	r4,144(sp)
 8006e4c:	20800117 	ldw	r2,4(r4)
 8006e50:	24800017 	ldw	r18,0(r4)
 8006e54:	21000204 	addi	r4,r4,8
 8006e58:	d9002415 	stw	r4,144(sp)
 8006e5c:	1029883a 	mov	r20,r2
 8006e60:	10004a16 	blt	r2,zero,8006f8c <___svfiprintf_internal_r+0x8bc>
 8006e64:	d9002017 	ldw	r4,128(sp)
 8006e68:	dd401d83 	ldbu	r21,118(sp)
 8006e6c:	2001eb16 	blt	r4,zero,800761c <___svfiprintf_internal_r+0xf4c>
 8006e70:	00ffdfc4 	movi	r3,-129
 8006e74:	9504b03a 	or	r2,r18,r20
 8006e78:	80e0703a 	and	r16,r16,r3
 8006e7c:	103f3326 	beq	r2,zero,8006b4c <__alt_data_end+0xfc006b4c>
 8006e80:	a0009426 	beq	r20,zero,80070d4 <___svfiprintf_internal_r+0xa04>
 8006e84:	dc401a04 	addi	r17,sp,104
 8006e88:	402f883a 	mov	r23,r8
 8006e8c:	9009883a 	mov	r4,r18
 8006e90:	a00b883a 	mov	r5,r20
 8006e94:	01800284 	movi	r6,10
 8006e98:	000f883a 	mov	r7,zero
 8006e9c:	8008e700 	call	8008e70 <__umoddi3>
 8006ea0:	10800c04 	addi	r2,r2,48
 8006ea4:	8c7fffc4 	addi	r17,r17,-1
 8006ea8:	9009883a 	mov	r4,r18
 8006eac:	a00b883a 	mov	r5,r20
 8006eb0:	88800005 	stb	r2,0(r17)
 8006eb4:	01800284 	movi	r6,10
 8006eb8:	000f883a 	mov	r7,zero
 8006ebc:	80088740 	call	8008874 <__udivdi3>
 8006ec0:	1025883a 	mov	r18,r2
 8006ec4:	10c4b03a 	or	r2,r2,r3
 8006ec8:	1829883a 	mov	r20,r3
 8006ecc:	103fef1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8006ed0:	d9001e17 	ldw	r4,120(sp)
 8006ed4:	b811883a 	mov	r8,r23
 8006ed8:	2469c83a 	sub	r20,r4,r17
 8006edc:	003f2006 	br	8006b60 <__alt_data_end+0xfc006b60>
 8006ee0:	d8802417 	ldw	r2,144(sp)
 8006ee4:	8821883a 	mov	r16,r17
 8006ee8:	d8001d85 	stb	zero,118(sp)
 8006eec:	14400017 	ldw	r17,0(r2)
 8006ef0:	b811883a 	mov	r8,r23
 8006ef4:	15c00104 	addi	r23,r2,4
 8006ef8:	88026c26 	beq	r17,zero,80078ac <___svfiprintf_internal_r+0x11dc>
 8006efc:	d8c02017 	ldw	r3,128(sp)
 8006f00:	18025f16 	blt	r3,zero,8007880 <___svfiprintf_internal_r+0x11b0>
 8006f04:	180d883a 	mov	r6,r3
 8006f08:	000b883a 	mov	r5,zero
 8006f0c:	8809883a 	mov	r4,r17
 8006f10:	da002d15 	stw	r8,180(sp)
 8006f14:	80050780 	call	8005078 <memchr>
 8006f18:	da002d17 	ldw	r8,180(sp)
 8006f1c:	1002a526 	beq	r2,zero,80079b4 <___svfiprintf_internal_r+0x12e4>
 8006f20:	1469c83a 	sub	r20,r2,r17
 8006f24:	dd401d83 	ldbu	r21,118(sp)
 8006f28:	ddc02415 	stw	r23,144(sp)
 8006f2c:	d8002015 	stw	zero,128(sp)
 8006f30:	003f0b06 	br	8006b60 <__alt_data_end+0xfc006b60>
 8006f34:	8c400814 	ori	r17,r17,32
 8006f38:	98c00007 	ldb	r3,0(r19)
 8006f3c:	003e3006 	br	8006800 <__alt_data_end+0xfc006800>
 8006f40:	8821883a 	mov	r16,r17
 8006f44:	dc402103 	ldbu	r17,132(sp)
 8006f48:	b811883a 	mov	r8,r23
 8006f4c:	8c403fcc 	andi	r17,r17,255
 8006f50:	8802b01e 	bne	r17,zero,8007a14 <___svfiprintf_internal_r+0x1344>
 8006f54:	84000414 	ori	r16,r16,16
 8006f58:	8080080c 	andi	r2,r16,32
 8006f5c:	103fba1e 	bne	r2,zero,8006e48 <__alt_data_end+0xfc006e48>
 8006f60:	8080040c 	andi	r2,r16,16
 8006f64:	1001df1e 	bne	r2,zero,80076e4 <___svfiprintf_internal_r+0x1014>
 8006f68:	8080100c 	andi	r2,r16,64
 8006f6c:	10023d26 	beq	r2,zero,8007864 <___svfiprintf_internal_r+0x1194>
 8006f70:	d8802417 	ldw	r2,144(sp)
 8006f74:	1480000f 	ldh	r18,0(r2)
 8006f78:	10800104 	addi	r2,r2,4
 8006f7c:	d8802415 	stw	r2,144(sp)
 8006f80:	9029d7fa 	srai	r20,r18,31
 8006f84:	a005883a 	mov	r2,r20
 8006f88:	103fb60e 	bge	r2,zero,8006e64 <__alt_data_end+0xfc006e64>
 8006f8c:	d9402017 	ldw	r5,128(sp)
 8006f90:	04a5c83a 	sub	r18,zero,r18
 8006f94:	05400b44 	movi	r21,45
 8006f98:	9004c03a 	cmpne	r2,r18,zero
 8006f9c:	0529c83a 	sub	r20,zero,r20
 8006fa0:	dd401d85 	stb	r21,118(sp)
 8006fa4:	a0a9c83a 	sub	r20,r20,r2
 8006fa8:	28026c16 	blt	r5,zero,800795c <___svfiprintf_internal_r+0x128c>
 8006fac:	00bfdfc4 	movi	r2,-129
 8006fb0:	80a0703a 	and	r16,r16,r2
 8006fb4:	a03fb31e 	bne	r20,zero,8006e84 <__alt_data_end+0xfc006e84>
 8006fb8:	00004606 	br	80070d4 <___svfiprintf_internal_r+0xa04>
 8006fbc:	9839883a 	mov	fp,r19
 8006fc0:	d8002515 	stw	zero,148(sp)
 8006fc4:	1c3ff404 	addi	r16,r3,-48
 8006fc8:	0009883a 	mov	r4,zero
 8006fcc:	01400284 	movi	r5,10
 8006fd0:	8000a240 	call	8000a24 <__mulsi3>
 8006fd4:	e0c00007 	ldb	r3,0(fp)
 8006fd8:	8089883a 	add	r4,r16,r2
 8006fdc:	9cc00044 	addi	r19,r19,1
 8006fe0:	1c3ff404 	addi	r16,r3,-48
 8006fe4:	9839883a 	mov	fp,r19
 8006fe8:	a43ff82e 	bgeu	r20,r16,8006fcc <__alt_data_end+0xfc006fcc>
 8006fec:	d9002515 	stw	r4,148(sp)
 8006ff0:	18bff804 	addi	r2,r3,-32
 8006ff4:	90be052e 	bgeu	r18,r2,800680c <__alt_data_end+0xfc00680c>
 8006ff8:	8821883a 	mov	r16,r17
 8006ffc:	dc402103 	ldbu	r17,132(sp)
 8007000:	b811883a 	mov	r8,r23
 8007004:	8c403fcc 	andi	r17,r17,255
 8007008:	88028d1e 	bne	r17,zero,8007a40 <___svfiprintf_internal_r+0x1370>
 800700c:	1800ea26 	beq	r3,zero,80073b8 <___svfiprintf_internal_r+0xce8>
 8007010:	04800044 	movi	r18,1
 8007014:	d8c01005 	stb	r3,64(sp)
 8007018:	d8001d85 	stb	zero,118(sp)
 800701c:	9029883a 	mov	r20,r18
 8007020:	dc401004 	addi	r17,sp,64
 8007024:	003f1306 	br	8006c74 <__alt_data_end+0xfc006c74>
 8007028:	8c402014 	ori	r17,r17,128
 800702c:	98c00007 	ldb	r3,0(r19)
 8007030:	003df306 	br	8006800 <__alt_data_end+0xfc006800>
 8007034:	98c00007 	ldb	r3,0(r19)
 8007038:	01000a84 	movi	r4,42
 800703c:	9f000044 	addi	fp,r19,1
 8007040:	19026326 	beq	r3,r4,80079d0 <___svfiprintf_internal_r+0x1300>
 8007044:	1c3ff404 	addi	r16,r3,-48
 8007048:	0009883a 	mov	r4,zero
 800704c:	a4025636 	bltu	r20,r16,80079a8 <___svfiprintf_internal_r+0x12d8>
 8007050:	01400284 	movi	r5,10
 8007054:	8000a240 	call	8000a24 <__mulsi3>
 8007058:	e0c00007 	ldb	r3,0(fp)
 800705c:	1409883a 	add	r4,r2,r16
 8007060:	e4c00044 	addi	r19,fp,1
 8007064:	1c3ff404 	addi	r16,r3,-48
 8007068:	9839883a 	mov	fp,r19
 800706c:	a43ff82e 	bgeu	r20,r16,8007050 <__alt_data_end+0xfc007050>
 8007070:	20020c16 	blt	r4,zero,80078a4 <___svfiprintf_internal_r+0x11d4>
 8007074:	d9002015 	stw	r4,128(sp)
 8007078:	003de206 	br	8006804 <__alt_data_end+0xfc006804>
 800707c:	8821883a 	mov	r16,r17
 8007080:	dc402103 	ldbu	r17,132(sp)
 8007084:	b811883a 	mov	r8,r23
 8007088:	8c403fcc 	andi	r17,r17,255
 800708c:	8802721e 	bne	r17,zero,8007a58 <___svfiprintf_internal_r+0x1388>
 8007090:	84000414 	ori	r16,r16,16
 8007094:	8080080c 	andi	r2,r16,32
 8007098:	103e9f1e 	bne	r2,zero,8006b18 <__alt_data_end+0xfc006b18>
 800709c:	8080040c 	andi	r2,r16,16
 80070a0:	10015326 	beq	r2,zero,80075f0 <___svfiprintf_internal_r+0xf20>
 80070a4:	d8c02417 	ldw	r3,144(sp)
 80070a8:	d9002017 	ldw	r4,128(sp)
 80070ac:	d8001d85 	stb	zero,118(sp)
 80070b0:	18800104 	addi	r2,r3,4
 80070b4:	1c800017 	ldw	r18,0(r3)
 80070b8:	0029883a 	mov	r20,zero
 80070bc:	20015516 	blt	r4,zero,8007614 <___svfiprintf_internal_r+0xf44>
 80070c0:	00ffdfc4 	movi	r3,-129
 80070c4:	d8802415 	stw	r2,144(sp)
 80070c8:	80e0703a 	and	r16,r16,r3
 80070cc:	002b883a 	mov	r21,zero
 80070d0:	903e9e26 	beq	r18,zero,8006b4c <__alt_data_end+0xfc006b4c>
 80070d4:	00800244 	movi	r2,9
 80070d8:	14bf6a36 	bltu	r2,r18,8006e84 <__alt_data_end+0xfc006e84>
 80070dc:	94800c04 	addi	r18,r18,48
 80070e0:	dc8019c5 	stb	r18,103(sp)
 80070e4:	dd002c17 	ldw	r20,176(sp)
 80070e8:	dc4019c4 	addi	r17,sp,103
 80070ec:	003e9c06 	br	8006b60 <__alt_data_end+0xfc006b60>
 80070f0:	8821883a 	mov	r16,r17
 80070f4:	dc402103 	ldbu	r17,132(sp)
 80070f8:	b811883a 	mov	r8,r23
 80070fc:	8c403fcc 	andi	r17,r17,255
 8007100:	8802571e 	bne	r17,zero,8007a60 <___svfiprintf_internal_r+0x1390>
 8007104:	84000414 	ori	r16,r16,16
 8007108:	8080080c 	andi	r2,r16,32
 800710c:	103ea91e 	bne	r2,zero,8006bb4 <__alt_data_end+0xfc006bb4>
 8007110:	8080040c 	andi	r2,r16,16
 8007114:	10018026 	beq	r2,zero,8007718 <___svfiprintf_internal_r+0x1048>
 8007118:	d9402417 	ldw	r5,144(sp)
 800711c:	d8c02017 	ldw	r3,128(sp)
 8007120:	d8001d85 	stb	zero,118(sp)
 8007124:	28800104 	addi	r2,r5,4
 8007128:	2c800017 	ldw	r18,0(r5)
 800712c:	0029883a 	mov	r20,zero
 8007130:	18018216 	blt	r3,zero,800773c <___svfiprintf_internal_r+0x106c>
 8007134:	00ffdfc4 	movi	r3,-129
 8007138:	d8802415 	stw	r2,144(sp)
 800713c:	80e0703a 	and	r16,r16,r3
 8007140:	903ea81e 	bne	r18,zero,8006be4 <__alt_data_end+0xfc006be4>
 8007144:	d8802017 	ldw	r2,128(sp)
 8007148:	002b883a 	mov	r21,zero
 800714c:	1001f226 	beq	r2,zero,8007918 <___svfiprintf_internal_r+0x1248>
 8007150:	0025883a 	mov	r18,zero
 8007154:	0029883a 	mov	r20,zero
 8007158:	003ea306 	br	8006be8 <__alt_data_end+0xfc006be8>
 800715c:	d8c01c17 	ldw	r3,112(sp)
 8007160:	d8801b17 	ldw	r2,108(sp)
 8007164:	d9001d87 	ldb	r4,118(sp)
 8007168:	20000b26 	beq	r4,zero,8007198 <___svfiprintf_internal_r+0xac8>
 800716c:	d9001d84 	addi	r4,sp,118
 8007170:	18c00044 	addi	r3,r3,1
 8007174:	10800044 	addi	r2,r2,1
 8007178:	41000015 	stw	r4,0(r8)
 800717c:	01000044 	movi	r4,1
 8007180:	41000115 	stw	r4,4(r8)
 8007184:	d8c01c15 	stw	r3,112(sp)
 8007188:	d8801b15 	stw	r2,108(sp)
 800718c:	010001c4 	movi	r4,7
 8007190:	2080f316 	blt	r4,r2,8007560 <___svfiprintf_internal_r+0xe90>
 8007194:	42000204 	addi	r8,r8,8
 8007198:	d9402117 	ldw	r5,132(sp)
 800719c:	28000b26 	beq	r5,zero,80071cc <___svfiprintf_internal_r+0xafc>
 80071a0:	d9001d04 	addi	r4,sp,116
 80071a4:	18c00084 	addi	r3,r3,2
 80071a8:	10800044 	addi	r2,r2,1
 80071ac:	41000015 	stw	r4,0(r8)
 80071b0:	01000084 	movi	r4,2
 80071b4:	41000115 	stw	r4,4(r8)
 80071b8:	d8c01c15 	stw	r3,112(sp)
 80071bc:	d8801b15 	stw	r2,108(sp)
 80071c0:	010001c4 	movi	r4,7
 80071c4:	2080ef16 	blt	r4,r2,8007584 <___svfiprintf_internal_r+0xeb4>
 80071c8:	42000204 	addi	r8,r8,8
 80071cc:	d9402217 	ldw	r5,136(sp)
 80071d0:	01002004 	movi	r4,128
 80071d4:	29008f26 	beq	r5,r4,8007414 <___svfiprintf_internal_r+0xd44>
 80071d8:	d9002017 	ldw	r4,128(sp)
 80071dc:	252fc83a 	sub	r23,r4,r20
 80071e0:	05c0310e 	bge	zero,r23,80072a8 <___svfiprintf_internal_r+0xbd8>
 80071e4:	07000404 	movi	fp,16
 80071e8:	e5c17d0e 	bge	fp,r23,80077e0 <___svfiprintf_internal_r+0x1110>
 80071ec:	01020074 	movhi	r4,2049
 80071f0:	2138a404 	addi	r4,r4,-7536
 80071f4:	dc002015 	stw	r16,128(sp)
 80071f8:	dc402215 	stw	r17,136(sp)
 80071fc:	d9002115 	stw	r4,132(sp)
 8007200:	b823883a 	mov	r17,r23
 8007204:	054001c4 	movi	r21,7
 8007208:	982f883a 	mov	r23,r19
 800720c:	dc002717 	ldw	r16,156(sp)
 8007210:	9027883a 	mov	r19,r18
 8007214:	dc802317 	ldw	r18,140(sp)
 8007218:	00000306 	br	8007228 <___svfiprintf_internal_r+0xb58>
 800721c:	8c7ffc04 	addi	r17,r17,-16
 8007220:	42000204 	addi	r8,r8,8
 8007224:	e440110e 	bge	fp,r17,800726c <___svfiprintf_internal_r+0xb9c>
 8007228:	18c00404 	addi	r3,r3,16
 800722c:	10800044 	addi	r2,r2,1
 8007230:	45800015 	stw	r22,0(r8)
 8007234:	47000115 	stw	fp,4(r8)
 8007238:	d8c01c15 	stw	r3,112(sp)
 800723c:	d8801b15 	stw	r2,108(sp)
 8007240:	a8bff60e 	bge	r21,r2,800721c <__alt_data_end+0xfc00721c>
 8007244:	d9801a04 	addi	r6,sp,104
 8007248:	900b883a 	mov	r5,r18
 800724c:	8009883a 	mov	r4,r16
 8007250:	80065000 	call	8006500 <__ssprint_r>
 8007254:	10005e1e 	bne	r2,zero,80073d0 <___svfiprintf_internal_r+0xd00>
 8007258:	8c7ffc04 	addi	r17,r17,-16
 800725c:	d8c01c17 	ldw	r3,112(sp)
 8007260:	d8801b17 	ldw	r2,108(sp)
 8007264:	d811883a 	mov	r8,sp
 8007268:	e47fef16 	blt	fp,r17,8007228 <__alt_data_end+0xfc007228>
 800726c:	9825883a 	mov	r18,r19
 8007270:	dc002017 	ldw	r16,128(sp)
 8007274:	b827883a 	mov	r19,r23
 8007278:	882f883a 	mov	r23,r17
 800727c:	dc402217 	ldw	r17,136(sp)
 8007280:	d9402117 	ldw	r5,132(sp)
 8007284:	1dc7883a 	add	r3,r3,r23
 8007288:	10800044 	addi	r2,r2,1
 800728c:	41400015 	stw	r5,0(r8)
 8007290:	45c00115 	stw	r23,4(r8)
 8007294:	d8c01c15 	stw	r3,112(sp)
 8007298:	d8801b15 	stw	r2,108(sp)
 800729c:	010001c4 	movi	r4,7
 80072a0:	2080a616 	blt	r4,r2,800753c <___svfiprintf_internal_r+0xe6c>
 80072a4:	42000204 	addi	r8,r8,8
 80072a8:	a0c7883a 	add	r3,r20,r3
 80072ac:	10800044 	addi	r2,r2,1
 80072b0:	44400015 	stw	r17,0(r8)
 80072b4:	45000115 	stw	r20,4(r8)
 80072b8:	d8c01c15 	stw	r3,112(sp)
 80072bc:	d8801b15 	stw	r2,108(sp)
 80072c0:	010001c4 	movi	r4,7
 80072c4:	20808816 	blt	r4,r2,80074e8 <___svfiprintf_internal_r+0xe18>
 80072c8:	42000204 	addi	r8,r8,8
 80072cc:	8400010c 	andi	r16,r16,4
 80072d0:	80002c26 	beq	r16,zero,8007384 <___svfiprintf_internal_r+0xcb4>
 80072d4:	d8802517 	ldw	r2,148(sp)
 80072d8:	14a1c83a 	sub	r16,r2,r18
 80072dc:	0400290e 	bge	zero,r16,8007384 <___svfiprintf_internal_r+0xcb4>
 80072e0:	04400404 	movi	r17,16
 80072e4:	d8801b17 	ldw	r2,108(sp)
 80072e8:	8c01a70e 	bge	r17,r16,8007988 <___svfiprintf_internal_r+0x12b8>
 80072ec:	01420074 	movhi	r5,2049
 80072f0:	2978a804 	addi	r5,r5,-7520
 80072f4:	d9402815 	stw	r5,160(sp)
 80072f8:	050001c4 	movi	r20,7
 80072fc:	dd402717 	ldw	r21,156(sp)
 8007300:	ddc02317 	ldw	r23,140(sp)
 8007304:	00000306 	br	8007314 <___svfiprintf_internal_r+0xc44>
 8007308:	843ffc04 	addi	r16,r16,-16
 800730c:	42000204 	addi	r8,r8,8
 8007310:	8c00130e 	bge	r17,r16,8007360 <___svfiprintf_internal_r+0xc90>
 8007314:	01020074 	movhi	r4,2049
 8007318:	18c00404 	addi	r3,r3,16
 800731c:	10800044 	addi	r2,r2,1
 8007320:	2138a804 	addi	r4,r4,-7520
 8007324:	41000015 	stw	r4,0(r8)
 8007328:	44400115 	stw	r17,4(r8)
 800732c:	d8c01c15 	stw	r3,112(sp)
 8007330:	d8801b15 	stw	r2,108(sp)
 8007334:	a0bff40e 	bge	r20,r2,8007308 <__alt_data_end+0xfc007308>
 8007338:	d9801a04 	addi	r6,sp,104
 800733c:	b80b883a 	mov	r5,r23
 8007340:	a809883a 	mov	r4,r21
 8007344:	80065000 	call	8006500 <__ssprint_r>
 8007348:	1000211e 	bne	r2,zero,80073d0 <___svfiprintf_internal_r+0xd00>
 800734c:	843ffc04 	addi	r16,r16,-16
 8007350:	d8c01c17 	ldw	r3,112(sp)
 8007354:	d8801b17 	ldw	r2,108(sp)
 8007358:	d811883a 	mov	r8,sp
 800735c:	8c3fed16 	blt	r17,r16,8007314 <__alt_data_end+0xfc007314>
 8007360:	d9402817 	ldw	r5,160(sp)
 8007364:	1c07883a 	add	r3,r3,r16
 8007368:	10800044 	addi	r2,r2,1
 800736c:	41400015 	stw	r5,0(r8)
 8007370:	44000115 	stw	r16,4(r8)
 8007374:	d8c01c15 	stw	r3,112(sp)
 8007378:	d8801b15 	stw	r2,108(sp)
 800737c:	010001c4 	movi	r4,7
 8007380:	2080b516 	blt	r4,r2,8007658 <___svfiprintf_internal_r+0xf88>
 8007384:	d8802517 	ldw	r2,148(sp)
 8007388:	1480010e 	bge	r2,r18,8007390 <___svfiprintf_internal_r+0xcc0>
 800738c:	9005883a 	mov	r2,r18
 8007390:	d9002617 	ldw	r4,152(sp)
 8007394:	2089883a 	add	r4,r4,r2
 8007398:	d9002615 	stw	r4,152(sp)
 800739c:	18005a1e 	bne	r3,zero,8007508 <___svfiprintf_internal_r+0xe38>
 80073a0:	98800007 	ldb	r2,0(r19)
 80073a4:	d8001b15 	stw	zero,108(sp)
 80073a8:	d811883a 	mov	r8,sp
 80073ac:	103cec1e 	bne	r2,zero,8006760 <__alt_data_end+0xfc006760>
 80073b0:	9825883a 	mov	r18,r19
 80073b4:	003d0206 	br	80067c0 <__alt_data_end+0xfc0067c0>
 80073b8:	d8801c17 	ldw	r2,112(sp)
 80073bc:	10000426 	beq	r2,zero,80073d0 <___svfiprintf_internal_r+0xd00>
 80073c0:	d9402317 	ldw	r5,140(sp)
 80073c4:	d9002717 	ldw	r4,156(sp)
 80073c8:	d9801a04 	addi	r6,sp,104
 80073cc:	80065000 	call	8006500 <__ssprint_r>
 80073d0:	d9402317 	ldw	r5,140(sp)
 80073d4:	d8802617 	ldw	r2,152(sp)
 80073d8:	28c0030b 	ldhu	r3,12(r5)
 80073dc:	18c0100c 	andi	r3,r3,64
 80073e0:	18015c1e 	bne	r3,zero,8007954 <___svfiprintf_internal_r+0x1284>
 80073e4:	dfc03717 	ldw	ra,220(sp)
 80073e8:	df003617 	ldw	fp,216(sp)
 80073ec:	ddc03517 	ldw	r23,212(sp)
 80073f0:	dd803417 	ldw	r22,208(sp)
 80073f4:	dd403317 	ldw	r21,204(sp)
 80073f8:	dd003217 	ldw	r20,200(sp)
 80073fc:	dcc03117 	ldw	r19,196(sp)
 8007400:	dc803017 	ldw	r18,192(sp)
 8007404:	dc402f17 	ldw	r17,188(sp)
 8007408:	dc002e17 	ldw	r16,184(sp)
 800740c:	dec03804 	addi	sp,sp,224
 8007410:	f800283a 	ret
 8007414:	d9002517 	ldw	r4,148(sp)
 8007418:	24afc83a 	sub	r23,r4,r18
 800741c:	05ff6e0e 	bge	zero,r23,80071d8 <__alt_data_end+0xfc0071d8>
 8007420:	07000404 	movi	fp,16
 8007424:	e5c15c0e 	bge	fp,r23,8007998 <___svfiprintf_internal_r+0x12c8>
 8007428:	01020074 	movhi	r4,2049
 800742c:	2138a404 	addi	r4,r4,-7536
 8007430:	dc002215 	stw	r16,136(sp)
 8007434:	dc402815 	stw	r17,160(sp)
 8007438:	d9002115 	stw	r4,132(sp)
 800743c:	b823883a 	mov	r17,r23
 8007440:	054001c4 	movi	r21,7
 8007444:	982f883a 	mov	r23,r19
 8007448:	dc002717 	ldw	r16,156(sp)
 800744c:	9027883a 	mov	r19,r18
 8007450:	dc802317 	ldw	r18,140(sp)
 8007454:	00000306 	br	8007464 <___svfiprintf_internal_r+0xd94>
 8007458:	8c7ffc04 	addi	r17,r17,-16
 800745c:	42000204 	addi	r8,r8,8
 8007460:	e440110e 	bge	fp,r17,80074a8 <___svfiprintf_internal_r+0xdd8>
 8007464:	18c00404 	addi	r3,r3,16
 8007468:	10800044 	addi	r2,r2,1
 800746c:	45800015 	stw	r22,0(r8)
 8007470:	47000115 	stw	fp,4(r8)
 8007474:	d8c01c15 	stw	r3,112(sp)
 8007478:	d8801b15 	stw	r2,108(sp)
 800747c:	a8bff60e 	bge	r21,r2,8007458 <__alt_data_end+0xfc007458>
 8007480:	d9801a04 	addi	r6,sp,104
 8007484:	900b883a 	mov	r5,r18
 8007488:	8009883a 	mov	r4,r16
 800748c:	80065000 	call	8006500 <__ssprint_r>
 8007490:	103fcf1e 	bne	r2,zero,80073d0 <__alt_data_end+0xfc0073d0>
 8007494:	8c7ffc04 	addi	r17,r17,-16
 8007498:	d8c01c17 	ldw	r3,112(sp)
 800749c:	d8801b17 	ldw	r2,108(sp)
 80074a0:	d811883a 	mov	r8,sp
 80074a4:	e47fef16 	blt	fp,r17,8007464 <__alt_data_end+0xfc007464>
 80074a8:	9825883a 	mov	r18,r19
 80074ac:	dc002217 	ldw	r16,136(sp)
 80074b0:	b827883a 	mov	r19,r23
 80074b4:	882f883a 	mov	r23,r17
 80074b8:	dc402817 	ldw	r17,160(sp)
 80074bc:	d9402117 	ldw	r5,132(sp)
 80074c0:	1dc7883a 	add	r3,r3,r23
 80074c4:	10800044 	addi	r2,r2,1
 80074c8:	41400015 	stw	r5,0(r8)
 80074cc:	45c00115 	stw	r23,4(r8)
 80074d0:	d8c01c15 	stw	r3,112(sp)
 80074d4:	d8801b15 	stw	r2,108(sp)
 80074d8:	010001c4 	movi	r4,7
 80074dc:	2080b716 	blt	r4,r2,80077bc <___svfiprintf_internal_r+0x10ec>
 80074e0:	42000204 	addi	r8,r8,8
 80074e4:	003f3c06 	br	80071d8 <__alt_data_end+0xfc0071d8>
 80074e8:	d9402317 	ldw	r5,140(sp)
 80074ec:	d9002717 	ldw	r4,156(sp)
 80074f0:	d9801a04 	addi	r6,sp,104
 80074f4:	80065000 	call	8006500 <__ssprint_r>
 80074f8:	103fb51e 	bne	r2,zero,80073d0 <__alt_data_end+0xfc0073d0>
 80074fc:	d8c01c17 	ldw	r3,112(sp)
 8007500:	d811883a 	mov	r8,sp
 8007504:	003f7106 	br	80072cc <__alt_data_end+0xfc0072cc>
 8007508:	d9402317 	ldw	r5,140(sp)
 800750c:	d9002717 	ldw	r4,156(sp)
 8007510:	d9801a04 	addi	r6,sp,104
 8007514:	80065000 	call	8006500 <__ssprint_r>
 8007518:	103fa126 	beq	r2,zero,80073a0 <__alt_data_end+0xfc0073a0>
 800751c:	003fac06 	br	80073d0 <__alt_data_end+0xfc0073d0>
 8007520:	d9402317 	ldw	r5,140(sp)
 8007524:	d9002717 	ldw	r4,156(sp)
 8007528:	d9801a04 	addi	r6,sp,104
 800752c:	80065000 	call	8006500 <__ssprint_r>
 8007530:	103fa71e 	bne	r2,zero,80073d0 <__alt_data_end+0xfc0073d0>
 8007534:	d811883a 	mov	r8,sp
 8007538:	003c9e06 	br	80067b4 <__alt_data_end+0xfc0067b4>
 800753c:	d9402317 	ldw	r5,140(sp)
 8007540:	d9002717 	ldw	r4,156(sp)
 8007544:	d9801a04 	addi	r6,sp,104
 8007548:	80065000 	call	8006500 <__ssprint_r>
 800754c:	103fa01e 	bne	r2,zero,80073d0 <__alt_data_end+0xfc0073d0>
 8007550:	d8c01c17 	ldw	r3,112(sp)
 8007554:	d8801b17 	ldw	r2,108(sp)
 8007558:	d811883a 	mov	r8,sp
 800755c:	003f5206 	br	80072a8 <__alt_data_end+0xfc0072a8>
 8007560:	d9402317 	ldw	r5,140(sp)
 8007564:	d9002717 	ldw	r4,156(sp)
 8007568:	d9801a04 	addi	r6,sp,104
 800756c:	80065000 	call	8006500 <__ssprint_r>
 8007570:	103f971e 	bne	r2,zero,80073d0 <__alt_data_end+0xfc0073d0>
 8007574:	d8c01c17 	ldw	r3,112(sp)
 8007578:	d8801b17 	ldw	r2,108(sp)
 800757c:	d811883a 	mov	r8,sp
 8007580:	003f0506 	br	8007198 <__alt_data_end+0xfc007198>
 8007584:	d9402317 	ldw	r5,140(sp)
 8007588:	d9002717 	ldw	r4,156(sp)
 800758c:	d9801a04 	addi	r6,sp,104
 8007590:	80065000 	call	8006500 <__ssprint_r>
 8007594:	103f8e1e 	bne	r2,zero,80073d0 <__alt_data_end+0xfc0073d0>
 8007598:	d8c01c17 	ldw	r3,112(sp)
 800759c:	d8801b17 	ldw	r2,108(sp)
 80075a0:	d811883a 	mov	r8,sp
 80075a4:	003f0906 	br	80071cc <__alt_data_end+0xfc0071cc>
 80075a8:	d9402017 	ldw	r5,128(sp)
 80075ac:	d8001d85 	stb	zero,118(sp)
 80075b0:	28007716 	blt	r5,zero,8007790 <___svfiprintf_internal_r+0x10c0>
 80075b4:	00ffdfc4 	movi	r3,-129
 80075b8:	9504b03a 	or	r2,r18,r20
 80075bc:	80e0703a 	and	r16,r16,r3
 80075c0:	103d3926 	beq	r2,zero,8006aa8 <__alt_data_end+0xfc006aa8>
 80075c4:	002b883a 	mov	r21,zero
 80075c8:	003d3c06 	br	8006abc <__alt_data_end+0xfc006abc>
 80075cc:	d9402317 	ldw	r5,140(sp)
 80075d0:	d9002717 	ldw	r4,156(sp)
 80075d4:	d9801a04 	addi	r6,sp,104
 80075d8:	80065000 	call	8006500 <__ssprint_r>
 80075dc:	103f7c1e 	bne	r2,zero,80073d0 <__alt_data_end+0xfc0073d0>
 80075e0:	d8c01c17 	ldw	r3,112(sp)
 80075e4:	d8801b17 	ldw	r2,108(sp)
 80075e8:	d811883a 	mov	r8,sp
 80075ec:	003edd06 	br	8007164 <__alt_data_end+0xfc007164>
 80075f0:	8080100c 	andi	r2,r16,64
 80075f4:	d8001d85 	stb	zero,118(sp)
 80075f8:	10008426 	beq	r2,zero,800780c <___svfiprintf_internal_r+0x113c>
 80075fc:	d9402417 	ldw	r5,144(sp)
 8007600:	d8c02017 	ldw	r3,128(sp)
 8007604:	0029883a 	mov	r20,zero
 8007608:	28800104 	addi	r2,r5,4
 800760c:	2c80000b 	ldhu	r18,0(r5)
 8007610:	183eab0e 	bge	r3,zero,80070c0 <__alt_data_end+0xfc0070c0>
 8007614:	d8802415 	stw	r2,144(sp)
 8007618:	002b883a 	mov	r21,zero
 800761c:	9504b03a 	or	r2,r18,r20
 8007620:	103e171e 	bne	r2,zero,8006e80 <__alt_data_end+0xfc006e80>
 8007624:	00800044 	movi	r2,1
 8007628:	10803fcc 	andi	r2,r2,255
 800762c:	00c00044 	movi	r3,1
 8007630:	10c05c26 	beq	r2,r3,80077a4 <___svfiprintf_internal_r+0x10d4>
 8007634:	00c00084 	movi	r3,2
 8007638:	10fd1e26 	beq	r2,r3,8006ab4 <__alt_data_end+0xfc006ab4>
 800763c:	003ec406 	br	8007150 <__alt_data_end+0xfc007150>
 8007640:	d9401e17 	ldw	r5,120(sp)
 8007644:	2c69c83a 	sub	r20,r5,r17
 8007648:	003d4506 	br	8006b60 <__alt_data_end+0xfc006b60>
 800764c:	d8802415 	stw	r2,144(sp)
 8007650:	98c00007 	ldb	r3,0(r19)
 8007654:	003c6a06 	br	8006800 <__alt_data_end+0xfc006800>
 8007658:	d9402317 	ldw	r5,140(sp)
 800765c:	d9002717 	ldw	r4,156(sp)
 8007660:	d9801a04 	addi	r6,sp,104
 8007664:	80065000 	call	8006500 <__ssprint_r>
 8007668:	103f591e 	bne	r2,zero,80073d0 <__alt_data_end+0xfc0073d0>
 800766c:	d8c01c17 	ldw	r3,112(sp)
 8007670:	003f4406 	br	8007384 <__alt_data_end+0xfc007384>
 8007674:	01420074 	movhi	r5,2049
 8007678:	29784304 	addi	r5,r5,-7924
 800767c:	d9402915 	stw	r5,164(sp)
 8007680:	003d0906 	br	8006aa8 <__alt_data_end+0xfc006aa8>
 8007684:	d8c02417 	ldw	r3,144(sp)
 8007688:	d9002617 	ldw	r4,152(sp)
 800768c:	d9402417 	ldw	r5,144(sp)
 8007690:	18800017 	ldw	r2,0(r3)
 8007694:	2007d7fa 	srai	r3,r4,31
 8007698:	29400104 	addi	r5,r5,4
 800769c:	d9402415 	stw	r5,144(sp)
 80076a0:	11000015 	stw	r4,0(r2)
 80076a4:	10c00115 	stw	r3,4(r2)
 80076a8:	003c2b06 	br	8006758 <__alt_data_end+0xfc006758>
 80076ac:	d8c01d45 	stb	r3,117(sp)
 80076b0:	d8c02017 	ldw	r3,128(sp)
 80076b4:	00800c04 	movi	r2,48
 80076b8:	d8801d05 	stb	r2,116(sp)
 80076bc:	d8001d85 	stb	zero,118(sp)
 80076c0:	80800094 	ori	r2,r16,2
 80076c4:	1800ac16 	blt	r3,zero,8007978 <___svfiprintf_internal_r+0x12a8>
 80076c8:	00bfdfc4 	movi	r2,-129
 80076cc:	80a0703a 	and	r16,r16,r2
 80076d0:	84000094 	ori	r16,r16,2
 80076d4:	002b883a 	mov	r21,zero
 80076d8:	003cf806 	br	8006abc <__alt_data_end+0xfc006abc>
 80076dc:	98c00007 	ldb	r3,0(r19)
 80076e0:	003c4706 	br	8006800 <__alt_data_end+0xfc006800>
 80076e4:	d9402417 	ldw	r5,144(sp)
 80076e8:	2c800017 	ldw	r18,0(r5)
 80076ec:	29400104 	addi	r5,r5,4
 80076f0:	d9402415 	stw	r5,144(sp)
 80076f4:	9029d7fa 	srai	r20,r18,31
 80076f8:	a005883a 	mov	r2,r20
 80076fc:	003dd806 	br	8006e60 <__alt_data_end+0xfc006e60>
 8007700:	d9402417 	ldw	r5,144(sp)
 8007704:	0029883a 	mov	r20,zero
 8007708:	2c800017 	ldw	r18,0(r5)
 800770c:	29400104 	addi	r5,r5,4
 8007710:	d9402415 	stw	r5,144(sp)
 8007714:	003cdb06 	br	8006a84 <__alt_data_end+0xfc006a84>
 8007718:	8080100c 	andi	r2,r16,64
 800771c:	d8001d85 	stb	zero,118(sp)
 8007720:	10003326 	beq	r2,zero,80077f0 <___svfiprintf_internal_r+0x1120>
 8007724:	d9002417 	ldw	r4,144(sp)
 8007728:	d9402017 	ldw	r5,128(sp)
 800772c:	0029883a 	mov	r20,zero
 8007730:	20800104 	addi	r2,r4,4
 8007734:	2480000b 	ldhu	r18,0(r4)
 8007738:	283e7e0e 	bge	r5,zero,8007134 <__alt_data_end+0xfc007134>
 800773c:	9506b03a 	or	r3,r18,r20
 8007740:	d8802415 	stw	r2,144(sp)
 8007744:	183d271e 	bne	r3,zero,8006be4 <__alt_data_end+0xfc006be4>
 8007748:	002b883a 	mov	r21,zero
 800774c:	0005883a 	mov	r2,zero
 8007750:	003fb506 	br	8007628 <__alt_data_end+0xfc007628>
 8007754:	98c00043 	ldbu	r3,1(r19)
 8007758:	8c400814 	ori	r17,r17,32
 800775c:	9cc00044 	addi	r19,r19,1
 8007760:	18c03fcc 	andi	r3,r3,255
 8007764:	18c0201c 	xori	r3,r3,128
 8007768:	18ffe004 	addi	r3,r3,-128
 800776c:	003c2406 	br	8006800 <__alt_data_end+0xfc006800>
 8007770:	d8c02415 	stw	r3,144(sp)
 8007774:	002b883a 	mov	r21,zero
 8007778:	003fa806 	br	800761c <__alt_data_end+0xfc00761c>
 800777c:	01020074 	movhi	r4,2049
 8007780:	21384304 	addi	r4,r4,-7924
 8007784:	d9002915 	stw	r4,164(sp)
 8007788:	d8c02415 	stw	r3,144(sp)
 800778c:	1021883a 	mov	r16,r2
 8007790:	9504b03a 	or	r2,r18,r20
 8007794:	103f8b1e 	bne	r2,zero,80075c4 <__alt_data_end+0xfc0075c4>
 8007798:	002b883a 	mov	r21,zero
 800779c:	00800084 	movi	r2,2
 80077a0:	003fa106 	br	8007628 <__alt_data_end+0xfc007628>
 80077a4:	0025883a 	mov	r18,zero
 80077a8:	94800c04 	addi	r18,r18,48
 80077ac:	dc8019c5 	stb	r18,103(sp)
 80077b0:	dd002c17 	ldw	r20,176(sp)
 80077b4:	dc4019c4 	addi	r17,sp,103
 80077b8:	003ce906 	br	8006b60 <__alt_data_end+0xfc006b60>
 80077bc:	d9402317 	ldw	r5,140(sp)
 80077c0:	d9002717 	ldw	r4,156(sp)
 80077c4:	d9801a04 	addi	r6,sp,104
 80077c8:	80065000 	call	8006500 <__ssprint_r>
 80077cc:	103f001e 	bne	r2,zero,80073d0 <__alt_data_end+0xfc0073d0>
 80077d0:	d8c01c17 	ldw	r3,112(sp)
 80077d4:	d8801b17 	ldw	r2,108(sp)
 80077d8:	d811883a 	mov	r8,sp
 80077dc:	003e7e06 	br	80071d8 <__alt_data_end+0xfc0071d8>
 80077e0:	01420074 	movhi	r5,2049
 80077e4:	2978a404 	addi	r5,r5,-7536
 80077e8:	d9402115 	stw	r5,132(sp)
 80077ec:	003ea406 	br	8007280 <__alt_data_end+0xfc007280>
 80077f0:	d8c02417 	ldw	r3,144(sp)
 80077f4:	d9002017 	ldw	r4,128(sp)
 80077f8:	0029883a 	mov	r20,zero
 80077fc:	18800104 	addi	r2,r3,4
 8007800:	1c800017 	ldw	r18,0(r3)
 8007804:	203e4b0e 	bge	r4,zero,8007134 <__alt_data_end+0xfc007134>
 8007808:	003fcc06 	br	800773c <__alt_data_end+0xfc00773c>
 800780c:	d9002417 	ldw	r4,144(sp)
 8007810:	d9402017 	ldw	r5,128(sp)
 8007814:	0029883a 	mov	r20,zero
 8007818:	20800104 	addi	r2,r4,4
 800781c:	24800017 	ldw	r18,0(r4)
 8007820:	283e270e 	bge	r5,zero,80070c0 <__alt_data_end+0xfc0070c0>
 8007824:	003f7b06 	br	8007614 <__alt_data_end+0xfc007614>
 8007828:	8400100c 	andi	r16,r16,64
 800782c:	80003326 	beq	r16,zero,80078fc <___svfiprintf_internal_r+0x122c>
 8007830:	d9402417 	ldw	r5,144(sp)
 8007834:	d8c02617 	ldw	r3,152(sp)
 8007838:	28800017 	ldw	r2,0(r5)
 800783c:	29400104 	addi	r5,r5,4
 8007840:	d9402415 	stw	r5,144(sp)
 8007844:	10c0000d 	sth	r3,0(r2)
 8007848:	003bc306 	br	8006758 <__alt_data_end+0xfc006758>
 800784c:	d9002417 	ldw	r4,144(sp)
 8007850:	0029883a 	mov	r20,zero
 8007854:	24800017 	ldw	r18,0(r4)
 8007858:	21000104 	addi	r4,r4,4
 800785c:	d9002415 	stw	r4,144(sp)
 8007860:	003c8806 	br	8006a84 <__alt_data_end+0xfc006a84>
 8007864:	d8c02417 	ldw	r3,144(sp)
 8007868:	1c800017 	ldw	r18,0(r3)
 800786c:	18c00104 	addi	r3,r3,4
 8007870:	d8c02415 	stw	r3,144(sp)
 8007874:	9029d7fa 	srai	r20,r18,31
 8007878:	a005883a 	mov	r2,r20
 800787c:	003d7806 	br	8006e60 <__alt_data_end+0xfc006e60>
 8007880:	8809883a 	mov	r4,r17
 8007884:	da002d15 	stw	r8,180(sp)
 8007888:	8000b8c0 	call	8000b8c <strlen>
 800788c:	1029883a 	mov	r20,r2
 8007890:	dd401d83 	ldbu	r21,118(sp)
 8007894:	ddc02415 	stw	r23,144(sp)
 8007898:	d8002015 	stw	zero,128(sp)
 800789c:	da002d17 	ldw	r8,180(sp)
 80078a0:	003caf06 	br	8006b60 <__alt_data_end+0xfc006b60>
 80078a4:	013fffc4 	movi	r4,-1
 80078a8:	003df206 	br	8007074 <__alt_data_end+0xfc007074>
 80078ac:	dd002017 	ldw	r20,128(sp)
 80078b0:	00800184 	movi	r2,6
 80078b4:	1500012e 	bgeu	r2,r20,80078bc <___svfiprintf_internal_r+0x11ec>
 80078b8:	1029883a 	mov	r20,r2
 80078bc:	a025883a 	mov	r18,r20
 80078c0:	a0004116 	blt	r20,zero,80079c8 <___svfiprintf_internal_r+0x12f8>
 80078c4:	04420074 	movhi	r17,2049
 80078c8:	ddc02415 	stw	r23,144(sp)
 80078cc:	8c784804 	addi	r17,r17,-7904
 80078d0:	003ce806 	br	8006c74 <__alt_data_end+0xfc006c74>
 80078d4:	04001004 	movi	r16,64
 80078d8:	800b883a 	mov	r5,r16
 80078dc:	800486c0 	call	800486c <_malloc_r>
 80078e0:	d8c02317 	ldw	r3,140(sp)
 80078e4:	18800015 	stw	r2,0(r3)
 80078e8:	18800415 	stw	r2,16(r3)
 80078ec:	10004d26 	beq	r2,zero,8007a24 <___svfiprintf_internal_r+0x1354>
 80078f0:	d9402317 	ldw	r5,140(sp)
 80078f4:	2c000515 	stw	r16,20(r5)
 80078f8:	003b8906 	br	8006720 <__alt_data_end+0xfc006720>
 80078fc:	d9002417 	ldw	r4,144(sp)
 8007900:	d9402617 	ldw	r5,152(sp)
 8007904:	20800017 	ldw	r2,0(r4)
 8007908:	21000104 	addi	r4,r4,4
 800790c:	d9002415 	stw	r4,144(sp)
 8007910:	11400015 	stw	r5,0(r2)
 8007914:	003b9006 	br	8006758 <__alt_data_end+0xfc006758>
 8007918:	8080004c 	andi	r2,r16,1
 800791c:	002b883a 	mov	r21,zero
 8007920:	10000526 	beq	r2,zero,8007938 <___svfiprintf_internal_r+0x1268>
 8007924:	00800c04 	movi	r2,48
 8007928:	d88019c5 	stb	r2,103(sp)
 800792c:	dd002c17 	ldw	r20,176(sp)
 8007930:	dc4019c4 	addi	r17,sp,103
 8007934:	003c8a06 	br	8006b60 <__alt_data_end+0xfc006b60>
 8007938:	0029883a 	mov	r20,zero
 800793c:	dc401a04 	addi	r17,sp,104
 8007940:	003c8706 	br	8006b60 <__alt_data_end+0xfc006b60>
 8007944:	01420074 	movhi	r5,2049
 8007948:	2978a804 	addi	r5,r5,-7520
 800794c:	d9402815 	stw	r5,160(sp)
 8007950:	003cff06 	br	8006d50 <__alt_data_end+0xfc006d50>
 8007954:	00bfffc4 	movi	r2,-1
 8007958:	003ea206 	br	80073e4 <__alt_data_end+0xfc0073e4>
 800795c:	00800044 	movi	r2,1
 8007960:	10803fcc 	andi	r2,r2,255
 8007964:	00c00044 	movi	r3,1
 8007968:	10fd4526 	beq	r2,r3,8006e80 <__alt_data_end+0xfc006e80>
 800796c:	00c00084 	movi	r3,2
 8007970:	10fc5226 	beq	r2,r3,8006abc <__alt_data_end+0xfc006abc>
 8007974:	003c9c06 	br	8006be8 <__alt_data_end+0xfc006be8>
 8007978:	1021883a 	mov	r16,r2
 800797c:	002b883a 	mov	r21,zero
 8007980:	00800084 	movi	r2,2
 8007984:	003ff606 	br	8007960 <__alt_data_end+0xfc007960>
 8007988:	01020074 	movhi	r4,2049
 800798c:	2138a804 	addi	r4,r4,-7520
 8007990:	d9002815 	stw	r4,160(sp)
 8007994:	003e7206 	br	8007360 <__alt_data_end+0xfc007360>
 8007998:	01420074 	movhi	r5,2049
 800799c:	2978a404 	addi	r5,r5,-7536
 80079a0:	d9402115 	stw	r5,132(sp)
 80079a4:	003ec506 	br	80074bc <__alt_data_end+0xfc0074bc>
 80079a8:	e027883a 	mov	r19,fp
 80079ac:	d8002015 	stw	zero,128(sp)
 80079b0:	003b9406 	br	8006804 <__alt_data_end+0xfc006804>
 80079b4:	dd002017 	ldw	r20,128(sp)
 80079b8:	dd401d83 	ldbu	r21,118(sp)
 80079bc:	ddc02415 	stw	r23,144(sp)
 80079c0:	d8002015 	stw	zero,128(sp)
 80079c4:	003c6606 	br	8006b60 <__alt_data_end+0xfc006b60>
 80079c8:	0025883a 	mov	r18,zero
 80079cc:	003fbd06 	br	80078c4 <__alt_data_end+0xfc0078c4>
 80079d0:	d9402417 	ldw	r5,144(sp)
 80079d4:	d8c02417 	ldw	r3,144(sp)
 80079d8:	29400017 	ldw	r5,0(r5)
 80079dc:	19000104 	addi	r4,r3,4
 80079e0:	d9002415 	stw	r4,144(sp)
 80079e4:	d9402015 	stw	r5,128(sp)
 80079e8:	98c00043 	ldbu	r3,1(r19)
 80079ec:	e027883a 	mov	r19,fp
 80079f0:	283f5b0e 	bge	r5,zero,8007760 <__alt_data_end+0xfc007760>
 80079f4:	18c03fcc 	andi	r3,r3,255
 80079f8:	013fffc4 	movi	r4,-1
 80079fc:	18c0201c 	xori	r3,r3,128
 8007a00:	d9002015 	stw	r4,128(sp)
 8007a04:	18ffe004 	addi	r3,r3,-128
 8007a08:	003b7d06 	br	8006800 <__alt_data_end+0xfc006800>
 8007a0c:	dd401d85 	stb	r21,118(sp)
 8007a10:	003cf306 	br	8006de0 <__alt_data_end+0xfc006de0>
 8007a14:	dd401d85 	stb	r21,118(sp)
 8007a18:	003d4e06 	br	8006f54 <__alt_data_end+0xfc006f54>
 8007a1c:	dd401d85 	stb	r21,118(sp)
 8007a20:	003c0e06 	br	8006a5c <__alt_data_end+0xfc006a5c>
 8007a24:	d9002717 	ldw	r4,156(sp)
 8007a28:	00800304 	movi	r2,12
 8007a2c:	20800015 	stw	r2,0(r4)
 8007a30:	00bfffc4 	movi	r2,-1
 8007a34:	003e6b06 	br	80073e4 <__alt_data_end+0xfc0073e4>
 8007a38:	dd401d85 	stb	r21,118(sp)
 8007a3c:	003d0006 	br	8006e40 <__alt_data_end+0xfc006e40>
 8007a40:	dd401d85 	stb	r21,118(sp)
 8007a44:	003d7106 	br	800700c <__alt_data_end+0xfc00700c>
 8007a48:	dd401d85 	stb	r21,118(sp)
 8007a4c:	003c5706 	br	8006bac <__alt_data_end+0xfc006bac>
 8007a50:	dd401d85 	stb	r21,118(sp)
 8007a54:	003c2e06 	br	8006b10 <__alt_data_end+0xfc006b10>
 8007a58:	dd401d85 	stb	r21,118(sp)
 8007a5c:	003d8c06 	br	8007090 <__alt_data_end+0xfc007090>
 8007a60:	dd401d85 	stb	r21,118(sp)
 8007a64:	003da706 	br	8007104 <__alt_data_end+0xfc007104>
 8007a68:	dd401d85 	stb	r21,118(sp)
 8007a6c:	003cc806 	br	8006d90 <__alt_data_end+0xfc006d90>

08007a70 <_calloc_r>:
 8007a70:	defffe04 	addi	sp,sp,-8
 8007a74:	2805883a 	mov	r2,r5
 8007a78:	dc000015 	stw	r16,0(sp)
 8007a7c:	300b883a 	mov	r5,r6
 8007a80:	2021883a 	mov	r16,r4
 8007a84:	1009883a 	mov	r4,r2
 8007a88:	dfc00115 	stw	ra,4(sp)
 8007a8c:	8000a240 	call	8000a24 <__mulsi3>
 8007a90:	100b883a 	mov	r5,r2
 8007a94:	8009883a 	mov	r4,r16
 8007a98:	800486c0 	call	800486c <_malloc_r>
 8007a9c:	10002926 	beq	r2,zero,8007b44 <_calloc_r+0xd4>
 8007aa0:	11bfff17 	ldw	r6,-4(r2)
 8007aa4:	1021883a 	mov	r16,r2
 8007aa8:	00bfff04 	movi	r2,-4
 8007aac:	308c703a 	and	r6,r6,r2
 8007ab0:	00c00904 	movi	r3,36
 8007ab4:	308d883a 	add	r6,r6,r2
 8007ab8:	19801636 	bltu	r3,r6,8007b14 <_calloc_r+0xa4>
 8007abc:	008004c4 	movi	r2,19
 8007ac0:	11800b2e 	bgeu	r2,r6,8007af0 <_calloc_r+0x80>
 8007ac4:	80000015 	stw	zero,0(r16)
 8007ac8:	80000115 	stw	zero,4(r16)
 8007acc:	008006c4 	movi	r2,27
 8007ad0:	11801a2e 	bgeu	r2,r6,8007b3c <_calloc_r+0xcc>
 8007ad4:	80000215 	stw	zero,8(r16)
 8007ad8:	80000315 	stw	zero,12(r16)
 8007adc:	30c0151e 	bne	r6,r3,8007b34 <_calloc_r+0xc4>
 8007ae0:	80000415 	stw	zero,16(r16)
 8007ae4:	80800604 	addi	r2,r16,24
 8007ae8:	80000515 	stw	zero,20(r16)
 8007aec:	00000106 	br	8007af4 <_calloc_r+0x84>
 8007af0:	8005883a 	mov	r2,r16
 8007af4:	10000015 	stw	zero,0(r2)
 8007af8:	10000115 	stw	zero,4(r2)
 8007afc:	10000215 	stw	zero,8(r2)
 8007b00:	8005883a 	mov	r2,r16
 8007b04:	dfc00117 	ldw	ra,4(sp)
 8007b08:	dc000017 	ldw	r16,0(sp)
 8007b0c:	dec00204 	addi	sp,sp,8
 8007b10:	f800283a 	ret
 8007b14:	000b883a 	mov	r5,zero
 8007b18:	8009883a 	mov	r4,r16
 8007b1c:	80080dc0 	call	80080dc <memset>
 8007b20:	8005883a 	mov	r2,r16
 8007b24:	dfc00117 	ldw	ra,4(sp)
 8007b28:	dc000017 	ldw	r16,0(sp)
 8007b2c:	dec00204 	addi	sp,sp,8
 8007b30:	f800283a 	ret
 8007b34:	80800404 	addi	r2,r16,16
 8007b38:	003fee06 	br	8007af4 <__alt_data_end+0xfc007af4>
 8007b3c:	80800204 	addi	r2,r16,8
 8007b40:	003fec06 	br	8007af4 <__alt_data_end+0xfc007af4>
 8007b44:	0005883a 	mov	r2,zero
 8007b48:	003fee06 	br	8007b04 <__alt_data_end+0xfc007b04>

08007b4c <_malloc_trim_r>:
 8007b4c:	defffb04 	addi	sp,sp,-20
 8007b50:	dcc00315 	stw	r19,12(sp)
 8007b54:	04c20074 	movhi	r19,2049
 8007b58:	dc800215 	stw	r18,8(sp)
 8007b5c:	dc400115 	stw	r17,4(sp)
 8007b60:	dc000015 	stw	r16,0(sp)
 8007b64:	dfc00415 	stw	ra,16(sp)
 8007b68:	2821883a 	mov	r16,r5
 8007b6c:	9cfa7a04 	addi	r19,r19,-5656
 8007b70:	2025883a 	mov	r18,r4
 8007b74:	800be400 	call	800be40 <__malloc_lock>
 8007b78:	98800217 	ldw	r2,8(r19)
 8007b7c:	14400117 	ldw	r17,4(r2)
 8007b80:	00bfff04 	movi	r2,-4
 8007b84:	88a2703a 	and	r17,r17,r2
 8007b88:	8c21c83a 	sub	r16,r17,r16
 8007b8c:	8403fbc4 	addi	r16,r16,4079
 8007b90:	8020d33a 	srli	r16,r16,12
 8007b94:	0083ffc4 	movi	r2,4095
 8007b98:	843fffc4 	addi	r16,r16,-1
 8007b9c:	8020933a 	slli	r16,r16,12
 8007ba0:	1400060e 	bge	r2,r16,8007bbc <_malloc_trim_r+0x70>
 8007ba4:	000b883a 	mov	r5,zero
 8007ba8:	9009883a 	mov	r4,r18
 8007bac:	80063d00 	call	80063d0 <_sbrk_r>
 8007bb0:	98c00217 	ldw	r3,8(r19)
 8007bb4:	1c47883a 	add	r3,r3,r17
 8007bb8:	10c00a26 	beq	r2,r3,8007be4 <_malloc_trim_r+0x98>
 8007bbc:	9009883a 	mov	r4,r18
 8007bc0:	800be640 	call	800be64 <__malloc_unlock>
 8007bc4:	0005883a 	mov	r2,zero
 8007bc8:	dfc00417 	ldw	ra,16(sp)
 8007bcc:	dcc00317 	ldw	r19,12(sp)
 8007bd0:	dc800217 	ldw	r18,8(sp)
 8007bd4:	dc400117 	ldw	r17,4(sp)
 8007bd8:	dc000017 	ldw	r16,0(sp)
 8007bdc:	dec00504 	addi	sp,sp,20
 8007be0:	f800283a 	ret
 8007be4:	040bc83a 	sub	r5,zero,r16
 8007be8:	9009883a 	mov	r4,r18
 8007bec:	80063d00 	call	80063d0 <_sbrk_r>
 8007bf0:	00ffffc4 	movi	r3,-1
 8007bf4:	10c00d26 	beq	r2,r3,8007c2c <_malloc_trim_r+0xe0>
 8007bf8:	00c20074 	movhi	r3,2049
 8007bfc:	18c73304 	addi	r3,r3,7372
 8007c00:	18800017 	ldw	r2,0(r3)
 8007c04:	99000217 	ldw	r4,8(r19)
 8007c08:	8c23c83a 	sub	r17,r17,r16
 8007c0c:	8c400054 	ori	r17,r17,1
 8007c10:	1421c83a 	sub	r16,r2,r16
 8007c14:	24400115 	stw	r17,4(r4)
 8007c18:	9009883a 	mov	r4,r18
 8007c1c:	1c000015 	stw	r16,0(r3)
 8007c20:	800be640 	call	800be64 <__malloc_unlock>
 8007c24:	00800044 	movi	r2,1
 8007c28:	003fe706 	br	8007bc8 <__alt_data_end+0xfc007bc8>
 8007c2c:	000b883a 	mov	r5,zero
 8007c30:	9009883a 	mov	r4,r18
 8007c34:	80063d00 	call	80063d0 <_sbrk_r>
 8007c38:	99000217 	ldw	r4,8(r19)
 8007c3c:	014003c4 	movi	r5,15
 8007c40:	1107c83a 	sub	r3,r2,r4
 8007c44:	28ffdd0e 	bge	r5,r3,8007bbc <__alt_data_end+0xfc007bbc>
 8007c48:	01420074 	movhi	r5,2049
 8007c4c:	29400204 	addi	r5,r5,8
 8007c50:	29400017 	ldw	r5,0(r5)
 8007c54:	18c00054 	ori	r3,r3,1
 8007c58:	20c00115 	stw	r3,4(r4)
 8007c5c:	00c20074 	movhi	r3,2049
 8007c60:	1145c83a 	sub	r2,r2,r5
 8007c64:	18c73304 	addi	r3,r3,7372
 8007c68:	18800015 	stw	r2,0(r3)
 8007c6c:	003fd306 	br	8007bbc <__alt_data_end+0xfc007bbc>

08007c70 <_free_r>:
 8007c70:	28004126 	beq	r5,zero,8007d78 <_free_r+0x108>
 8007c74:	defffd04 	addi	sp,sp,-12
 8007c78:	dc400115 	stw	r17,4(sp)
 8007c7c:	dc000015 	stw	r16,0(sp)
 8007c80:	2023883a 	mov	r17,r4
 8007c84:	2821883a 	mov	r16,r5
 8007c88:	dfc00215 	stw	ra,8(sp)
 8007c8c:	800be400 	call	800be40 <__malloc_lock>
 8007c90:	81ffff17 	ldw	r7,-4(r16)
 8007c94:	00bfff84 	movi	r2,-2
 8007c98:	01020074 	movhi	r4,2049
 8007c9c:	81bffe04 	addi	r6,r16,-8
 8007ca0:	3884703a 	and	r2,r7,r2
 8007ca4:	213a7a04 	addi	r4,r4,-5656
 8007ca8:	308b883a 	add	r5,r6,r2
 8007cac:	2a400117 	ldw	r9,4(r5)
 8007cb0:	22000217 	ldw	r8,8(r4)
 8007cb4:	00ffff04 	movi	r3,-4
 8007cb8:	48c6703a 	and	r3,r9,r3
 8007cbc:	2a005726 	beq	r5,r8,8007e1c <_free_r+0x1ac>
 8007cc0:	28c00115 	stw	r3,4(r5)
 8007cc4:	39c0004c 	andi	r7,r7,1
 8007cc8:	3800091e 	bne	r7,zero,8007cf0 <_free_r+0x80>
 8007ccc:	823ffe17 	ldw	r8,-8(r16)
 8007cd0:	22400204 	addi	r9,r4,8
 8007cd4:	320dc83a 	sub	r6,r6,r8
 8007cd8:	31c00217 	ldw	r7,8(r6)
 8007cdc:	1205883a 	add	r2,r2,r8
 8007ce0:	3a406526 	beq	r7,r9,8007e78 <_free_r+0x208>
 8007ce4:	32000317 	ldw	r8,12(r6)
 8007ce8:	3a000315 	stw	r8,12(r7)
 8007cec:	41c00215 	stw	r7,8(r8)
 8007cf0:	28cf883a 	add	r7,r5,r3
 8007cf4:	39c00117 	ldw	r7,4(r7)
 8007cf8:	39c0004c 	andi	r7,r7,1
 8007cfc:	38003a26 	beq	r7,zero,8007de8 <_free_r+0x178>
 8007d00:	10c00054 	ori	r3,r2,1
 8007d04:	30c00115 	stw	r3,4(r6)
 8007d08:	3087883a 	add	r3,r6,r2
 8007d0c:	18800015 	stw	r2,0(r3)
 8007d10:	00c07fc4 	movi	r3,511
 8007d14:	18801936 	bltu	r3,r2,8007d7c <_free_r+0x10c>
 8007d18:	1004d0fa 	srli	r2,r2,3
 8007d1c:	01c00044 	movi	r7,1
 8007d20:	21400117 	ldw	r5,4(r4)
 8007d24:	10c00044 	addi	r3,r2,1
 8007d28:	18c7883a 	add	r3,r3,r3
 8007d2c:	1005d0ba 	srai	r2,r2,2
 8007d30:	18c7883a 	add	r3,r3,r3
 8007d34:	18c7883a 	add	r3,r3,r3
 8007d38:	1907883a 	add	r3,r3,r4
 8007d3c:	3884983a 	sll	r2,r7,r2
 8007d40:	19c00017 	ldw	r7,0(r3)
 8007d44:	1a3ffe04 	addi	r8,r3,-8
 8007d48:	1144b03a 	or	r2,r2,r5
 8007d4c:	32000315 	stw	r8,12(r6)
 8007d50:	31c00215 	stw	r7,8(r6)
 8007d54:	20800115 	stw	r2,4(r4)
 8007d58:	19800015 	stw	r6,0(r3)
 8007d5c:	39800315 	stw	r6,12(r7)
 8007d60:	8809883a 	mov	r4,r17
 8007d64:	dfc00217 	ldw	ra,8(sp)
 8007d68:	dc400117 	ldw	r17,4(sp)
 8007d6c:	dc000017 	ldw	r16,0(sp)
 8007d70:	dec00304 	addi	sp,sp,12
 8007d74:	800be641 	jmpi	800be64 <__malloc_unlock>
 8007d78:	f800283a 	ret
 8007d7c:	100ad27a 	srli	r5,r2,9
 8007d80:	00c00104 	movi	r3,4
 8007d84:	19404a36 	bltu	r3,r5,8007eb0 <_free_r+0x240>
 8007d88:	100ad1ba 	srli	r5,r2,6
 8007d8c:	28c00e44 	addi	r3,r5,57
 8007d90:	18c7883a 	add	r3,r3,r3
 8007d94:	29400e04 	addi	r5,r5,56
 8007d98:	18c7883a 	add	r3,r3,r3
 8007d9c:	18c7883a 	add	r3,r3,r3
 8007da0:	1909883a 	add	r4,r3,r4
 8007da4:	20c00017 	ldw	r3,0(r4)
 8007da8:	01c20074 	movhi	r7,2049
 8007dac:	213ffe04 	addi	r4,r4,-8
 8007db0:	39fa7a04 	addi	r7,r7,-5656
 8007db4:	20c04426 	beq	r4,r3,8007ec8 <_free_r+0x258>
 8007db8:	01ffff04 	movi	r7,-4
 8007dbc:	19400117 	ldw	r5,4(r3)
 8007dc0:	29ca703a 	and	r5,r5,r7
 8007dc4:	1140022e 	bgeu	r2,r5,8007dd0 <_free_r+0x160>
 8007dc8:	18c00217 	ldw	r3,8(r3)
 8007dcc:	20fffb1e 	bne	r4,r3,8007dbc <__alt_data_end+0xfc007dbc>
 8007dd0:	19000317 	ldw	r4,12(r3)
 8007dd4:	31000315 	stw	r4,12(r6)
 8007dd8:	30c00215 	stw	r3,8(r6)
 8007ddc:	21800215 	stw	r6,8(r4)
 8007de0:	19800315 	stw	r6,12(r3)
 8007de4:	003fde06 	br	8007d60 <__alt_data_end+0xfc007d60>
 8007de8:	29c00217 	ldw	r7,8(r5)
 8007dec:	10c5883a 	add	r2,r2,r3
 8007df0:	00c20074 	movhi	r3,2049
 8007df4:	18fa7c04 	addi	r3,r3,-5648
 8007df8:	38c03b26 	beq	r7,r3,8007ee8 <_free_r+0x278>
 8007dfc:	2a000317 	ldw	r8,12(r5)
 8007e00:	11400054 	ori	r5,r2,1
 8007e04:	3087883a 	add	r3,r6,r2
 8007e08:	3a000315 	stw	r8,12(r7)
 8007e0c:	41c00215 	stw	r7,8(r8)
 8007e10:	31400115 	stw	r5,4(r6)
 8007e14:	18800015 	stw	r2,0(r3)
 8007e18:	003fbd06 	br	8007d10 <__alt_data_end+0xfc007d10>
 8007e1c:	39c0004c 	andi	r7,r7,1
 8007e20:	10c5883a 	add	r2,r2,r3
 8007e24:	3800071e 	bne	r7,zero,8007e44 <_free_r+0x1d4>
 8007e28:	81fffe17 	ldw	r7,-8(r16)
 8007e2c:	31cdc83a 	sub	r6,r6,r7
 8007e30:	30c00317 	ldw	r3,12(r6)
 8007e34:	31400217 	ldw	r5,8(r6)
 8007e38:	11c5883a 	add	r2,r2,r7
 8007e3c:	28c00315 	stw	r3,12(r5)
 8007e40:	19400215 	stw	r5,8(r3)
 8007e44:	10c00054 	ori	r3,r2,1
 8007e48:	30c00115 	stw	r3,4(r6)
 8007e4c:	00c20074 	movhi	r3,2049
 8007e50:	18c00304 	addi	r3,r3,12
 8007e54:	18c00017 	ldw	r3,0(r3)
 8007e58:	21800215 	stw	r6,8(r4)
 8007e5c:	10ffc036 	bltu	r2,r3,8007d60 <__alt_data_end+0xfc007d60>
 8007e60:	00820074 	movhi	r2,2049
 8007e64:	10872a04 	addi	r2,r2,7336
 8007e68:	11400017 	ldw	r5,0(r2)
 8007e6c:	8809883a 	mov	r4,r17
 8007e70:	8007b4c0 	call	8007b4c <_malloc_trim_r>
 8007e74:	003fba06 	br	8007d60 <__alt_data_end+0xfc007d60>
 8007e78:	28c9883a 	add	r4,r5,r3
 8007e7c:	21000117 	ldw	r4,4(r4)
 8007e80:	2100004c 	andi	r4,r4,1
 8007e84:	2000391e 	bne	r4,zero,8007f6c <_free_r+0x2fc>
 8007e88:	29c00217 	ldw	r7,8(r5)
 8007e8c:	29000317 	ldw	r4,12(r5)
 8007e90:	1885883a 	add	r2,r3,r2
 8007e94:	10c00054 	ori	r3,r2,1
 8007e98:	39000315 	stw	r4,12(r7)
 8007e9c:	21c00215 	stw	r7,8(r4)
 8007ea0:	30c00115 	stw	r3,4(r6)
 8007ea4:	308d883a 	add	r6,r6,r2
 8007ea8:	30800015 	stw	r2,0(r6)
 8007eac:	003fac06 	br	8007d60 <__alt_data_end+0xfc007d60>
 8007eb0:	00c00504 	movi	r3,20
 8007eb4:	19401536 	bltu	r3,r5,8007f0c <_free_r+0x29c>
 8007eb8:	28c01704 	addi	r3,r5,92
 8007ebc:	18c7883a 	add	r3,r3,r3
 8007ec0:	294016c4 	addi	r5,r5,91
 8007ec4:	003fb406 	br	8007d98 <__alt_data_end+0xfc007d98>
 8007ec8:	280bd0ba 	srai	r5,r5,2
 8007ecc:	00c00044 	movi	r3,1
 8007ed0:	38800117 	ldw	r2,4(r7)
 8007ed4:	194a983a 	sll	r5,r3,r5
 8007ed8:	2007883a 	mov	r3,r4
 8007edc:	2884b03a 	or	r2,r5,r2
 8007ee0:	38800115 	stw	r2,4(r7)
 8007ee4:	003fbb06 	br	8007dd4 <__alt_data_end+0xfc007dd4>
 8007ee8:	21800515 	stw	r6,20(r4)
 8007eec:	21800415 	stw	r6,16(r4)
 8007ef0:	10c00054 	ori	r3,r2,1
 8007ef4:	31c00315 	stw	r7,12(r6)
 8007ef8:	31c00215 	stw	r7,8(r6)
 8007efc:	30c00115 	stw	r3,4(r6)
 8007f00:	308d883a 	add	r6,r6,r2
 8007f04:	30800015 	stw	r2,0(r6)
 8007f08:	003f9506 	br	8007d60 <__alt_data_end+0xfc007d60>
 8007f0c:	00c01504 	movi	r3,84
 8007f10:	19400536 	bltu	r3,r5,8007f28 <_free_r+0x2b8>
 8007f14:	100ad33a 	srli	r5,r2,12
 8007f18:	28c01bc4 	addi	r3,r5,111
 8007f1c:	18c7883a 	add	r3,r3,r3
 8007f20:	29401b84 	addi	r5,r5,110
 8007f24:	003f9c06 	br	8007d98 <__alt_data_end+0xfc007d98>
 8007f28:	00c05504 	movi	r3,340
 8007f2c:	19400536 	bltu	r3,r5,8007f44 <_free_r+0x2d4>
 8007f30:	100ad3fa 	srli	r5,r2,15
 8007f34:	28c01e04 	addi	r3,r5,120
 8007f38:	18c7883a 	add	r3,r3,r3
 8007f3c:	29401dc4 	addi	r5,r5,119
 8007f40:	003f9506 	br	8007d98 <__alt_data_end+0xfc007d98>
 8007f44:	00c15504 	movi	r3,1364
 8007f48:	19400536 	bltu	r3,r5,8007f60 <_free_r+0x2f0>
 8007f4c:	100ad4ba 	srli	r5,r2,18
 8007f50:	28c01f44 	addi	r3,r5,125
 8007f54:	18c7883a 	add	r3,r3,r3
 8007f58:	29401f04 	addi	r5,r5,124
 8007f5c:	003f8e06 	br	8007d98 <__alt_data_end+0xfc007d98>
 8007f60:	00c03f84 	movi	r3,254
 8007f64:	01401f84 	movi	r5,126
 8007f68:	003f8b06 	br	8007d98 <__alt_data_end+0xfc007d98>
 8007f6c:	10c00054 	ori	r3,r2,1
 8007f70:	30c00115 	stw	r3,4(r6)
 8007f74:	308d883a 	add	r6,r6,r2
 8007f78:	30800015 	stw	r2,0(r6)
 8007f7c:	003f7806 	br	8007d60 <__alt_data_end+0xfc007d60>

08007f80 <memmove>:
 8007f80:	2005883a 	mov	r2,r4
 8007f84:	29000b2e 	bgeu	r5,r4,8007fb4 <memmove+0x34>
 8007f88:	298f883a 	add	r7,r5,r6
 8007f8c:	21c0092e 	bgeu	r4,r7,8007fb4 <memmove+0x34>
 8007f90:	2187883a 	add	r3,r4,r6
 8007f94:	198bc83a 	sub	r5,r3,r6
 8007f98:	30004826 	beq	r6,zero,80080bc <memmove+0x13c>
 8007f9c:	39ffffc4 	addi	r7,r7,-1
 8007fa0:	39000003 	ldbu	r4,0(r7)
 8007fa4:	18ffffc4 	addi	r3,r3,-1
 8007fa8:	19000005 	stb	r4,0(r3)
 8007fac:	28fffb1e 	bne	r5,r3,8007f9c <__alt_data_end+0xfc007f9c>
 8007fb0:	f800283a 	ret
 8007fb4:	00c003c4 	movi	r3,15
 8007fb8:	1980412e 	bgeu	r3,r6,80080c0 <memmove+0x140>
 8007fbc:	2886b03a 	or	r3,r5,r2
 8007fc0:	18c000cc 	andi	r3,r3,3
 8007fc4:	1800401e 	bne	r3,zero,80080c8 <memmove+0x148>
 8007fc8:	33fffc04 	addi	r15,r6,-16
 8007fcc:	781ed13a 	srli	r15,r15,4
 8007fd0:	28c00104 	addi	r3,r5,4
 8007fd4:	13400104 	addi	r13,r2,4
 8007fd8:	781c913a 	slli	r14,r15,4
 8007fdc:	2b000204 	addi	r12,r5,8
 8007fe0:	12c00204 	addi	r11,r2,8
 8007fe4:	73800504 	addi	r14,r14,20
 8007fe8:	2a800304 	addi	r10,r5,12
 8007fec:	12400304 	addi	r9,r2,12
 8007ff0:	2b9d883a 	add	r14,r5,r14
 8007ff4:	2811883a 	mov	r8,r5
 8007ff8:	100f883a 	mov	r7,r2
 8007ffc:	41000017 	ldw	r4,0(r8)
 8008000:	39c00404 	addi	r7,r7,16
 8008004:	18c00404 	addi	r3,r3,16
 8008008:	393ffc15 	stw	r4,-16(r7)
 800800c:	193ffc17 	ldw	r4,-16(r3)
 8008010:	6b400404 	addi	r13,r13,16
 8008014:	5ac00404 	addi	r11,r11,16
 8008018:	693ffc15 	stw	r4,-16(r13)
 800801c:	61000017 	ldw	r4,0(r12)
 8008020:	4a400404 	addi	r9,r9,16
 8008024:	42000404 	addi	r8,r8,16
 8008028:	593ffc15 	stw	r4,-16(r11)
 800802c:	51000017 	ldw	r4,0(r10)
 8008030:	63000404 	addi	r12,r12,16
 8008034:	52800404 	addi	r10,r10,16
 8008038:	493ffc15 	stw	r4,-16(r9)
 800803c:	1bbfef1e 	bne	r3,r14,8007ffc <__alt_data_end+0xfc007ffc>
 8008040:	79000044 	addi	r4,r15,1
 8008044:	2008913a 	slli	r4,r4,4
 8008048:	328003cc 	andi	r10,r6,15
 800804c:	02c000c4 	movi	r11,3
 8008050:	1107883a 	add	r3,r2,r4
 8008054:	290b883a 	add	r5,r5,r4
 8008058:	5a801e2e 	bgeu	r11,r10,80080d4 <memmove+0x154>
 800805c:	1813883a 	mov	r9,r3
 8008060:	2811883a 	mov	r8,r5
 8008064:	500f883a 	mov	r7,r10
 8008068:	41000017 	ldw	r4,0(r8)
 800806c:	4a400104 	addi	r9,r9,4
 8008070:	39ffff04 	addi	r7,r7,-4
 8008074:	493fff15 	stw	r4,-4(r9)
 8008078:	42000104 	addi	r8,r8,4
 800807c:	59fffa36 	bltu	r11,r7,8008068 <__alt_data_end+0xfc008068>
 8008080:	513fff04 	addi	r4,r10,-4
 8008084:	2008d0ba 	srli	r4,r4,2
 8008088:	318000cc 	andi	r6,r6,3
 800808c:	21000044 	addi	r4,r4,1
 8008090:	2109883a 	add	r4,r4,r4
 8008094:	2109883a 	add	r4,r4,r4
 8008098:	1907883a 	add	r3,r3,r4
 800809c:	290b883a 	add	r5,r5,r4
 80080a0:	30000b26 	beq	r6,zero,80080d0 <memmove+0x150>
 80080a4:	198d883a 	add	r6,r3,r6
 80080a8:	29c00003 	ldbu	r7,0(r5)
 80080ac:	18c00044 	addi	r3,r3,1
 80080b0:	29400044 	addi	r5,r5,1
 80080b4:	19ffffc5 	stb	r7,-1(r3)
 80080b8:	19bffb1e 	bne	r3,r6,80080a8 <__alt_data_end+0xfc0080a8>
 80080bc:	f800283a 	ret
 80080c0:	1007883a 	mov	r3,r2
 80080c4:	003ff606 	br	80080a0 <__alt_data_end+0xfc0080a0>
 80080c8:	1007883a 	mov	r3,r2
 80080cc:	003ff506 	br	80080a4 <__alt_data_end+0xfc0080a4>
 80080d0:	f800283a 	ret
 80080d4:	500d883a 	mov	r6,r10
 80080d8:	003ff106 	br	80080a0 <__alt_data_end+0xfc0080a0>

080080dc <memset>:
 80080dc:	20c000cc 	andi	r3,r4,3
 80080e0:	2005883a 	mov	r2,r4
 80080e4:	18004426 	beq	r3,zero,80081f8 <memset+0x11c>
 80080e8:	31ffffc4 	addi	r7,r6,-1
 80080ec:	30004026 	beq	r6,zero,80081f0 <memset+0x114>
 80080f0:	2813883a 	mov	r9,r5
 80080f4:	200d883a 	mov	r6,r4
 80080f8:	2007883a 	mov	r3,r4
 80080fc:	00000406 	br	8008110 <memset+0x34>
 8008100:	3a3fffc4 	addi	r8,r7,-1
 8008104:	31800044 	addi	r6,r6,1
 8008108:	38003926 	beq	r7,zero,80081f0 <memset+0x114>
 800810c:	400f883a 	mov	r7,r8
 8008110:	18c00044 	addi	r3,r3,1
 8008114:	32400005 	stb	r9,0(r6)
 8008118:	1a0000cc 	andi	r8,r3,3
 800811c:	403ff81e 	bne	r8,zero,8008100 <__alt_data_end+0xfc008100>
 8008120:	010000c4 	movi	r4,3
 8008124:	21c02d2e 	bgeu	r4,r7,80081dc <memset+0x100>
 8008128:	29003fcc 	andi	r4,r5,255
 800812c:	200c923a 	slli	r6,r4,8
 8008130:	3108b03a 	or	r4,r6,r4
 8008134:	200c943a 	slli	r6,r4,16
 8008138:	218cb03a 	or	r6,r4,r6
 800813c:	010003c4 	movi	r4,15
 8008140:	21c0182e 	bgeu	r4,r7,80081a4 <memset+0xc8>
 8008144:	3b3ffc04 	addi	r12,r7,-16
 8008148:	6018d13a 	srli	r12,r12,4
 800814c:	1a000104 	addi	r8,r3,4
 8008150:	1ac00204 	addi	r11,r3,8
 8008154:	6008913a 	slli	r4,r12,4
 8008158:	1a800304 	addi	r10,r3,12
 800815c:	1813883a 	mov	r9,r3
 8008160:	21000504 	addi	r4,r4,20
 8008164:	1909883a 	add	r4,r3,r4
 8008168:	49800015 	stw	r6,0(r9)
 800816c:	41800015 	stw	r6,0(r8)
 8008170:	59800015 	stw	r6,0(r11)
 8008174:	51800015 	stw	r6,0(r10)
 8008178:	42000404 	addi	r8,r8,16
 800817c:	4a400404 	addi	r9,r9,16
 8008180:	5ac00404 	addi	r11,r11,16
 8008184:	52800404 	addi	r10,r10,16
 8008188:	413ff71e 	bne	r8,r4,8008168 <__alt_data_end+0xfc008168>
 800818c:	63000044 	addi	r12,r12,1
 8008190:	6018913a 	slli	r12,r12,4
 8008194:	39c003cc 	andi	r7,r7,15
 8008198:	010000c4 	movi	r4,3
 800819c:	1b07883a 	add	r3,r3,r12
 80081a0:	21c00e2e 	bgeu	r4,r7,80081dc <memset+0x100>
 80081a4:	1813883a 	mov	r9,r3
 80081a8:	3811883a 	mov	r8,r7
 80081ac:	010000c4 	movi	r4,3
 80081b0:	49800015 	stw	r6,0(r9)
 80081b4:	423fff04 	addi	r8,r8,-4
 80081b8:	4a400104 	addi	r9,r9,4
 80081bc:	223ffc36 	bltu	r4,r8,80081b0 <__alt_data_end+0xfc0081b0>
 80081c0:	393fff04 	addi	r4,r7,-4
 80081c4:	2008d0ba 	srli	r4,r4,2
 80081c8:	39c000cc 	andi	r7,r7,3
 80081cc:	21000044 	addi	r4,r4,1
 80081d0:	2109883a 	add	r4,r4,r4
 80081d4:	2109883a 	add	r4,r4,r4
 80081d8:	1907883a 	add	r3,r3,r4
 80081dc:	38000526 	beq	r7,zero,80081f4 <memset+0x118>
 80081e0:	19cf883a 	add	r7,r3,r7
 80081e4:	19400005 	stb	r5,0(r3)
 80081e8:	18c00044 	addi	r3,r3,1
 80081ec:	38fffd1e 	bne	r7,r3,80081e4 <__alt_data_end+0xfc0081e4>
 80081f0:	f800283a 	ret
 80081f4:	f800283a 	ret
 80081f8:	2007883a 	mov	r3,r4
 80081fc:	300f883a 	mov	r7,r6
 8008200:	003fc706 	br	8008120 <__alt_data_end+0xfc008120>

08008204 <_realloc_r>:
 8008204:	defff604 	addi	sp,sp,-40
 8008208:	dc800215 	stw	r18,8(sp)
 800820c:	dfc00915 	stw	ra,36(sp)
 8008210:	df000815 	stw	fp,32(sp)
 8008214:	ddc00715 	stw	r23,28(sp)
 8008218:	dd800615 	stw	r22,24(sp)
 800821c:	dd400515 	stw	r21,20(sp)
 8008220:	dd000415 	stw	r20,16(sp)
 8008224:	dcc00315 	stw	r19,12(sp)
 8008228:	dc400115 	stw	r17,4(sp)
 800822c:	dc000015 	stw	r16,0(sp)
 8008230:	3025883a 	mov	r18,r6
 8008234:	2800b726 	beq	r5,zero,8008514 <_realloc_r+0x310>
 8008238:	282b883a 	mov	r21,r5
 800823c:	2029883a 	mov	r20,r4
 8008240:	800be400 	call	800be40 <__malloc_lock>
 8008244:	a8bfff17 	ldw	r2,-4(r21)
 8008248:	043fff04 	movi	r16,-4
 800824c:	90c002c4 	addi	r3,r18,11
 8008250:	01000584 	movi	r4,22
 8008254:	acfffe04 	addi	r19,r21,-8
 8008258:	1420703a 	and	r16,r2,r16
 800825c:	20c0332e 	bgeu	r4,r3,800832c <_realloc_r+0x128>
 8008260:	047ffe04 	movi	r17,-8
 8008264:	1c62703a 	and	r17,r3,r17
 8008268:	8807883a 	mov	r3,r17
 800826c:	88005816 	blt	r17,zero,80083d0 <_realloc_r+0x1cc>
 8008270:	8c805736 	bltu	r17,r18,80083d0 <_realloc_r+0x1cc>
 8008274:	80c0300e 	bge	r16,r3,8008338 <_realloc_r+0x134>
 8008278:	07020074 	movhi	fp,2049
 800827c:	e73a7a04 	addi	fp,fp,-5656
 8008280:	e1c00217 	ldw	r7,8(fp)
 8008284:	9c09883a 	add	r4,r19,r16
 8008288:	22000117 	ldw	r8,4(r4)
 800828c:	21c06326 	beq	r4,r7,800841c <_realloc_r+0x218>
 8008290:	017fff84 	movi	r5,-2
 8008294:	414a703a 	and	r5,r8,r5
 8008298:	214b883a 	add	r5,r4,r5
 800829c:	29800117 	ldw	r6,4(r5)
 80082a0:	3180004c 	andi	r6,r6,1
 80082a4:	30003f26 	beq	r6,zero,80083a4 <_realloc_r+0x1a0>
 80082a8:	1080004c 	andi	r2,r2,1
 80082ac:	10008326 	beq	r2,zero,80084bc <_realloc_r+0x2b8>
 80082b0:	900b883a 	mov	r5,r18
 80082b4:	a009883a 	mov	r4,r20
 80082b8:	800486c0 	call	800486c <_malloc_r>
 80082bc:	1025883a 	mov	r18,r2
 80082c0:	10011e26 	beq	r2,zero,800873c <_realloc_r+0x538>
 80082c4:	a93fff17 	ldw	r4,-4(r21)
 80082c8:	10fffe04 	addi	r3,r2,-8
 80082cc:	00bfff84 	movi	r2,-2
 80082d0:	2084703a 	and	r2,r4,r2
 80082d4:	9885883a 	add	r2,r19,r2
 80082d8:	1880ee26 	beq	r3,r2,8008694 <_realloc_r+0x490>
 80082dc:	81bfff04 	addi	r6,r16,-4
 80082e0:	00800904 	movi	r2,36
 80082e4:	1180b836 	bltu	r2,r6,80085c8 <_realloc_r+0x3c4>
 80082e8:	00c004c4 	movi	r3,19
 80082ec:	19809636 	bltu	r3,r6,8008548 <_realloc_r+0x344>
 80082f0:	9005883a 	mov	r2,r18
 80082f4:	a807883a 	mov	r3,r21
 80082f8:	19000017 	ldw	r4,0(r3)
 80082fc:	11000015 	stw	r4,0(r2)
 8008300:	19000117 	ldw	r4,4(r3)
 8008304:	11000115 	stw	r4,4(r2)
 8008308:	18c00217 	ldw	r3,8(r3)
 800830c:	10c00215 	stw	r3,8(r2)
 8008310:	a80b883a 	mov	r5,r21
 8008314:	a009883a 	mov	r4,r20
 8008318:	8007c700 	call	8007c70 <_free_r>
 800831c:	a009883a 	mov	r4,r20
 8008320:	800be640 	call	800be64 <__malloc_unlock>
 8008324:	9005883a 	mov	r2,r18
 8008328:	00001206 	br	8008374 <_realloc_r+0x170>
 800832c:	00c00404 	movi	r3,16
 8008330:	1823883a 	mov	r17,r3
 8008334:	003fce06 	br	8008270 <__alt_data_end+0xfc008270>
 8008338:	a825883a 	mov	r18,r21
 800833c:	8445c83a 	sub	r2,r16,r17
 8008340:	00c003c4 	movi	r3,15
 8008344:	18802636 	bltu	r3,r2,80083e0 <_realloc_r+0x1dc>
 8008348:	99800117 	ldw	r6,4(r19)
 800834c:	9c07883a 	add	r3,r19,r16
 8008350:	3180004c 	andi	r6,r6,1
 8008354:	3420b03a 	or	r16,r6,r16
 8008358:	9c000115 	stw	r16,4(r19)
 800835c:	18800117 	ldw	r2,4(r3)
 8008360:	10800054 	ori	r2,r2,1
 8008364:	18800115 	stw	r2,4(r3)
 8008368:	a009883a 	mov	r4,r20
 800836c:	800be640 	call	800be64 <__malloc_unlock>
 8008370:	9005883a 	mov	r2,r18
 8008374:	dfc00917 	ldw	ra,36(sp)
 8008378:	df000817 	ldw	fp,32(sp)
 800837c:	ddc00717 	ldw	r23,28(sp)
 8008380:	dd800617 	ldw	r22,24(sp)
 8008384:	dd400517 	ldw	r21,20(sp)
 8008388:	dd000417 	ldw	r20,16(sp)
 800838c:	dcc00317 	ldw	r19,12(sp)
 8008390:	dc800217 	ldw	r18,8(sp)
 8008394:	dc400117 	ldw	r17,4(sp)
 8008398:	dc000017 	ldw	r16,0(sp)
 800839c:	dec00a04 	addi	sp,sp,40
 80083a0:	f800283a 	ret
 80083a4:	017fff04 	movi	r5,-4
 80083a8:	414a703a 	and	r5,r8,r5
 80083ac:	814d883a 	add	r6,r16,r5
 80083b0:	30c01f16 	blt	r6,r3,8008430 <_realloc_r+0x22c>
 80083b4:	20800317 	ldw	r2,12(r4)
 80083b8:	20c00217 	ldw	r3,8(r4)
 80083bc:	a825883a 	mov	r18,r21
 80083c0:	3021883a 	mov	r16,r6
 80083c4:	18800315 	stw	r2,12(r3)
 80083c8:	10c00215 	stw	r3,8(r2)
 80083cc:	003fdb06 	br	800833c <__alt_data_end+0xfc00833c>
 80083d0:	00800304 	movi	r2,12
 80083d4:	a0800015 	stw	r2,0(r20)
 80083d8:	0005883a 	mov	r2,zero
 80083dc:	003fe506 	br	8008374 <__alt_data_end+0xfc008374>
 80083e0:	98c00117 	ldw	r3,4(r19)
 80083e4:	9c4b883a 	add	r5,r19,r17
 80083e8:	11000054 	ori	r4,r2,1
 80083ec:	18c0004c 	andi	r3,r3,1
 80083f0:	1c62b03a 	or	r17,r3,r17
 80083f4:	9c400115 	stw	r17,4(r19)
 80083f8:	29000115 	stw	r4,4(r5)
 80083fc:	2885883a 	add	r2,r5,r2
 8008400:	10c00117 	ldw	r3,4(r2)
 8008404:	29400204 	addi	r5,r5,8
 8008408:	a009883a 	mov	r4,r20
 800840c:	18c00054 	ori	r3,r3,1
 8008410:	10c00115 	stw	r3,4(r2)
 8008414:	8007c700 	call	8007c70 <_free_r>
 8008418:	003fd306 	br	8008368 <__alt_data_end+0xfc008368>
 800841c:	017fff04 	movi	r5,-4
 8008420:	414a703a 	and	r5,r8,r5
 8008424:	89800404 	addi	r6,r17,16
 8008428:	8151883a 	add	r8,r16,r5
 800842c:	4180590e 	bge	r8,r6,8008594 <_realloc_r+0x390>
 8008430:	1080004c 	andi	r2,r2,1
 8008434:	103f9e1e 	bne	r2,zero,80082b0 <__alt_data_end+0xfc0082b0>
 8008438:	adbffe17 	ldw	r22,-8(r21)
 800843c:	00bfff04 	movi	r2,-4
 8008440:	9dadc83a 	sub	r22,r19,r22
 8008444:	b1800117 	ldw	r6,4(r22)
 8008448:	3084703a 	and	r2,r6,r2
 800844c:	20002026 	beq	r4,zero,80084d0 <_realloc_r+0x2cc>
 8008450:	80af883a 	add	r23,r16,r2
 8008454:	b96f883a 	add	r23,r23,r5
 8008458:	21c05f26 	beq	r4,r7,80085d8 <_realloc_r+0x3d4>
 800845c:	b8c01c16 	blt	r23,r3,80084d0 <_realloc_r+0x2cc>
 8008460:	20800317 	ldw	r2,12(r4)
 8008464:	20c00217 	ldw	r3,8(r4)
 8008468:	81bfff04 	addi	r6,r16,-4
 800846c:	01000904 	movi	r4,36
 8008470:	18800315 	stw	r2,12(r3)
 8008474:	10c00215 	stw	r3,8(r2)
 8008478:	b0c00217 	ldw	r3,8(r22)
 800847c:	b0800317 	ldw	r2,12(r22)
 8008480:	b4800204 	addi	r18,r22,8
 8008484:	18800315 	stw	r2,12(r3)
 8008488:	10c00215 	stw	r3,8(r2)
 800848c:	21801b36 	bltu	r4,r6,80084fc <_realloc_r+0x2f8>
 8008490:	008004c4 	movi	r2,19
 8008494:	1180352e 	bgeu	r2,r6,800856c <_realloc_r+0x368>
 8008498:	a8800017 	ldw	r2,0(r21)
 800849c:	b0800215 	stw	r2,8(r22)
 80084a0:	a8800117 	ldw	r2,4(r21)
 80084a4:	b0800315 	stw	r2,12(r22)
 80084a8:	008006c4 	movi	r2,27
 80084ac:	11807f36 	bltu	r2,r6,80086ac <_realloc_r+0x4a8>
 80084b0:	b0800404 	addi	r2,r22,16
 80084b4:	ad400204 	addi	r21,r21,8
 80084b8:	00002d06 	br	8008570 <_realloc_r+0x36c>
 80084bc:	adbffe17 	ldw	r22,-8(r21)
 80084c0:	00bfff04 	movi	r2,-4
 80084c4:	9dadc83a 	sub	r22,r19,r22
 80084c8:	b1000117 	ldw	r4,4(r22)
 80084cc:	2084703a 	and	r2,r4,r2
 80084d0:	b03f7726 	beq	r22,zero,80082b0 <__alt_data_end+0xfc0082b0>
 80084d4:	80af883a 	add	r23,r16,r2
 80084d8:	b8ff7516 	blt	r23,r3,80082b0 <__alt_data_end+0xfc0082b0>
 80084dc:	b0800317 	ldw	r2,12(r22)
 80084e0:	b0c00217 	ldw	r3,8(r22)
 80084e4:	81bfff04 	addi	r6,r16,-4
 80084e8:	01000904 	movi	r4,36
 80084ec:	18800315 	stw	r2,12(r3)
 80084f0:	10c00215 	stw	r3,8(r2)
 80084f4:	b4800204 	addi	r18,r22,8
 80084f8:	21bfe52e 	bgeu	r4,r6,8008490 <__alt_data_end+0xfc008490>
 80084fc:	a80b883a 	mov	r5,r21
 8008500:	9009883a 	mov	r4,r18
 8008504:	8007f800 	call	8007f80 <memmove>
 8008508:	b821883a 	mov	r16,r23
 800850c:	b027883a 	mov	r19,r22
 8008510:	003f8a06 	br	800833c <__alt_data_end+0xfc00833c>
 8008514:	300b883a 	mov	r5,r6
 8008518:	dfc00917 	ldw	ra,36(sp)
 800851c:	df000817 	ldw	fp,32(sp)
 8008520:	ddc00717 	ldw	r23,28(sp)
 8008524:	dd800617 	ldw	r22,24(sp)
 8008528:	dd400517 	ldw	r21,20(sp)
 800852c:	dd000417 	ldw	r20,16(sp)
 8008530:	dcc00317 	ldw	r19,12(sp)
 8008534:	dc800217 	ldw	r18,8(sp)
 8008538:	dc400117 	ldw	r17,4(sp)
 800853c:	dc000017 	ldw	r16,0(sp)
 8008540:	dec00a04 	addi	sp,sp,40
 8008544:	800486c1 	jmpi	800486c <_malloc_r>
 8008548:	a8c00017 	ldw	r3,0(r21)
 800854c:	90c00015 	stw	r3,0(r18)
 8008550:	a8c00117 	ldw	r3,4(r21)
 8008554:	90c00115 	stw	r3,4(r18)
 8008558:	00c006c4 	movi	r3,27
 800855c:	19804536 	bltu	r3,r6,8008674 <_realloc_r+0x470>
 8008560:	90800204 	addi	r2,r18,8
 8008564:	a8c00204 	addi	r3,r21,8
 8008568:	003f6306 	br	80082f8 <__alt_data_end+0xfc0082f8>
 800856c:	9005883a 	mov	r2,r18
 8008570:	a8c00017 	ldw	r3,0(r21)
 8008574:	b821883a 	mov	r16,r23
 8008578:	b027883a 	mov	r19,r22
 800857c:	10c00015 	stw	r3,0(r2)
 8008580:	a8c00117 	ldw	r3,4(r21)
 8008584:	10c00115 	stw	r3,4(r2)
 8008588:	a8c00217 	ldw	r3,8(r21)
 800858c:	10c00215 	stw	r3,8(r2)
 8008590:	003f6a06 	br	800833c <__alt_data_end+0xfc00833c>
 8008594:	9c67883a 	add	r19,r19,r17
 8008598:	4445c83a 	sub	r2,r8,r17
 800859c:	e4c00215 	stw	r19,8(fp)
 80085a0:	10800054 	ori	r2,r2,1
 80085a4:	98800115 	stw	r2,4(r19)
 80085a8:	a8bfff17 	ldw	r2,-4(r21)
 80085ac:	a009883a 	mov	r4,r20
 80085b0:	1080004c 	andi	r2,r2,1
 80085b4:	1462b03a 	or	r17,r2,r17
 80085b8:	ac7fff15 	stw	r17,-4(r21)
 80085bc:	800be640 	call	800be64 <__malloc_unlock>
 80085c0:	a805883a 	mov	r2,r21
 80085c4:	003f6b06 	br	8008374 <__alt_data_end+0xfc008374>
 80085c8:	a80b883a 	mov	r5,r21
 80085cc:	9009883a 	mov	r4,r18
 80085d0:	8007f800 	call	8007f80 <memmove>
 80085d4:	003f4e06 	br	8008310 <__alt_data_end+0xfc008310>
 80085d8:	89000404 	addi	r4,r17,16
 80085dc:	b93fbc16 	blt	r23,r4,80084d0 <__alt_data_end+0xfc0084d0>
 80085e0:	b0800317 	ldw	r2,12(r22)
 80085e4:	b0c00217 	ldw	r3,8(r22)
 80085e8:	81bfff04 	addi	r6,r16,-4
 80085ec:	01000904 	movi	r4,36
 80085f0:	18800315 	stw	r2,12(r3)
 80085f4:	10c00215 	stw	r3,8(r2)
 80085f8:	b4800204 	addi	r18,r22,8
 80085fc:	21804336 	bltu	r4,r6,800870c <_realloc_r+0x508>
 8008600:	008004c4 	movi	r2,19
 8008604:	11803f2e 	bgeu	r2,r6,8008704 <_realloc_r+0x500>
 8008608:	a8800017 	ldw	r2,0(r21)
 800860c:	b0800215 	stw	r2,8(r22)
 8008610:	a8800117 	ldw	r2,4(r21)
 8008614:	b0800315 	stw	r2,12(r22)
 8008618:	008006c4 	movi	r2,27
 800861c:	11803f36 	bltu	r2,r6,800871c <_realloc_r+0x518>
 8008620:	b0800404 	addi	r2,r22,16
 8008624:	ad400204 	addi	r21,r21,8
 8008628:	a8c00017 	ldw	r3,0(r21)
 800862c:	10c00015 	stw	r3,0(r2)
 8008630:	a8c00117 	ldw	r3,4(r21)
 8008634:	10c00115 	stw	r3,4(r2)
 8008638:	a8c00217 	ldw	r3,8(r21)
 800863c:	10c00215 	stw	r3,8(r2)
 8008640:	b447883a 	add	r3,r22,r17
 8008644:	bc45c83a 	sub	r2,r23,r17
 8008648:	e0c00215 	stw	r3,8(fp)
 800864c:	10800054 	ori	r2,r2,1
 8008650:	18800115 	stw	r2,4(r3)
 8008654:	b0800117 	ldw	r2,4(r22)
 8008658:	a009883a 	mov	r4,r20
 800865c:	1080004c 	andi	r2,r2,1
 8008660:	1462b03a 	or	r17,r2,r17
 8008664:	b4400115 	stw	r17,4(r22)
 8008668:	800be640 	call	800be64 <__malloc_unlock>
 800866c:	9005883a 	mov	r2,r18
 8008670:	003f4006 	br	8008374 <__alt_data_end+0xfc008374>
 8008674:	a8c00217 	ldw	r3,8(r21)
 8008678:	90c00215 	stw	r3,8(r18)
 800867c:	a8c00317 	ldw	r3,12(r21)
 8008680:	90c00315 	stw	r3,12(r18)
 8008684:	30801126 	beq	r6,r2,80086cc <_realloc_r+0x4c8>
 8008688:	90800404 	addi	r2,r18,16
 800868c:	a8c00404 	addi	r3,r21,16
 8008690:	003f1906 	br	80082f8 <__alt_data_end+0xfc0082f8>
 8008694:	90ffff17 	ldw	r3,-4(r18)
 8008698:	00bfff04 	movi	r2,-4
 800869c:	a825883a 	mov	r18,r21
 80086a0:	1884703a 	and	r2,r3,r2
 80086a4:	80a1883a 	add	r16,r16,r2
 80086a8:	003f2406 	br	800833c <__alt_data_end+0xfc00833c>
 80086ac:	a8800217 	ldw	r2,8(r21)
 80086b0:	b0800415 	stw	r2,16(r22)
 80086b4:	a8800317 	ldw	r2,12(r21)
 80086b8:	b0800515 	stw	r2,20(r22)
 80086bc:	31000a26 	beq	r6,r4,80086e8 <_realloc_r+0x4e4>
 80086c0:	b0800604 	addi	r2,r22,24
 80086c4:	ad400404 	addi	r21,r21,16
 80086c8:	003fa906 	br	8008570 <__alt_data_end+0xfc008570>
 80086cc:	a9000417 	ldw	r4,16(r21)
 80086d0:	90800604 	addi	r2,r18,24
 80086d4:	a8c00604 	addi	r3,r21,24
 80086d8:	91000415 	stw	r4,16(r18)
 80086dc:	a9000517 	ldw	r4,20(r21)
 80086e0:	91000515 	stw	r4,20(r18)
 80086e4:	003f0406 	br	80082f8 <__alt_data_end+0xfc0082f8>
 80086e8:	a8c00417 	ldw	r3,16(r21)
 80086ec:	ad400604 	addi	r21,r21,24
 80086f0:	b0800804 	addi	r2,r22,32
 80086f4:	b0c00615 	stw	r3,24(r22)
 80086f8:	a8ffff17 	ldw	r3,-4(r21)
 80086fc:	b0c00715 	stw	r3,28(r22)
 8008700:	003f9b06 	br	8008570 <__alt_data_end+0xfc008570>
 8008704:	9005883a 	mov	r2,r18
 8008708:	003fc706 	br	8008628 <__alt_data_end+0xfc008628>
 800870c:	a80b883a 	mov	r5,r21
 8008710:	9009883a 	mov	r4,r18
 8008714:	8007f800 	call	8007f80 <memmove>
 8008718:	003fc906 	br	8008640 <__alt_data_end+0xfc008640>
 800871c:	a8800217 	ldw	r2,8(r21)
 8008720:	b0800415 	stw	r2,16(r22)
 8008724:	a8800317 	ldw	r2,12(r21)
 8008728:	b0800515 	stw	r2,20(r22)
 800872c:	31000726 	beq	r6,r4,800874c <_realloc_r+0x548>
 8008730:	b0800604 	addi	r2,r22,24
 8008734:	ad400404 	addi	r21,r21,16
 8008738:	003fbb06 	br	8008628 <__alt_data_end+0xfc008628>
 800873c:	a009883a 	mov	r4,r20
 8008740:	800be640 	call	800be64 <__malloc_unlock>
 8008744:	0005883a 	mov	r2,zero
 8008748:	003f0a06 	br	8008374 <__alt_data_end+0xfc008374>
 800874c:	a8c00417 	ldw	r3,16(r21)
 8008750:	ad400604 	addi	r21,r21,24
 8008754:	b0800804 	addi	r2,r22,32
 8008758:	b0c00615 	stw	r3,24(r22)
 800875c:	a8ffff17 	ldw	r3,-4(r21)
 8008760:	b0c00715 	stw	r3,28(r22)
 8008764:	003fb006 	br	8008628 <__alt_data_end+0xfc008628>

08008768 <__muldi3>:
 8008768:	defff604 	addi	sp,sp,-40
 800876c:	dd800615 	stw	r22,24(sp)
 8008770:	dd400515 	stw	r21,20(sp)
 8008774:	dc400115 	stw	r17,4(sp)
 8008778:	357fffcc 	andi	r21,r6,65535
 800877c:	2022d43a 	srli	r17,r4,16
 8008780:	25bfffcc 	andi	r22,r4,65535
 8008784:	dcc00315 	stw	r19,12(sp)
 8008788:	dc800215 	stw	r18,8(sp)
 800878c:	2027883a 	mov	r19,r4
 8008790:	2825883a 	mov	r18,r5
 8008794:	b009883a 	mov	r4,r22
 8008798:	a80b883a 	mov	r5,r21
 800879c:	dfc00915 	stw	ra,36(sp)
 80087a0:	df000815 	stw	fp,32(sp)
 80087a4:	ddc00715 	stw	r23,28(sp)
 80087a8:	3839883a 	mov	fp,r7
 80087ac:	302ed43a 	srli	r23,r6,16
 80087b0:	dd000415 	stw	r20,16(sp)
 80087b4:	dc000015 	stw	r16,0(sp)
 80087b8:	3029883a 	mov	r20,r6
 80087bc:	8000a240 	call	8000a24 <__mulsi3>
 80087c0:	a80b883a 	mov	r5,r21
 80087c4:	8809883a 	mov	r4,r17
 80087c8:	1021883a 	mov	r16,r2
 80087cc:	8000a240 	call	8000a24 <__mulsi3>
 80087d0:	8809883a 	mov	r4,r17
 80087d4:	b80b883a 	mov	r5,r23
 80087d8:	102b883a 	mov	r21,r2
 80087dc:	8000a240 	call	8000a24 <__mulsi3>
 80087e0:	b80b883a 	mov	r5,r23
 80087e4:	b009883a 	mov	r4,r22
 80087e8:	1023883a 	mov	r17,r2
 80087ec:	8000a240 	call	8000a24 <__mulsi3>
 80087f0:	8006d43a 	srli	r3,r16,16
 80087f4:	1545883a 	add	r2,r2,r21
 80087f8:	1885883a 	add	r2,r3,r2
 80087fc:	1540022e 	bgeu	r2,r21,8008808 <__muldi3+0xa0>
 8008800:	00c00074 	movhi	r3,1
 8008804:	88e3883a 	add	r17,r17,r3
 8008808:	1006d43a 	srli	r3,r2,16
 800880c:	1004943a 	slli	r2,r2,16
 8008810:	e00b883a 	mov	r5,fp
 8008814:	9809883a 	mov	r4,r19
 8008818:	843fffcc 	andi	r16,r16,65535
 800881c:	1c63883a 	add	r17,r3,r17
 8008820:	1421883a 	add	r16,r2,r16
 8008824:	8000a240 	call	8000a24 <__mulsi3>
 8008828:	900b883a 	mov	r5,r18
 800882c:	a009883a 	mov	r4,r20
 8008830:	1027883a 	mov	r19,r2
 8008834:	8000a240 	call	8000a24 <__mulsi3>
 8008838:	9885883a 	add	r2,r19,r2
 800883c:	1447883a 	add	r3,r2,r17
 8008840:	8005883a 	mov	r2,r16
 8008844:	dfc00917 	ldw	ra,36(sp)
 8008848:	df000817 	ldw	fp,32(sp)
 800884c:	ddc00717 	ldw	r23,28(sp)
 8008850:	dd800617 	ldw	r22,24(sp)
 8008854:	dd400517 	ldw	r21,20(sp)
 8008858:	dd000417 	ldw	r20,16(sp)
 800885c:	dcc00317 	ldw	r19,12(sp)
 8008860:	dc800217 	ldw	r18,8(sp)
 8008864:	dc400117 	ldw	r17,4(sp)
 8008868:	dc000017 	ldw	r16,0(sp)
 800886c:	dec00a04 	addi	sp,sp,40
 8008870:	f800283a 	ret

08008874 <__udivdi3>:
 8008874:	defff404 	addi	sp,sp,-48
 8008878:	dcc00515 	stw	r19,20(sp)
 800887c:	dc000215 	stw	r16,8(sp)
 8008880:	dfc00b15 	stw	ra,44(sp)
 8008884:	df000a15 	stw	fp,40(sp)
 8008888:	ddc00915 	stw	r23,36(sp)
 800888c:	dd800815 	stw	r22,32(sp)
 8008890:	dd400715 	stw	r21,28(sp)
 8008894:	dd000615 	stw	r20,24(sp)
 8008898:	dc800415 	stw	r18,16(sp)
 800889c:	dc400315 	stw	r17,12(sp)
 80088a0:	2027883a 	mov	r19,r4
 80088a4:	2821883a 	mov	r16,r5
 80088a8:	3800461e 	bne	r7,zero,80089c4 <__udivdi3+0x150>
 80088ac:	3023883a 	mov	r17,r6
 80088b0:	2025883a 	mov	r18,r4
 80088b4:	2980572e 	bgeu	r5,r6,8008a14 <__udivdi3+0x1a0>
 80088b8:	00bfffd4 	movui	r2,65535
 80088bc:	282d883a 	mov	r22,r5
 80088c0:	1180b236 	bltu	r2,r6,8008b8c <__udivdi3+0x318>
 80088c4:	00803fc4 	movi	r2,255
 80088c8:	1185803a 	cmpltu	r2,r2,r6
 80088cc:	100490fa 	slli	r2,r2,3
 80088d0:	3086d83a 	srl	r3,r6,r2
 80088d4:	01020074 	movhi	r4,2049
 80088d8:	2138ac04 	addi	r4,r4,-7504
 80088dc:	20c7883a 	add	r3,r4,r3
 80088e0:	18c00003 	ldbu	r3,0(r3)
 80088e4:	1885883a 	add	r2,r3,r2
 80088e8:	00c00804 	movi	r3,32
 80088ec:	1887c83a 	sub	r3,r3,r2
 80088f0:	18000526 	beq	r3,zero,8008908 <__udivdi3+0x94>
 80088f4:	80e0983a 	sll	r16,r16,r3
 80088f8:	9884d83a 	srl	r2,r19,r2
 80088fc:	30e2983a 	sll	r17,r6,r3
 8008900:	98e4983a 	sll	r18,r19,r3
 8008904:	142cb03a 	or	r22,r2,r16
 8008908:	882ad43a 	srli	r21,r17,16
 800890c:	b009883a 	mov	r4,r22
 8008910:	8d3fffcc 	andi	r20,r17,65535
 8008914:	a80b883a 	mov	r5,r21
 8008918:	80009cc0 	call	80009cc <__umodsi3>
 800891c:	b009883a 	mov	r4,r22
 8008920:	a80b883a 	mov	r5,r21
 8008924:	1027883a 	mov	r19,r2
 8008928:	80009680 	call	8000968 <__udivsi3>
 800892c:	100b883a 	mov	r5,r2
 8008930:	a009883a 	mov	r4,r20
 8008934:	102d883a 	mov	r22,r2
 8008938:	8000a240 	call	8000a24 <__mulsi3>
 800893c:	9826943a 	slli	r19,r19,16
 8008940:	9006d43a 	srli	r3,r18,16
 8008944:	1cc6b03a 	or	r3,r3,r19
 8008948:	1880052e 	bgeu	r3,r2,8008960 <__udivdi3+0xec>
 800894c:	1c47883a 	add	r3,r3,r17
 8008950:	b13fffc4 	addi	r4,r22,-1
 8008954:	1c400136 	bltu	r3,r17,800895c <__udivdi3+0xe8>
 8008958:	18814236 	bltu	r3,r2,8008e64 <__udivdi3+0x5f0>
 800895c:	202d883a 	mov	r22,r4
 8008960:	18a1c83a 	sub	r16,r3,r2
 8008964:	8009883a 	mov	r4,r16
 8008968:	a80b883a 	mov	r5,r21
 800896c:	80009cc0 	call	80009cc <__umodsi3>
 8008970:	1027883a 	mov	r19,r2
 8008974:	8009883a 	mov	r4,r16
 8008978:	a80b883a 	mov	r5,r21
 800897c:	9826943a 	slli	r19,r19,16
 8008980:	80009680 	call	8000968 <__udivsi3>
 8008984:	100b883a 	mov	r5,r2
 8008988:	a009883a 	mov	r4,r20
 800898c:	94bfffcc 	andi	r18,r18,65535
 8008990:	1021883a 	mov	r16,r2
 8008994:	94e4b03a 	or	r18,r18,r19
 8008998:	8000a240 	call	8000a24 <__mulsi3>
 800899c:	9080052e 	bgeu	r18,r2,80089b4 <__udivdi3+0x140>
 80089a0:	8ca5883a 	add	r18,r17,r18
 80089a4:	80ffffc4 	addi	r3,r16,-1
 80089a8:	94410c36 	bltu	r18,r17,8008ddc <__udivdi3+0x568>
 80089ac:	90810b2e 	bgeu	r18,r2,8008ddc <__udivdi3+0x568>
 80089b0:	843fff84 	addi	r16,r16,-2
 80089b4:	b004943a 	slli	r2,r22,16
 80089b8:	0007883a 	mov	r3,zero
 80089bc:	1404b03a 	or	r2,r2,r16
 80089c0:	00005e06 	br	8008b3c <__udivdi3+0x2c8>
 80089c4:	29c05b36 	bltu	r5,r7,8008b34 <__udivdi3+0x2c0>
 80089c8:	00bfffd4 	movui	r2,65535
 80089cc:	11c0672e 	bgeu	r2,r7,8008b6c <__udivdi3+0x2f8>
 80089d0:	00804034 	movhi	r2,256
 80089d4:	10bfffc4 	addi	r2,r2,-1
 80089d8:	11c10a36 	bltu	r2,r7,8008e04 <__udivdi3+0x590>
 80089dc:	00800404 	movi	r2,16
 80089e0:	3886d83a 	srl	r3,r7,r2
 80089e4:	01020074 	movhi	r4,2049
 80089e8:	2138ac04 	addi	r4,r4,-7504
 80089ec:	20c7883a 	add	r3,r4,r3
 80089f0:	18c00003 	ldbu	r3,0(r3)
 80089f4:	05c00804 	movi	r23,32
 80089f8:	1885883a 	add	r2,r3,r2
 80089fc:	b8afc83a 	sub	r23,r23,r2
 8008a00:	b800671e 	bne	r23,zero,8008ba0 <__udivdi3+0x32c>
 8008a04:	3c010536 	bltu	r7,r16,8008e1c <__udivdi3+0x5a8>
 8008a08:	9985403a 	cmpgeu	r2,r19,r6
 8008a0c:	0007883a 	mov	r3,zero
 8008a10:	00004a06 	br	8008b3c <__udivdi3+0x2c8>
 8008a14:	3000041e 	bne	r6,zero,8008a28 <__udivdi3+0x1b4>
 8008a18:	000b883a 	mov	r5,zero
 8008a1c:	01000044 	movi	r4,1
 8008a20:	80009680 	call	8000968 <__udivsi3>
 8008a24:	1023883a 	mov	r17,r2
 8008a28:	00bfffd4 	movui	r2,65535
 8008a2c:	1440532e 	bgeu	r2,r17,8008b7c <__udivdi3+0x308>
 8008a30:	00804034 	movhi	r2,256
 8008a34:	10bfffc4 	addi	r2,r2,-1
 8008a38:	1440f436 	bltu	r2,r17,8008e0c <__udivdi3+0x598>
 8008a3c:	00800404 	movi	r2,16
 8008a40:	8886d83a 	srl	r3,r17,r2
 8008a44:	01020074 	movhi	r4,2049
 8008a48:	2138ac04 	addi	r4,r4,-7504
 8008a4c:	20c7883a 	add	r3,r4,r3
 8008a50:	18c00003 	ldbu	r3,0(r3)
 8008a54:	1885883a 	add	r2,r3,r2
 8008a58:	00c00804 	movi	r3,32
 8008a5c:	1887c83a 	sub	r3,r3,r2
 8008a60:	1800a51e 	bne	r3,zero,8008cf8 <__udivdi3+0x484>
 8008a64:	882ad43a 	srli	r21,r17,16
 8008a68:	8461c83a 	sub	r16,r16,r17
 8008a6c:	8d3fffcc 	andi	r20,r17,65535
 8008a70:	00c00044 	movi	r3,1
 8008a74:	a80b883a 	mov	r5,r21
 8008a78:	8009883a 	mov	r4,r16
 8008a7c:	d8c00115 	stw	r3,4(sp)
 8008a80:	80009cc0 	call	80009cc <__umodsi3>
 8008a84:	a80b883a 	mov	r5,r21
 8008a88:	8009883a 	mov	r4,r16
 8008a8c:	1027883a 	mov	r19,r2
 8008a90:	80009680 	call	8000968 <__udivsi3>
 8008a94:	a00b883a 	mov	r5,r20
 8008a98:	1009883a 	mov	r4,r2
 8008a9c:	102d883a 	mov	r22,r2
 8008aa0:	8000a240 	call	8000a24 <__mulsi3>
 8008aa4:	9826943a 	slli	r19,r19,16
 8008aa8:	900ed43a 	srli	r7,r18,16
 8008aac:	d8c00117 	ldw	r3,4(sp)
 8008ab0:	3cceb03a 	or	r7,r7,r19
 8008ab4:	3880052e 	bgeu	r7,r2,8008acc <__udivdi3+0x258>
 8008ab8:	3c4f883a 	add	r7,r7,r17
 8008abc:	b13fffc4 	addi	r4,r22,-1
 8008ac0:	3c400136 	bltu	r7,r17,8008ac8 <__udivdi3+0x254>
 8008ac4:	3880e436 	bltu	r7,r2,8008e58 <__udivdi3+0x5e4>
 8008ac8:	202d883a 	mov	r22,r4
 8008acc:	38a1c83a 	sub	r16,r7,r2
 8008ad0:	8009883a 	mov	r4,r16
 8008ad4:	a80b883a 	mov	r5,r21
 8008ad8:	d8c00115 	stw	r3,4(sp)
 8008adc:	80009cc0 	call	80009cc <__umodsi3>
 8008ae0:	1027883a 	mov	r19,r2
 8008ae4:	8009883a 	mov	r4,r16
 8008ae8:	a80b883a 	mov	r5,r21
 8008aec:	9826943a 	slli	r19,r19,16
 8008af0:	80009680 	call	8000968 <__udivsi3>
 8008af4:	a00b883a 	mov	r5,r20
 8008af8:	1009883a 	mov	r4,r2
 8008afc:	94bfffcc 	andi	r18,r18,65535
 8008b00:	1021883a 	mov	r16,r2
 8008b04:	94e4b03a 	or	r18,r18,r19
 8008b08:	8000a240 	call	8000a24 <__mulsi3>
 8008b0c:	d8c00117 	ldw	r3,4(sp)
 8008b10:	9080052e 	bgeu	r18,r2,8008b28 <__udivdi3+0x2b4>
 8008b14:	8ca5883a 	add	r18,r17,r18
 8008b18:	813fffc4 	addi	r4,r16,-1
 8008b1c:	9440ad36 	bltu	r18,r17,8008dd4 <__udivdi3+0x560>
 8008b20:	9080ac2e 	bgeu	r18,r2,8008dd4 <__udivdi3+0x560>
 8008b24:	843fff84 	addi	r16,r16,-2
 8008b28:	b004943a 	slli	r2,r22,16
 8008b2c:	1404b03a 	or	r2,r2,r16
 8008b30:	00000206 	br	8008b3c <__udivdi3+0x2c8>
 8008b34:	0007883a 	mov	r3,zero
 8008b38:	0005883a 	mov	r2,zero
 8008b3c:	dfc00b17 	ldw	ra,44(sp)
 8008b40:	df000a17 	ldw	fp,40(sp)
 8008b44:	ddc00917 	ldw	r23,36(sp)
 8008b48:	dd800817 	ldw	r22,32(sp)
 8008b4c:	dd400717 	ldw	r21,28(sp)
 8008b50:	dd000617 	ldw	r20,24(sp)
 8008b54:	dcc00517 	ldw	r19,20(sp)
 8008b58:	dc800417 	ldw	r18,16(sp)
 8008b5c:	dc400317 	ldw	r17,12(sp)
 8008b60:	dc000217 	ldw	r16,8(sp)
 8008b64:	dec00c04 	addi	sp,sp,48
 8008b68:	f800283a 	ret
 8008b6c:	00803fc4 	movi	r2,255
 8008b70:	11c5803a 	cmpltu	r2,r2,r7
 8008b74:	100490fa 	slli	r2,r2,3
 8008b78:	003f9906 	br	80089e0 <__alt_data_end+0xfc0089e0>
 8008b7c:	00803fc4 	movi	r2,255
 8008b80:	1445803a 	cmpltu	r2,r2,r17
 8008b84:	100490fa 	slli	r2,r2,3
 8008b88:	003fad06 	br	8008a40 <__alt_data_end+0xfc008a40>
 8008b8c:	00804034 	movhi	r2,256
 8008b90:	10bfffc4 	addi	r2,r2,-1
 8008b94:	11809f36 	bltu	r2,r6,8008e14 <__udivdi3+0x5a0>
 8008b98:	00800404 	movi	r2,16
 8008b9c:	003f4c06 	br	80088d0 <__alt_data_end+0xfc0088d0>
 8008ba0:	3dce983a 	sll	r7,r7,r23
 8008ba4:	30b8d83a 	srl	fp,r6,r2
 8008ba8:	80a2d83a 	srl	r17,r16,r2
 8008bac:	35cc983a 	sll	r6,r6,r23
 8008bb0:	3f38b03a 	or	fp,r7,fp
 8008bb4:	e024d43a 	srli	r18,fp,16
 8008bb8:	9884d83a 	srl	r2,r19,r2
 8008bbc:	85e0983a 	sll	r16,r16,r23
 8008bc0:	8809883a 	mov	r4,r17
 8008bc4:	900b883a 	mov	r5,r18
 8008bc8:	d9800015 	stw	r6,0(sp)
 8008bcc:	1420b03a 	or	r16,r2,r16
 8008bd0:	80009cc0 	call	80009cc <__umodsi3>
 8008bd4:	900b883a 	mov	r5,r18
 8008bd8:	8809883a 	mov	r4,r17
 8008bdc:	1029883a 	mov	r20,r2
 8008be0:	e5bfffcc 	andi	r22,fp,65535
 8008be4:	80009680 	call	8000968 <__udivsi3>
 8008be8:	100b883a 	mov	r5,r2
 8008bec:	b009883a 	mov	r4,r22
 8008bf0:	102b883a 	mov	r21,r2
 8008bf4:	8000a240 	call	8000a24 <__mulsi3>
 8008bf8:	a028943a 	slli	r20,r20,16
 8008bfc:	8006d43a 	srli	r3,r16,16
 8008c00:	1d06b03a 	or	r3,r3,r20
 8008c04:	1880042e 	bgeu	r3,r2,8008c18 <__udivdi3+0x3a4>
 8008c08:	1f07883a 	add	r3,r3,fp
 8008c0c:	a93fffc4 	addi	r4,r21,-1
 8008c10:	1f00892e 	bgeu	r3,fp,8008e38 <__udivdi3+0x5c4>
 8008c14:	202b883a 	mov	r21,r4
 8008c18:	18a3c83a 	sub	r17,r3,r2
 8008c1c:	8809883a 	mov	r4,r17
 8008c20:	900b883a 	mov	r5,r18
 8008c24:	80009cc0 	call	80009cc <__umodsi3>
 8008c28:	1029883a 	mov	r20,r2
 8008c2c:	8809883a 	mov	r4,r17
 8008c30:	900b883a 	mov	r5,r18
 8008c34:	a028943a 	slli	r20,r20,16
 8008c38:	80009680 	call	8000968 <__udivsi3>
 8008c3c:	100b883a 	mov	r5,r2
 8008c40:	b009883a 	mov	r4,r22
 8008c44:	843fffcc 	andi	r16,r16,65535
 8008c48:	1023883a 	mov	r17,r2
 8008c4c:	8520b03a 	or	r16,r16,r20
 8008c50:	8000a240 	call	8000a24 <__mulsi3>
 8008c54:	8080042e 	bgeu	r16,r2,8008c68 <__udivdi3+0x3f4>
 8008c58:	8721883a 	add	r16,r16,fp
 8008c5c:	88ffffc4 	addi	r3,r17,-1
 8008c60:	8700712e 	bgeu	r16,fp,8008e28 <__udivdi3+0x5b4>
 8008c64:	1823883a 	mov	r17,r3
 8008c68:	a80e943a 	slli	r7,r21,16
 8008c6c:	d8c00017 	ldw	r3,0(sp)
 8008c70:	80a1c83a 	sub	r16,r16,r2
 8008c74:	3c64b03a 	or	r18,r7,r17
 8008c78:	1d3fffcc 	andi	r20,r3,65535
 8008c7c:	9022d43a 	srli	r17,r18,16
 8008c80:	95bfffcc 	andi	r22,r18,65535
 8008c84:	a00b883a 	mov	r5,r20
 8008c88:	b009883a 	mov	r4,r22
 8008c8c:	182ad43a 	srli	r21,r3,16
 8008c90:	8000a240 	call	8000a24 <__mulsi3>
 8008c94:	a00b883a 	mov	r5,r20
 8008c98:	8809883a 	mov	r4,r17
 8008c9c:	1039883a 	mov	fp,r2
 8008ca0:	8000a240 	call	8000a24 <__mulsi3>
 8008ca4:	8809883a 	mov	r4,r17
 8008ca8:	a80b883a 	mov	r5,r21
 8008cac:	1029883a 	mov	r20,r2
 8008cb0:	8000a240 	call	8000a24 <__mulsi3>
 8008cb4:	a80b883a 	mov	r5,r21
 8008cb8:	b009883a 	mov	r4,r22
 8008cbc:	1023883a 	mov	r17,r2
 8008cc0:	8000a240 	call	8000a24 <__mulsi3>
 8008cc4:	e006d43a 	srli	r3,fp,16
 8008cc8:	1505883a 	add	r2,r2,r20
 8008ccc:	1887883a 	add	r3,r3,r2
 8008cd0:	1d00022e 	bgeu	r3,r20,8008cdc <__udivdi3+0x468>
 8008cd4:	00800074 	movhi	r2,1
 8008cd8:	88a3883a 	add	r17,r17,r2
 8008cdc:	1804d43a 	srli	r2,r3,16
 8008ce0:	1463883a 	add	r17,r2,r17
 8008ce4:	84404436 	bltu	r16,r17,8008df8 <__udivdi3+0x584>
 8008ce8:	84403e26 	beq	r16,r17,8008de4 <__udivdi3+0x570>
 8008cec:	9005883a 	mov	r2,r18
 8008cf0:	0007883a 	mov	r3,zero
 8008cf4:	003f9106 	br	8008b3c <__alt_data_end+0xfc008b3c>
 8008cf8:	88e2983a 	sll	r17,r17,r3
 8008cfc:	80aed83a 	srl	r23,r16,r2
 8008d00:	80e0983a 	sll	r16,r16,r3
 8008d04:	882ad43a 	srli	r21,r17,16
 8008d08:	9884d83a 	srl	r2,r19,r2
 8008d0c:	b809883a 	mov	r4,r23
 8008d10:	a80b883a 	mov	r5,r21
 8008d14:	98e4983a 	sll	r18,r19,r3
 8008d18:	142cb03a 	or	r22,r2,r16
 8008d1c:	80009cc0 	call	80009cc <__umodsi3>
 8008d20:	b809883a 	mov	r4,r23
 8008d24:	a80b883a 	mov	r5,r21
 8008d28:	1027883a 	mov	r19,r2
 8008d2c:	8d3fffcc 	andi	r20,r17,65535
 8008d30:	80009680 	call	8000968 <__udivsi3>
 8008d34:	a009883a 	mov	r4,r20
 8008d38:	100b883a 	mov	r5,r2
 8008d3c:	102f883a 	mov	r23,r2
 8008d40:	8000a240 	call	8000a24 <__mulsi3>
 8008d44:	9826943a 	slli	r19,r19,16
 8008d48:	b008d43a 	srli	r4,r22,16
 8008d4c:	24c8b03a 	or	r4,r4,r19
 8008d50:	2080062e 	bgeu	r4,r2,8008d6c <__udivdi3+0x4f8>
 8008d54:	2449883a 	add	r4,r4,r17
 8008d58:	b8ffffc4 	addi	r3,r23,-1
 8008d5c:	24403c36 	bltu	r4,r17,8008e50 <__udivdi3+0x5dc>
 8008d60:	20803b2e 	bgeu	r4,r2,8008e50 <__udivdi3+0x5dc>
 8008d64:	bdffff84 	addi	r23,r23,-2
 8008d68:	2449883a 	add	r4,r4,r17
 8008d6c:	20a1c83a 	sub	r16,r4,r2
 8008d70:	a80b883a 	mov	r5,r21
 8008d74:	8009883a 	mov	r4,r16
 8008d78:	80009cc0 	call	80009cc <__umodsi3>
 8008d7c:	a80b883a 	mov	r5,r21
 8008d80:	8009883a 	mov	r4,r16
 8008d84:	1027883a 	mov	r19,r2
 8008d88:	80009680 	call	8000968 <__udivsi3>
 8008d8c:	a009883a 	mov	r4,r20
 8008d90:	100b883a 	mov	r5,r2
 8008d94:	9826943a 	slli	r19,r19,16
 8008d98:	1039883a 	mov	fp,r2
 8008d9c:	8000a240 	call	8000a24 <__mulsi3>
 8008da0:	b13fffcc 	andi	r4,r22,65535
 8008da4:	24c8b03a 	or	r4,r4,r19
 8008da8:	2080062e 	bgeu	r4,r2,8008dc4 <__udivdi3+0x550>
 8008dac:	2449883a 	add	r4,r4,r17
 8008db0:	e0ffffc4 	addi	r3,fp,-1
 8008db4:	24402436 	bltu	r4,r17,8008e48 <__udivdi3+0x5d4>
 8008db8:	2080232e 	bgeu	r4,r2,8008e48 <__udivdi3+0x5d4>
 8008dbc:	e73fff84 	addi	fp,fp,-2
 8008dc0:	2449883a 	add	r4,r4,r17
 8008dc4:	b82e943a 	slli	r23,r23,16
 8008dc8:	20a1c83a 	sub	r16,r4,r2
 8008dcc:	bf06b03a 	or	r3,r23,fp
 8008dd0:	003f2806 	br	8008a74 <__alt_data_end+0xfc008a74>
 8008dd4:	2021883a 	mov	r16,r4
 8008dd8:	003f5306 	br	8008b28 <__alt_data_end+0xfc008b28>
 8008ddc:	1821883a 	mov	r16,r3
 8008de0:	003ef406 	br	80089b4 <__alt_data_end+0xfc0089b4>
 8008de4:	1806943a 	slli	r3,r3,16
 8008de8:	9de6983a 	sll	r19,r19,r23
 8008dec:	e73fffcc 	andi	fp,fp,65535
 8008df0:	1f07883a 	add	r3,r3,fp
 8008df4:	98ffbd2e 	bgeu	r19,r3,8008cec <__alt_data_end+0xfc008cec>
 8008df8:	90bfffc4 	addi	r2,r18,-1
 8008dfc:	0007883a 	mov	r3,zero
 8008e00:	003f4e06 	br	8008b3c <__alt_data_end+0xfc008b3c>
 8008e04:	00800604 	movi	r2,24
 8008e08:	003ef506 	br	80089e0 <__alt_data_end+0xfc0089e0>
 8008e0c:	00800604 	movi	r2,24
 8008e10:	003f0b06 	br	8008a40 <__alt_data_end+0xfc008a40>
 8008e14:	00800604 	movi	r2,24
 8008e18:	003ead06 	br	80088d0 <__alt_data_end+0xfc0088d0>
 8008e1c:	0007883a 	mov	r3,zero
 8008e20:	00800044 	movi	r2,1
 8008e24:	003f4506 	br	8008b3c <__alt_data_end+0xfc008b3c>
 8008e28:	80bf8e2e 	bgeu	r16,r2,8008c64 <__alt_data_end+0xfc008c64>
 8008e2c:	8c7fff84 	addi	r17,r17,-2
 8008e30:	8721883a 	add	r16,r16,fp
 8008e34:	003f8c06 	br	8008c68 <__alt_data_end+0xfc008c68>
 8008e38:	18bf762e 	bgeu	r3,r2,8008c14 <__alt_data_end+0xfc008c14>
 8008e3c:	ad7fff84 	addi	r21,r21,-2
 8008e40:	1f07883a 	add	r3,r3,fp
 8008e44:	003f7406 	br	8008c18 <__alt_data_end+0xfc008c18>
 8008e48:	1839883a 	mov	fp,r3
 8008e4c:	003fdd06 	br	8008dc4 <__alt_data_end+0xfc008dc4>
 8008e50:	182f883a 	mov	r23,r3
 8008e54:	003fc506 	br	8008d6c <__alt_data_end+0xfc008d6c>
 8008e58:	b5bfff84 	addi	r22,r22,-2
 8008e5c:	3c4f883a 	add	r7,r7,r17
 8008e60:	003f1a06 	br	8008acc <__alt_data_end+0xfc008acc>
 8008e64:	b5bfff84 	addi	r22,r22,-2
 8008e68:	1c47883a 	add	r3,r3,r17
 8008e6c:	003ebc06 	br	8008960 <__alt_data_end+0xfc008960>

08008e70 <__umoddi3>:
 8008e70:	defff304 	addi	sp,sp,-52
 8008e74:	df000b15 	stw	fp,44(sp)
 8008e78:	dc400415 	stw	r17,16(sp)
 8008e7c:	dc000315 	stw	r16,12(sp)
 8008e80:	dfc00c15 	stw	ra,48(sp)
 8008e84:	ddc00a15 	stw	r23,40(sp)
 8008e88:	dd800915 	stw	r22,36(sp)
 8008e8c:	dd400815 	stw	r21,32(sp)
 8008e90:	dd000715 	stw	r20,28(sp)
 8008e94:	dcc00615 	stw	r19,24(sp)
 8008e98:	dc800515 	stw	r18,20(sp)
 8008e9c:	2021883a 	mov	r16,r4
 8008ea0:	2823883a 	mov	r17,r5
 8008ea4:	2839883a 	mov	fp,r5
 8008ea8:	3800401e 	bne	r7,zero,8008fac <__umoddi3+0x13c>
 8008eac:	3027883a 	mov	r19,r6
 8008eb0:	2029883a 	mov	r20,r4
 8008eb4:	2980552e 	bgeu	r5,r6,800900c <__umoddi3+0x19c>
 8008eb8:	00bfffd4 	movui	r2,65535
 8008ebc:	1180a236 	bltu	r2,r6,8009148 <__umoddi3+0x2d8>
 8008ec0:	01003fc4 	movi	r4,255
 8008ec4:	2189803a 	cmpltu	r4,r4,r6
 8008ec8:	200890fa 	slli	r4,r4,3
 8008ecc:	3104d83a 	srl	r2,r6,r4
 8008ed0:	00c20074 	movhi	r3,2049
 8008ed4:	18f8ac04 	addi	r3,r3,-7504
 8008ed8:	1885883a 	add	r2,r3,r2
 8008edc:	10c00003 	ldbu	r3,0(r2)
 8008ee0:	00800804 	movi	r2,32
 8008ee4:	1909883a 	add	r4,r3,r4
 8008ee8:	1125c83a 	sub	r18,r2,r4
 8008eec:	90000526 	beq	r18,zero,8008f04 <__umoddi3+0x94>
 8008ef0:	8ca2983a 	sll	r17,r17,r18
 8008ef4:	8108d83a 	srl	r4,r16,r4
 8008ef8:	34a6983a 	sll	r19,r6,r18
 8008efc:	84a8983a 	sll	r20,r16,r18
 8008f00:	2478b03a 	or	fp,r4,r17
 8008f04:	982cd43a 	srli	r22,r19,16
 8008f08:	e009883a 	mov	r4,fp
 8008f0c:	9dffffcc 	andi	r23,r19,65535
 8008f10:	b00b883a 	mov	r5,r22
 8008f14:	80009cc0 	call	80009cc <__umodsi3>
 8008f18:	b00b883a 	mov	r5,r22
 8008f1c:	e009883a 	mov	r4,fp
 8008f20:	102b883a 	mov	r21,r2
 8008f24:	80009680 	call	8000968 <__udivsi3>
 8008f28:	100b883a 	mov	r5,r2
 8008f2c:	b809883a 	mov	r4,r23
 8008f30:	8000a240 	call	8000a24 <__mulsi3>
 8008f34:	a82a943a 	slli	r21,r21,16
 8008f38:	a006d43a 	srli	r3,r20,16
 8008f3c:	1d46b03a 	or	r3,r3,r21
 8008f40:	1880032e 	bgeu	r3,r2,8008f50 <__umoddi3+0xe0>
 8008f44:	1cc7883a 	add	r3,r3,r19
 8008f48:	1cc00136 	bltu	r3,r19,8008f50 <__umoddi3+0xe0>
 8008f4c:	18813136 	bltu	r3,r2,8009414 <__umoddi3+0x5a4>
 8008f50:	18a1c83a 	sub	r16,r3,r2
 8008f54:	b00b883a 	mov	r5,r22
 8008f58:	8009883a 	mov	r4,r16
 8008f5c:	80009cc0 	call	80009cc <__umodsi3>
 8008f60:	b00b883a 	mov	r5,r22
 8008f64:	8009883a 	mov	r4,r16
 8008f68:	1023883a 	mov	r17,r2
 8008f6c:	80009680 	call	8000968 <__udivsi3>
 8008f70:	100b883a 	mov	r5,r2
 8008f74:	b809883a 	mov	r4,r23
 8008f78:	8822943a 	slli	r17,r17,16
 8008f7c:	8000a240 	call	8000a24 <__mulsi3>
 8008f80:	a0ffffcc 	andi	r3,r20,65535
 8008f84:	1c46b03a 	or	r3,r3,r17
 8008f88:	1880042e 	bgeu	r3,r2,8008f9c <__umoddi3+0x12c>
 8008f8c:	1cc7883a 	add	r3,r3,r19
 8008f90:	1cc00236 	bltu	r3,r19,8008f9c <__umoddi3+0x12c>
 8008f94:	1880012e 	bgeu	r3,r2,8008f9c <__umoddi3+0x12c>
 8008f98:	1cc7883a 	add	r3,r3,r19
 8008f9c:	1885c83a 	sub	r2,r3,r2
 8008fa0:	1484d83a 	srl	r2,r2,r18
 8008fa4:	0007883a 	mov	r3,zero
 8008fa8:	00005306 	br	80090f8 <__umoddi3+0x288>
 8008fac:	29c05036 	bltu	r5,r7,80090f0 <__umoddi3+0x280>
 8008fb0:	00bfffd4 	movui	r2,65535
 8008fb4:	11c05c2e 	bgeu	r2,r7,8009128 <__umoddi3+0x2b8>
 8008fb8:	00804034 	movhi	r2,256
 8008fbc:	10bfffc4 	addi	r2,r2,-1
 8008fc0:	11c10636 	bltu	r2,r7,80093dc <__umoddi3+0x56c>
 8008fc4:	01000404 	movi	r4,16
 8008fc8:	3904d83a 	srl	r2,r7,r4
 8008fcc:	00c20074 	movhi	r3,2049
 8008fd0:	18f8ac04 	addi	r3,r3,-7504
 8008fd4:	1885883a 	add	r2,r3,r2
 8008fd8:	14c00003 	ldbu	r19,0(r2)
 8008fdc:	00c00804 	movi	r3,32
 8008fe0:	9927883a 	add	r19,r19,r4
 8008fe4:	1ce9c83a 	sub	r20,r3,r19
 8008fe8:	a0005c1e 	bne	r20,zero,800915c <__umoddi3+0x2ec>
 8008fec:	3c400136 	bltu	r7,r17,8008ff4 <__umoddi3+0x184>
 8008ff0:	81810a36 	bltu	r16,r6,800941c <__umoddi3+0x5ac>
 8008ff4:	8185c83a 	sub	r2,r16,r6
 8008ff8:	89e3c83a 	sub	r17,r17,r7
 8008ffc:	8089803a 	cmpltu	r4,r16,r2
 8009000:	8939c83a 	sub	fp,r17,r4
 8009004:	e007883a 	mov	r3,fp
 8009008:	00003b06 	br	80090f8 <__umoddi3+0x288>
 800900c:	3000041e 	bne	r6,zero,8009020 <__umoddi3+0x1b0>
 8009010:	000b883a 	mov	r5,zero
 8009014:	01000044 	movi	r4,1
 8009018:	80009680 	call	8000968 <__udivsi3>
 800901c:	1027883a 	mov	r19,r2
 8009020:	00bfffd4 	movui	r2,65535
 8009024:	14c0442e 	bgeu	r2,r19,8009138 <__umoddi3+0x2c8>
 8009028:	00804034 	movhi	r2,256
 800902c:	10bfffc4 	addi	r2,r2,-1
 8009030:	14c0ec36 	bltu	r2,r19,80093e4 <__umoddi3+0x574>
 8009034:	00800404 	movi	r2,16
 8009038:	9886d83a 	srl	r3,r19,r2
 800903c:	01020074 	movhi	r4,2049
 8009040:	2138ac04 	addi	r4,r4,-7504
 8009044:	20c7883a 	add	r3,r4,r3
 8009048:	18c00003 	ldbu	r3,0(r3)
 800904c:	1887883a 	add	r3,r3,r2
 8009050:	00800804 	movi	r2,32
 8009054:	10e5c83a 	sub	r18,r2,r3
 8009058:	9000ab1e 	bne	r18,zero,8009308 <__umoddi3+0x498>
 800905c:	982cd43a 	srli	r22,r19,16
 8009060:	8ce3c83a 	sub	r17,r17,r19
 8009064:	9dffffcc 	andi	r23,r19,65535
 8009068:	b00b883a 	mov	r5,r22
 800906c:	8809883a 	mov	r4,r17
 8009070:	80009cc0 	call	80009cc <__umodsi3>
 8009074:	b00b883a 	mov	r5,r22
 8009078:	8809883a 	mov	r4,r17
 800907c:	102b883a 	mov	r21,r2
 8009080:	80009680 	call	8000968 <__udivsi3>
 8009084:	b80b883a 	mov	r5,r23
 8009088:	1009883a 	mov	r4,r2
 800908c:	8000a240 	call	8000a24 <__mulsi3>
 8009090:	a82a943a 	slli	r21,r21,16
 8009094:	a006d43a 	srli	r3,r20,16
 8009098:	1d46b03a 	or	r3,r3,r21
 800909c:	1880042e 	bgeu	r3,r2,80090b0 <__umoddi3+0x240>
 80090a0:	1cc7883a 	add	r3,r3,r19
 80090a4:	1cc00236 	bltu	r3,r19,80090b0 <__umoddi3+0x240>
 80090a8:	1880012e 	bgeu	r3,r2,80090b0 <__umoddi3+0x240>
 80090ac:	1cc7883a 	add	r3,r3,r19
 80090b0:	18a1c83a 	sub	r16,r3,r2
 80090b4:	b00b883a 	mov	r5,r22
 80090b8:	8009883a 	mov	r4,r16
 80090bc:	80009cc0 	call	80009cc <__umodsi3>
 80090c0:	1023883a 	mov	r17,r2
 80090c4:	b00b883a 	mov	r5,r22
 80090c8:	8009883a 	mov	r4,r16
 80090cc:	80009680 	call	8000968 <__udivsi3>
 80090d0:	8822943a 	slli	r17,r17,16
 80090d4:	b80b883a 	mov	r5,r23
 80090d8:	1009883a 	mov	r4,r2
 80090dc:	8000a240 	call	8000a24 <__mulsi3>
 80090e0:	a53fffcc 	andi	r20,r20,65535
 80090e4:	a446b03a 	or	r3,r20,r17
 80090e8:	18bfac2e 	bgeu	r3,r2,8008f9c <__alt_data_end+0xfc008f9c>
 80090ec:	003fa706 	br	8008f8c <__alt_data_end+0xfc008f8c>
 80090f0:	2005883a 	mov	r2,r4
 80090f4:	2807883a 	mov	r3,r5
 80090f8:	dfc00c17 	ldw	ra,48(sp)
 80090fc:	df000b17 	ldw	fp,44(sp)
 8009100:	ddc00a17 	ldw	r23,40(sp)
 8009104:	dd800917 	ldw	r22,36(sp)
 8009108:	dd400817 	ldw	r21,32(sp)
 800910c:	dd000717 	ldw	r20,28(sp)
 8009110:	dcc00617 	ldw	r19,24(sp)
 8009114:	dc800517 	ldw	r18,20(sp)
 8009118:	dc400417 	ldw	r17,16(sp)
 800911c:	dc000317 	ldw	r16,12(sp)
 8009120:	dec00d04 	addi	sp,sp,52
 8009124:	f800283a 	ret
 8009128:	04c03fc4 	movi	r19,255
 800912c:	99c9803a 	cmpltu	r4,r19,r7
 8009130:	200890fa 	slli	r4,r4,3
 8009134:	003fa406 	br	8008fc8 <__alt_data_end+0xfc008fc8>
 8009138:	00803fc4 	movi	r2,255
 800913c:	14c5803a 	cmpltu	r2,r2,r19
 8009140:	100490fa 	slli	r2,r2,3
 8009144:	003fbc06 	br	8009038 <__alt_data_end+0xfc009038>
 8009148:	00804034 	movhi	r2,256
 800914c:	10bfffc4 	addi	r2,r2,-1
 8009150:	1180a636 	bltu	r2,r6,80093ec <__umoddi3+0x57c>
 8009154:	01000404 	movi	r4,16
 8009158:	003f5c06 	br	8008ecc <__alt_data_end+0xfc008ecc>
 800915c:	3d0e983a 	sll	r7,r7,r20
 8009160:	34ead83a 	srl	r21,r6,r19
 8009164:	8cc6d83a 	srl	r3,r17,r19
 8009168:	8d10983a 	sll	r8,r17,r20
 800916c:	3d6ab03a 	or	r21,r7,r21
 8009170:	a82cd43a 	srli	r22,r21,16
 8009174:	84e2d83a 	srl	r17,r16,r19
 8009178:	1809883a 	mov	r4,r3
 800917c:	b00b883a 	mov	r5,r22
 8009180:	8a22b03a 	or	r17,r17,r8
 8009184:	3524983a 	sll	r18,r6,r20
 8009188:	dc400015 	stw	r17,0(sp)
 800918c:	d8c00115 	stw	r3,4(sp)
 8009190:	80009cc0 	call	80009cc <__umodsi3>
 8009194:	d8c00117 	ldw	r3,4(sp)
 8009198:	b00b883a 	mov	r5,r22
 800919c:	1039883a 	mov	fp,r2
 80091a0:	1809883a 	mov	r4,r3
 80091a4:	80009680 	call	8000968 <__udivsi3>
 80091a8:	adffffcc 	andi	r23,r21,65535
 80091ac:	100b883a 	mov	r5,r2
 80091b0:	b809883a 	mov	r4,r23
 80091b4:	1023883a 	mov	r17,r2
 80091b8:	8000a240 	call	8000a24 <__mulsi3>
 80091bc:	d9400017 	ldw	r5,0(sp)
 80091c0:	e008943a 	slli	r4,fp,16
 80091c4:	8520983a 	sll	r16,r16,r20
 80091c8:	2806d43a 	srli	r3,r5,16
 80091cc:	1906b03a 	or	r3,r3,r4
 80091d0:	1880042e 	bgeu	r3,r2,80091e4 <__umoddi3+0x374>
 80091d4:	1d47883a 	add	r3,r3,r21
 80091d8:	893fffc4 	addi	r4,r17,-1
 80091dc:	1d40892e 	bgeu	r3,r21,8009404 <__umoddi3+0x594>
 80091e0:	2023883a 	mov	r17,r4
 80091e4:	18b9c83a 	sub	fp,r3,r2
 80091e8:	b00b883a 	mov	r5,r22
 80091ec:	e009883a 	mov	r4,fp
 80091f0:	80009cc0 	call	80009cc <__umodsi3>
 80091f4:	b00b883a 	mov	r5,r22
 80091f8:	e009883a 	mov	r4,fp
 80091fc:	d8800215 	stw	r2,8(sp)
 8009200:	80009680 	call	8000968 <__udivsi3>
 8009204:	100b883a 	mov	r5,r2
 8009208:	b809883a 	mov	r4,r23
 800920c:	102d883a 	mov	r22,r2
 8009210:	8000a240 	call	8000a24 <__mulsi3>
 8009214:	d9800217 	ldw	r6,8(sp)
 8009218:	d8c00017 	ldw	r3,0(sp)
 800921c:	300c943a 	slli	r6,r6,16
 8009220:	1a3fffcc 	andi	r8,r3,65535
 8009224:	4190b03a 	or	r8,r8,r6
 8009228:	4080042e 	bgeu	r8,r2,800923c <__umoddi3+0x3cc>
 800922c:	4551883a 	add	r8,r8,r21
 8009230:	b0ffffc4 	addi	r3,r22,-1
 8009234:	45406f2e 	bgeu	r8,r21,80093f4 <__umoddi3+0x584>
 8009238:	182d883a 	mov	r22,r3
 800923c:	880e943a 	slli	r7,r17,16
 8009240:	9006d43a 	srli	r3,r18,16
 8009244:	91bfffcc 	andi	r6,r18,65535
 8009248:	3dacb03a 	or	r22,r7,r22
 800924c:	b02ed43a 	srli	r23,r22,16
 8009250:	b5bfffcc 	andi	r22,r22,65535
 8009254:	300b883a 	mov	r5,r6
 8009258:	b009883a 	mov	r4,r22
 800925c:	40a3c83a 	sub	r17,r8,r2
 8009260:	d8c00115 	stw	r3,4(sp)
 8009264:	d9800215 	stw	r6,8(sp)
 8009268:	8000a240 	call	8000a24 <__mulsi3>
 800926c:	d9800217 	ldw	r6,8(sp)
 8009270:	b809883a 	mov	r4,r23
 8009274:	1039883a 	mov	fp,r2
 8009278:	300b883a 	mov	r5,r6
 800927c:	8000a240 	call	8000a24 <__mulsi3>
 8009280:	d8c00117 	ldw	r3,4(sp)
 8009284:	b809883a 	mov	r4,r23
 8009288:	d8800215 	stw	r2,8(sp)
 800928c:	180b883a 	mov	r5,r3
 8009290:	8000a240 	call	8000a24 <__mulsi3>
 8009294:	d8c00117 	ldw	r3,4(sp)
 8009298:	b009883a 	mov	r4,r22
 800929c:	102f883a 	mov	r23,r2
 80092a0:	180b883a 	mov	r5,r3
 80092a4:	8000a240 	call	8000a24 <__mulsi3>
 80092a8:	d9800217 	ldw	r6,8(sp)
 80092ac:	e006d43a 	srli	r3,fp,16
 80092b0:	1185883a 	add	r2,r2,r6
 80092b4:	1885883a 	add	r2,r3,r2
 80092b8:	1180022e 	bgeu	r2,r6,80092c4 <__umoddi3+0x454>
 80092bc:	00c00074 	movhi	r3,1
 80092c0:	b8ef883a 	add	r23,r23,r3
 80092c4:	1006d43a 	srli	r3,r2,16
 80092c8:	1004943a 	slli	r2,r2,16
 80092cc:	e73fffcc 	andi	fp,fp,65535
 80092d0:	1dc7883a 	add	r3,r3,r23
 80092d4:	1739883a 	add	fp,r2,fp
 80092d8:	88c03a36 	bltu	r17,r3,80093c4 <__umoddi3+0x554>
 80092dc:	88c05126 	beq	r17,r3,8009424 <__umoddi3+0x5b4>
 80092e0:	88c9c83a 	sub	r4,r17,r3
 80092e4:	e00f883a 	mov	r7,fp
 80092e8:	81cfc83a 	sub	r7,r16,r7
 80092ec:	81c7803a 	cmpltu	r3,r16,r7
 80092f0:	20c7c83a 	sub	r3,r4,r3
 80092f4:	1cc4983a 	sll	r2,r3,r19
 80092f8:	3d0ed83a 	srl	r7,r7,r20
 80092fc:	1d06d83a 	srl	r3,r3,r20
 8009300:	11c4b03a 	or	r2,r2,r7
 8009304:	003f7c06 	br	80090f8 <__alt_data_end+0xfc0090f8>
 8009308:	9ca6983a 	sll	r19,r19,r18
 800930c:	88f8d83a 	srl	fp,r17,r3
 8009310:	80c4d83a 	srl	r2,r16,r3
 8009314:	982cd43a 	srli	r22,r19,16
 8009318:	8ca2983a 	sll	r17,r17,r18
 800931c:	e009883a 	mov	r4,fp
 8009320:	b00b883a 	mov	r5,r22
 8009324:	146ab03a 	or	r21,r2,r17
 8009328:	80009cc0 	call	80009cc <__umodsi3>
 800932c:	b00b883a 	mov	r5,r22
 8009330:	e009883a 	mov	r4,fp
 8009334:	1029883a 	mov	r20,r2
 8009338:	9dffffcc 	andi	r23,r19,65535
 800933c:	80009680 	call	8000968 <__udivsi3>
 8009340:	b809883a 	mov	r4,r23
 8009344:	100b883a 	mov	r5,r2
 8009348:	8000a240 	call	8000a24 <__mulsi3>
 800934c:	a008943a 	slli	r4,r20,16
 8009350:	a806d43a 	srli	r3,r21,16
 8009354:	84a8983a 	sll	r20,r16,r18
 8009358:	1906b03a 	or	r3,r3,r4
 800935c:	1880042e 	bgeu	r3,r2,8009370 <__umoddi3+0x500>
 8009360:	1cc7883a 	add	r3,r3,r19
 8009364:	1cc00236 	bltu	r3,r19,8009370 <__umoddi3+0x500>
 8009368:	1880012e 	bgeu	r3,r2,8009370 <__umoddi3+0x500>
 800936c:	1cc7883a 	add	r3,r3,r19
 8009370:	18a3c83a 	sub	r17,r3,r2
 8009374:	b00b883a 	mov	r5,r22
 8009378:	8809883a 	mov	r4,r17
 800937c:	80009cc0 	call	80009cc <__umodsi3>
 8009380:	b00b883a 	mov	r5,r22
 8009384:	8809883a 	mov	r4,r17
 8009388:	1021883a 	mov	r16,r2
 800938c:	80009680 	call	8000968 <__udivsi3>
 8009390:	100b883a 	mov	r5,r2
 8009394:	b809883a 	mov	r4,r23
 8009398:	8020943a 	slli	r16,r16,16
 800939c:	8000a240 	call	8000a24 <__mulsi3>
 80093a0:	a8ffffcc 	andi	r3,r21,65535
 80093a4:	1c06b03a 	or	r3,r3,r16
 80093a8:	1880042e 	bgeu	r3,r2,80093bc <__umoddi3+0x54c>
 80093ac:	1cc7883a 	add	r3,r3,r19
 80093b0:	1cc00236 	bltu	r3,r19,80093bc <__umoddi3+0x54c>
 80093b4:	1880012e 	bgeu	r3,r2,80093bc <__umoddi3+0x54c>
 80093b8:	1cc7883a 	add	r3,r3,r19
 80093bc:	18a3c83a 	sub	r17,r3,r2
 80093c0:	003f2906 	br	8009068 <__alt_data_end+0xfc009068>
 80093c4:	e48fc83a 	sub	r7,fp,r18
 80093c8:	1d49c83a 	sub	r4,r3,r21
 80093cc:	e1f9803a 	cmpltu	fp,fp,r7
 80093d0:	2739c83a 	sub	fp,r4,fp
 80093d4:	8f09c83a 	sub	r4,r17,fp
 80093d8:	003fc306 	br	80092e8 <__alt_data_end+0xfc0092e8>
 80093dc:	01000604 	movi	r4,24
 80093e0:	003ef906 	br	8008fc8 <__alt_data_end+0xfc008fc8>
 80093e4:	00800604 	movi	r2,24
 80093e8:	003f1306 	br	8009038 <__alt_data_end+0xfc009038>
 80093ec:	01000604 	movi	r4,24
 80093f0:	003eb606 	br	8008ecc <__alt_data_end+0xfc008ecc>
 80093f4:	40bf902e 	bgeu	r8,r2,8009238 <__alt_data_end+0xfc009238>
 80093f8:	b5bfff84 	addi	r22,r22,-2
 80093fc:	4551883a 	add	r8,r8,r21
 8009400:	003f8e06 	br	800923c <__alt_data_end+0xfc00923c>
 8009404:	18bf762e 	bgeu	r3,r2,80091e0 <__alt_data_end+0xfc0091e0>
 8009408:	8c7fff84 	addi	r17,r17,-2
 800940c:	1d47883a 	add	r3,r3,r21
 8009410:	003f7406 	br	80091e4 <__alt_data_end+0xfc0091e4>
 8009414:	1cc7883a 	add	r3,r3,r19
 8009418:	003ecd06 	br	8008f50 <__alt_data_end+0xfc008f50>
 800941c:	8005883a 	mov	r2,r16
 8009420:	003ef806 	br	8009004 <__alt_data_end+0xfc009004>
 8009424:	873fe736 	bltu	r16,fp,80093c4 <__alt_data_end+0xfc0093c4>
 8009428:	e00f883a 	mov	r7,fp
 800942c:	0009883a 	mov	r4,zero
 8009430:	003fad06 	br	80092e8 <__alt_data_end+0xfc0092e8>

08009434 <__adddf3>:
 8009434:	02c00434 	movhi	r11,16
 8009438:	5affffc4 	addi	r11,r11,-1
 800943c:	2806d7fa 	srli	r3,r5,31
 8009440:	2ad4703a 	and	r10,r5,r11
 8009444:	3ad2703a 	and	r9,r7,r11
 8009448:	3804d53a 	srli	r2,r7,20
 800944c:	3018d77a 	srli	r12,r6,29
 8009450:	280ad53a 	srli	r5,r5,20
 8009454:	501490fa 	slli	r10,r10,3
 8009458:	2010d77a 	srli	r8,r4,29
 800945c:	481290fa 	slli	r9,r9,3
 8009460:	380ed7fa 	srli	r7,r7,31
 8009464:	defffb04 	addi	sp,sp,-20
 8009468:	dc800215 	stw	r18,8(sp)
 800946c:	dc400115 	stw	r17,4(sp)
 8009470:	dc000015 	stw	r16,0(sp)
 8009474:	dfc00415 	stw	ra,16(sp)
 8009478:	dcc00315 	stw	r19,12(sp)
 800947c:	1c803fcc 	andi	r18,r3,255
 8009480:	2c01ffcc 	andi	r16,r5,2047
 8009484:	5210b03a 	or	r8,r10,r8
 8009488:	202290fa 	slli	r17,r4,3
 800948c:	1081ffcc 	andi	r2,r2,2047
 8009490:	4b12b03a 	or	r9,r9,r12
 8009494:	300c90fa 	slli	r6,r6,3
 8009498:	91c07526 	beq	r18,r7,8009670 <__adddf3+0x23c>
 800949c:	8087c83a 	sub	r3,r16,r2
 80094a0:	00c0ab0e 	bge	zero,r3,8009750 <__adddf3+0x31c>
 80094a4:	10002a1e 	bne	r2,zero,8009550 <__adddf3+0x11c>
 80094a8:	4984b03a 	or	r2,r9,r6
 80094ac:	1000961e 	bne	r2,zero,8009708 <__adddf3+0x2d4>
 80094b0:	888001cc 	andi	r2,r17,7
 80094b4:	10000726 	beq	r2,zero,80094d4 <__adddf3+0xa0>
 80094b8:	888003cc 	andi	r2,r17,15
 80094bc:	00c00104 	movi	r3,4
 80094c0:	10c00426 	beq	r2,r3,80094d4 <__adddf3+0xa0>
 80094c4:	88c7883a 	add	r3,r17,r3
 80094c8:	1c63803a 	cmpltu	r17,r3,r17
 80094cc:	4451883a 	add	r8,r8,r17
 80094d0:	1823883a 	mov	r17,r3
 80094d4:	4080202c 	andhi	r2,r8,128
 80094d8:	10005926 	beq	r2,zero,8009640 <__adddf3+0x20c>
 80094dc:	84000044 	addi	r16,r16,1
 80094e0:	0081ffc4 	movi	r2,2047
 80094e4:	8080ba26 	beq	r16,r2,80097d0 <__adddf3+0x39c>
 80094e8:	00bfe034 	movhi	r2,65408
 80094ec:	10bfffc4 	addi	r2,r2,-1
 80094f0:	4090703a 	and	r8,r8,r2
 80094f4:	4004977a 	slli	r2,r8,29
 80094f8:	4010927a 	slli	r8,r8,9
 80094fc:	8822d0fa 	srli	r17,r17,3
 8009500:	8401ffcc 	andi	r16,r16,2047
 8009504:	4010d33a 	srli	r8,r8,12
 8009508:	9007883a 	mov	r3,r18
 800950c:	1444b03a 	or	r2,r2,r17
 8009510:	8401ffcc 	andi	r16,r16,2047
 8009514:	8020953a 	slli	r16,r16,20
 8009518:	18c03fcc 	andi	r3,r3,255
 800951c:	01000434 	movhi	r4,16
 8009520:	213fffc4 	addi	r4,r4,-1
 8009524:	180697fa 	slli	r3,r3,31
 8009528:	4110703a 	and	r8,r8,r4
 800952c:	4410b03a 	or	r8,r8,r16
 8009530:	40c6b03a 	or	r3,r8,r3
 8009534:	dfc00417 	ldw	ra,16(sp)
 8009538:	dcc00317 	ldw	r19,12(sp)
 800953c:	dc800217 	ldw	r18,8(sp)
 8009540:	dc400117 	ldw	r17,4(sp)
 8009544:	dc000017 	ldw	r16,0(sp)
 8009548:	dec00504 	addi	sp,sp,20
 800954c:	f800283a 	ret
 8009550:	0081ffc4 	movi	r2,2047
 8009554:	80bfd626 	beq	r16,r2,80094b0 <__alt_data_end+0xfc0094b0>
 8009558:	4a402034 	orhi	r9,r9,128
 800955c:	00800e04 	movi	r2,56
 8009560:	10c09f16 	blt	r2,r3,80097e0 <__adddf3+0x3ac>
 8009564:	008007c4 	movi	r2,31
 8009568:	10c0c216 	blt	r2,r3,8009874 <__adddf3+0x440>
 800956c:	00800804 	movi	r2,32
 8009570:	10c5c83a 	sub	r2,r2,r3
 8009574:	488a983a 	sll	r5,r9,r2
 8009578:	30c8d83a 	srl	r4,r6,r3
 800957c:	3084983a 	sll	r2,r6,r2
 8009580:	48c6d83a 	srl	r3,r9,r3
 8009584:	290cb03a 	or	r6,r5,r4
 8009588:	1004c03a 	cmpne	r2,r2,zero
 800958c:	308cb03a 	or	r6,r6,r2
 8009590:	898dc83a 	sub	r6,r17,r6
 8009594:	89a3803a 	cmpltu	r17,r17,r6
 8009598:	40d1c83a 	sub	r8,r8,r3
 800959c:	4451c83a 	sub	r8,r8,r17
 80095a0:	3023883a 	mov	r17,r6
 80095a4:	4080202c 	andhi	r2,r8,128
 80095a8:	10002326 	beq	r2,zero,8009638 <__adddf3+0x204>
 80095ac:	04c02034 	movhi	r19,128
 80095b0:	9cffffc4 	addi	r19,r19,-1
 80095b4:	44e6703a 	and	r19,r8,r19
 80095b8:	98007626 	beq	r19,zero,8009794 <__adddf3+0x360>
 80095bc:	9809883a 	mov	r4,r19
 80095c0:	800bc740 	call	800bc74 <__clzsi2>
 80095c4:	10fffe04 	addi	r3,r2,-8
 80095c8:	010007c4 	movi	r4,31
 80095cc:	20c07716 	blt	r4,r3,80097ac <__adddf3+0x378>
 80095d0:	00800804 	movi	r2,32
 80095d4:	10c5c83a 	sub	r2,r2,r3
 80095d8:	8884d83a 	srl	r2,r17,r2
 80095dc:	98d0983a 	sll	r8,r19,r3
 80095e0:	88e2983a 	sll	r17,r17,r3
 80095e4:	1204b03a 	or	r2,r2,r8
 80095e8:	1c007416 	blt	r3,r16,80097bc <__adddf3+0x388>
 80095ec:	1c21c83a 	sub	r16,r3,r16
 80095f0:	82000044 	addi	r8,r16,1
 80095f4:	00c007c4 	movi	r3,31
 80095f8:	1a009116 	blt	r3,r8,8009840 <__adddf3+0x40c>
 80095fc:	00c00804 	movi	r3,32
 8009600:	1a07c83a 	sub	r3,r3,r8
 8009604:	8a08d83a 	srl	r4,r17,r8
 8009608:	88e2983a 	sll	r17,r17,r3
 800960c:	10c6983a 	sll	r3,r2,r3
 8009610:	1210d83a 	srl	r8,r2,r8
 8009614:	8804c03a 	cmpne	r2,r17,zero
 8009618:	1906b03a 	or	r3,r3,r4
 800961c:	18a2b03a 	or	r17,r3,r2
 8009620:	0021883a 	mov	r16,zero
 8009624:	003fa206 	br	80094b0 <__alt_data_end+0xfc0094b0>
 8009628:	1890b03a 	or	r8,r3,r2
 800962c:	40017d26 	beq	r8,zero,8009c24 <__adddf3+0x7f0>
 8009630:	1011883a 	mov	r8,r2
 8009634:	1823883a 	mov	r17,r3
 8009638:	888001cc 	andi	r2,r17,7
 800963c:	103f9e1e 	bne	r2,zero,80094b8 <__alt_data_end+0xfc0094b8>
 8009640:	4004977a 	slli	r2,r8,29
 8009644:	8822d0fa 	srli	r17,r17,3
 8009648:	4010d0fa 	srli	r8,r8,3
 800964c:	9007883a 	mov	r3,r18
 8009650:	1444b03a 	or	r2,r2,r17
 8009654:	0101ffc4 	movi	r4,2047
 8009658:	81002426 	beq	r16,r4,80096ec <__adddf3+0x2b8>
 800965c:	8120703a 	and	r16,r16,r4
 8009660:	01000434 	movhi	r4,16
 8009664:	213fffc4 	addi	r4,r4,-1
 8009668:	4110703a 	and	r8,r8,r4
 800966c:	003fa806 	br	8009510 <__alt_data_end+0xfc009510>
 8009670:	8089c83a 	sub	r4,r16,r2
 8009674:	01005e0e 	bge	zero,r4,80097f0 <__adddf3+0x3bc>
 8009678:	10002b26 	beq	r2,zero,8009728 <__adddf3+0x2f4>
 800967c:	0081ffc4 	movi	r2,2047
 8009680:	80bf8b26 	beq	r16,r2,80094b0 <__alt_data_end+0xfc0094b0>
 8009684:	4a402034 	orhi	r9,r9,128
 8009688:	00800e04 	movi	r2,56
 800968c:	1100a40e 	bge	r2,r4,8009920 <__adddf3+0x4ec>
 8009690:	498cb03a 	or	r6,r9,r6
 8009694:	300ac03a 	cmpne	r5,r6,zero
 8009698:	0013883a 	mov	r9,zero
 800969c:	2c4b883a 	add	r5,r5,r17
 80096a0:	2c63803a 	cmpltu	r17,r5,r17
 80096a4:	4a11883a 	add	r8,r9,r8
 80096a8:	8a11883a 	add	r8,r17,r8
 80096ac:	2823883a 	mov	r17,r5
 80096b0:	4080202c 	andhi	r2,r8,128
 80096b4:	103fe026 	beq	r2,zero,8009638 <__alt_data_end+0xfc009638>
 80096b8:	84000044 	addi	r16,r16,1
 80096bc:	0081ffc4 	movi	r2,2047
 80096c0:	8080d226 	beq	r16,r2,8009a0c <__adddf3+0x5d8>
 80096c4:	00bfe034 	movhi	r2,65408
 80096c8:	10bfffc4 	addi	r2,r2,-1
 80096cc:	4090703a 	and	r8,r8,r2
 80096d0:	880ad07a 	srli	r5,r17,1
 80096d4:	400897fa 	slli	r4,r8,31
 80096d8:	88c0004c 	andi	r3,r17,1
 80096dc:	28e2b03a 	or	r17,r5,r3
 80096e0:	4010d07a 	srli	r8,r8,1
 80096e4:	2462b03a 	or	r17,r4,r17
 80096e8:	003f7106 	br	80094b0 <__alt_data_end+0xfc0094b0>
 80096ec:	4088b03a 	or	r4,r8,r2
 80096f0:	20014526 	beq	r4,zero,8009c08 <__adddf3+0x7d4>
 80096f4:	01000434 	movhi	r4,16
 80096f8:	42000234 	orhi	r8,r8,8
 80096fc:	213fffc4 	addi	r4,r4,-1
 8009700:	4110703a 	and	r8,r8,r4
 8009704:	003f8206 	br	8009510 <__alt_data_end+0xfc009510>
 8009708:	18ffffc4 	addi	r3,r3,-1
 800970c:	1800491e 	bne	r3,zero,8009834 <__adddf3+0x400>
 8009710:	898bc83a 	sub	r5,r17,r6
 8009714:	8963803a 	cmpltu	r17,r17,r5
 8009718:	4251c83a 	sub	r8,r8,r9
 800971c:	4451c83a 	sub	r8,r8,r17
 8009720:	2823883a 	mov	r17,r5
 8009724:	003f9f06 	br	80095a4 <__alt_data_end+0xfc0095a4>
 8009728:	4984b03a 	or	r2,r9,r6
 800972c:	103f6026 	beq	r2,zero,80094b0 <__alt_data_end+0xfc0094b0>
 8009730:	213fffc4 	addi	r4,r4,-1
 8009734:	2000931e 	bne	r4,zero,8009984 <__adddf3+0x550>
 8009738:	898d883a 	add	r6,r17,r6
 800973c:	3463803a 	cmpltu	r17,r6,r17
 8009740:	4251883a 	add	r8,r8,r9
 8009744:	8a11883a 	add	r8,r17,r8
 8009748:	3023883a 	mov	r17,r6
 800974c:	003fd806 	br	80096b0 <__alt_data_end+0xfc0096b0>
 8009750:	1800541e 	bne	r3,zero,80098a4 <__adddf3+0x470>
 8009754:	80800044 	addi	r2,r16,1
 8009758:	1081ffcc 	andi	r2,r2,2047
 800975c:	00c00044 	movi	r3,1
 8009760:	1880a00e 	bge	r3,r2,80099e4 <__adddf3+0x5b0>
 8009764:	8989c83a 	sub	r4,r17,r6
 8009768:	8905803a 	cmpltu	r2,r17,r4
 800976c:	4267c83a 	sub	r19,r8,r9
 8009770:	98a7c83a 	sub	r19,r19,r2
 8009774:	9880202c 	andhi	r2,r19,128
 8009778:	10006326 	beq	r2,zero,8009908 <__adddf3+0x4d4>
 800977c:	3463c83a 	sub	r17,r6,r17
 8009780:	4a07c83a 	sub	r3,r9,r8
 8009784:	344d803a 	cmpltu	r6,r6,r17
 8009788:	19a7c83a 	sub	r19,r3,r6
 800978c:	3825883a 	mov	r18,r7
 8009790:	983f8a1e 	bne	r19,zero,80095bc <__alt_data_end+0xfc0095bc>
 8009794:	8809883a 	mov	r4,r17
 8009798:	800bc740 	call	800bc74 <__clzsi2>
 800979c:	10800804 	addi	r2,r2,32
 80097a0:	10fffe04 	addi	r3,r2,-8
 80097a4:	010007c4 	movi	r4,31
 80097a8:	20ff890e 	bge	r4,r3,80095d0 <__alt_data_end+0xfc0095d0>
 80097ac:	10bff604 	addi	r2,r2,-40
 80097b0:	8884983a 	sll	r2,r17,r2
 80097b4:	0023883a 	mov	r17,zero
 80097b8:	1c3f8c0e 	bge	r3,r16,80095ec <__alt_data_end+0xfc0095ec>
 80097bc:	023fe034 	movhi	r8,65408
 80097c0:	423fffc4 	addi	r8,r8,-1
 80097c4:	80e1c83a 	sub	r16,r16,r3
 80097c8:	1210703a 	and	r8,r2,r8
 80097cc:	003f3806 	br	80094b0 <__alt_data_end+0xfc0094b0>
 80097d0:	9007883a 	mov	r3,r18
 80097d4:	0011883a 	mov	r8,zero
 80097d8:	0005883a 	mov	r2,zero
 80097dc:	003f4c06 	br	8009510 <__alt_data_end+0xfc009510>
 80097e0:	498cb03a 	or	r6,r9,r6
 80097e4:	300cc03a 	cmpne	r6,r6,zero
 80097e8:	0007883a 	mov	r3,zero
 80097ec:	003f6806 	br	8009590 <__alt_data_end+0xfc009590>
 80097f0:	20009c1e 	bne	r4,zero,8009a64 <__adddf3+0x630>
 80097f4:	80800044 	addi	r2,r16,1
 80097f8:	1141ffcc 	andi	r5,r2,2047
 80097fc:	01000044 	movi	r4,1
 8009800:	2140670e 	bge	r4,r5,80099a0 <__adddf3+0x56c>
 8009804:	0101ffc4 	movi	r4,2047
 8009808:	11007f26 	beq	r2,r4,8009a08 <__adddf3+0x5d4>
 800980c:	898d883a 	add	r6,r17,r6
 8009810:	4247883a 	add	r3,r8,r9
 8009814:	3451803a 	cmpltu	r8,r6,r17
 8009818:	40d1883a 	add	r8,r8,r3
 800981c:	402297fa 	slli	r17,r8,31
 8009820:	300cd07a 	srli	r6,r6,1
 8009824:	4010d07a 	srli	r8,r8,1
 8009828:	1021883a 	mov	r16,r2
 800982c:	89a2b03a 	or	r17,r17,r6
 8009830:	003f1f06 	br	80094b0 <__alt_data_end+0xfc0094b0>
 8009834:	0081ffc4 	movi	r2,2047
 8009838:	80bf481e 	bne	r16,r2,800955c <__alt_data_end+0xfc00955c>
 800983c:	003f1c06 	br	80094b0 <__alt_data_end+0xfc0094b0>
 8009840:	843ff844 	addi	r16,r16,-31
 8009844:	01000804 	movi	r4,32
 8009848:	1406d83a 	srl	r3,r2,r16
 800984c:	41005026 	beq	r8,r4,8009990 <__adddf3+0x55c>
 8009850:	01001004 	movi	r4,64
 8009854:	2211c83a 	sub	r8,r4,r8
 8009858:	1204983a 	sll	r2,r2,r8
 800985c:	88a2b03a 	or	r17,r17,r2
 8009860:	8822c03a 	cmpne	r17,r17,zero
 8009864:	1c62b03a 	or	r17,r3,r17
 8009868:	0011883a 	mov	r8,zero
 800986c:	0021883a 	mov	r16,zero
 8009870:	003f7106 	br	8009638 <__alt_data_end+0xfc009638>
 8009874:	193ff804 	addi	r4,r3,-32
 8009878:	00800804 	movi	r2,32
 800987c:	4908d83a 	srl	r4,r9,r4
 8009880:	18804526 	beq	r3,r2,8009998 <__adddf3+0x564>
 8009884:	00801004 	movi	r2,64
 8009888:	10c5c83a 	sub	r2,r2,r3
 800988c:	4886983a 	sll	r3,r9,r2
 8009890:	198cb03a 	or	r6,r3,r6
 8009894:	300cc03a 	cmpne	r6,r6,zero
 8009898:	218cb03a 	or	r6,r4,r6
 800989c:	0007883a 	mov	r3,zero
 80098a0:	003f3b06 	br	8009590 <__alt_data_end+0xfc009590>
 80098a4:	80002a26 	beq	r16,zero,8009950 <__adddf3+0x51c>
 80098a8:	0101ffc4 	movi	r4,2047
 80098ac:	11006826 	beq	r2,r4,8009a50 <__adddf3+0x61c>
 80098b0:	00c7c83a 	sub	r3,zero,r3
 80098b4:	42002034 	orhi	r8,r8,128
 80098b8:	01000e04 	movi	r4,56
 80098bc:	20c07c16 	blt	r4,r3,8009ab0 <__adddf3+0x67c>
 80098c0:	010007c4 	movi	r4,31
 80098c4:	20c0da16 	blt	r4,r3,8009c30 <__adddf3+0x7fc>
 80098c8:	01000804 	movi	r4,32
 80098cc:	20c9c83a 	sub	r4,r4,r3
 80098d0:	4114983a 	sll	r10,r8,r4
 80098d4:	88cad83a 	srl	r5,r17,r3
 80098d8:	8908983a 	sll	r4,r17,r4
 80098dc:	40c6d83a 	srl	r3,r8,r3
 80098e0:	5162b03a 	or	r17,r10,r5
 80098e4:	2008c03a 	cmpne	r4,r4,zero
 80098e8:	8922b03a 	or	r17,r17,r4
 80098ec:	3463c83a 	sub	r17,r6,r17
 80098f0:	48c7c83a 	sub	r3,r9,r3
 80098f4:	344d803a 	cmpltu	r6,r6,r17
 80098f8:	1991c83a 	sub	r8,r3,r6
 80098fc:	1021883a 	mov	r16,r2
 8009900:	3825883a 	mov	r18,r7
 8009904:	003f2706 	br	80095a4 <__alt_data_end+0xfc0095a4>
 8009908:	24d0b03a 	or	r8,r4,r19
 800990c:	40001b1e 	bne	r8,zero,800997c <__adddf3+0x548>
 8009910:	0005883a 	mov	r2,zero
 8009914:	0007883a 	mov	r3,zero
 8009918:	0021883a 	mov	r16,zero
 800991c:	003f4d06 	br	8009654 <__alt_data_end+0xfc009654>
 8009920:	008007c4 	movi	r2,31
 8009924:	11003c16 	blt	r2,r4,8009a18 <__adddf3+0x5e4>
 8009928:	00800804 	movi	r2,32
 800992c:	1105c83a 	sub	r2,r2,r4
 8009930:	488e983a 	sll	r7,r9,r2
 8009934:	310ad83a 	srl	r5,r6,r4
 8009938:	3084983a 	sll	r2,r6,r2
 800993c:	4912d83a 	srl	r9,r9,r4
 8009940:	394ab03a 	or	r5,r7,r5
 8009944:	1004c03a 	cmpne	r2,r2,zero
 8009948:	288ab03a 	or	r5,r5,r2
 800994c:	003f5306 	br	800969c <__alt_data_end+0xfc00969c>
 8009950:	4448b03a 	or	r4,r8,r17
 8009954:	20003e26 	beq	r4,zero,8009a50 <__adddf3+0x61c>
 8009958:	00c6303a 	nor	r3,zero,r3
 800995c:	18003a1e 	bne	r3,zero,8009a48 <__adddf3+0x614>
 8009960:	3463c83a 	sub	r17,r6,r17
 8009964:	4a07c83a 	sub	r3,r9,r8
 8009968:	344d803a 	cmpltu	r6,r6,r17
 800996c:	1991c83a 	sub	r8,r3,r6
 8009970:	1021883a 	mov	r16,r2
 8009974:	3825883a 	mov	r18,r7
 8009978:	003f0a06 	br	80095a4 <__alt_data_end+0xfc0095a4>
 800997c:	2023883a 	mov	r17,r4
 8009980:	003f0d06 	br	80095b8 <__alt_data_end+0xfc0095b8>
 8009984:	0081ffc4 	movi	r2,2047
 8009988:	80bf3f1e 	bne	r16,r2,8009688 <__alt_data_end+0xfc009688>
 800998c:	003ec806 	br	80094b0 <__alt_data_end+0xfc0094b0>
 8009990:	0005883a 	mov	r2,zero
 8009994:	003fb106 	br	800985c <__alt_data_end+0xfc00985c>
 8009998:	0007883a 	mov	r3,zero
 800999c:	003fbc06 	br	8009890 <__alt_data_end+0xfc009890>
 80099a0:	4444b03a 	or	r2,r8,r17
 80099a4:	8000871e 	bne	r16,zero,8009bc4 <__adddf3+0x790>
 80099a8:	1000ba26 	beq	r2,zero,8009c94 <__adddf3+0x860>
 80099ac:	4984b03a 	or	r2,r9,r6
 80099b0:	103ebf26 	beq	r2,zero,80094b0 <__alt_data_end+0xfc0094b0>
 80099b4:	8985883a 	add	r2,r17,r6
 80099b8:	4247883a 	add	r3,r8,r9
 80099bc:	1451803a 	cmpltu	r8,r2,r17
 80099c0:	40d1883a 	add	r8,r8,r3
 80099c4:	40c0202c 	andhi	r3,r8,128
 80099c8:	1023883a 	mov	r17,r2
 80099cc:	183f1a26 	beq	r3,zero,8009638 <__alt_data_end+0xfc009638>
 80099d0:	00bfe034 	movhi	r2,65408
 80099d4:	10bfffc4 	addi	r2,r2,-1
 80099d8:	2021883a 	mov	r16,r4
 80099dc:	4090703a 	and	r8,r8,r2
 80099e0:	003eb306 	br	80094b0 <__alt_data_end+0xfc0094b0>
 80099e4:	4444b03a 	or	r2,r8,r17
 80099e8:	8000291e 	bne	r16,zero,8009a90 <__adddf3+0x65c>
 80099ec:	10004b1e 	bne	r2,zero,8009b1c <__adddf3+0x6e8>
 80099f0:	4990b03a 	or	r8,r9,r6
 80099f4:	40008b26 	beq	r8,zero,8009c24 <__adddf3+0x7f0>
 80099f8:	4811883a 	mov	r8,r9
 80099fc:	3023883a 	mov	r17,r6
 8009a00:	3825883a 	mov	r18,r7
 8009a04:	003eaa06 	br	80094b0 <__alt_data_end+0xfc0094b0>
 8009a08:	1021883a 	mov	r16,r2
 8009a0c:	0011883a 	mov	r8,zero
 8009a10:	0005883a 	mov	r2,zero
 8009a14:	003f0f06 	br	8009654 <__alt_data_end+0xfc009654>
 8009a18:	217ff804 	addi	r5,r4,-32
 8009a1c:	00800804 	movi	r2,32
 8009a20:	494ad83a 	srl	r5,r9,r5
 8009a24:	20807d26 	beq	r4,r2,8009c1c <__adddf3+0x7e8>
 8009a28:	00801004 	movi	r2,64
 8009a2c:	1109c83a 	sub	r4,r2,r4
 8009a30:	4912983a 	sll	r9,r9,r4
 8009a34:	498cb03a 	or	r6,r9,r6
 8009a38:	300cc03a 	cmpne	r6,r6,zero
 8009a3c:	298ab03a 	or	r5,r5,r6
 8009a40:	0013883a 	mov	r9,zero
 8009a44:	003f1506 	br	800969c <__alt_data_end+0xfc00969c>
 8009a48:	0101ffc4 	movi	r4,2047
 8009a4c:	113f9a1e 	bne	r2,r4,80098b8 <__alt_data_end+0xfc0098b8>
 8009a50:	4811883a 	mov	r8,r9
 8009a54:	3023883a 	mov	r17,r6
 8009a58:	1021883a 	mov	r16,r2
 8009a5c:	3825883a 	mov	r18,r7
 8009a60:	003e9306 	br	80094b0 <__alt_data_end+0xfc0094b0>
 8009a64:	8000161e 	bne	r16,zero,8009ac0 <__adddf3+0x68c>
 8009a68:	444ab03a 	or	r5,r8,r17
 8009a6c:	28005126 	beq	r5,zero,8009bb4 <__adddf3+0x780>
 8009a70:	0108303a 	nor	r4,zero,r4
 8009a74:	20004d1e 	bne	r4,zero,8009bac <__adddf3+0x778>
 8009a78:	89a3883a 	add	r17,r17,r6
 8009a7c:	4253883a 	add	r9,r8,r9
 8009a80:	898d803a 	cmpltu	r6,r17,r6
 8009a84:	3251883a 	add	r8,r6,r9
 8009a88:	1021883a 	mov	r16,r2
 8009a8c:	003f0806 	br	80096b0 <__alt_data_end+0xfc0096b0>
 8009a90:	1000301e 	bne	r2,zero,8009b54 <__adddf3+0x720>
 8009a94:	4984b03a 	or	r2,r9,r6
 8009a98:	10007126 	beq	r2,zero,8009c60 <__adddf3+0x82c>
 8009a9c:	4811883a 	mov	r8,r9
 8009aa0:	3023883a 	mov	r17,r6
 8009aa4:	3825883a 	mov	r18,r7
 8009aa8:	0401ffc4 	movi	r16,2047
 8009aac:	003e8006 	br	80094b0 <__alt_data_end+0xfc0094b0>
 8009ab0:	4462b03a 	or	r17,r8,r17
 8009ab4:	8822c03a 	cmpne	r17,r17,zero
 8009ab8:	0007883a 	mov	r3,zero
 8009abc:	003f8b06 	br	80098ec <__alt_data_end+0xfc0098ec>
 8009ac0:	0141ffc4 	movi	r5,2047
 8009ac4:	11403b26 	beq	r2,r5,8009bb4 <__adddf3+0x780>
 8009ac8:	0109c83a 	sub	r4,zero,r4
 8009acc:	42002034 	orhi	r8,r8,128
 8009ad0:	01400e04 	movi	r5,56
 8009ad4:	29006716 	blt	r5,r4,8009c74 <__adddf3+0x840>
 8009ad8:	014007c4 	movi	r5,31
 8009adc:	29007016 	blt	r5,r4,8009ca0 <__adddf3+0x86c>
 8009ae0:	01400804 	movi	r5,32
 8009ae4:	290bc83a 	sub	r5,r5,r4
 8009ae8:	4154983a 	sll	r10,r8,r5
 8009aec:	890ed83a 	srl	r7,r17,r4
 8009af0:	894a983a 	sll	r5,r17,r5
 8009af4:	4108d83a 	srl	r4,r8,r4
 8009af8:	51e2b03a 	or	r17,r10,r7
 8009afc:	280ac03a 	cmpne	r5,r5,zero
 8009b00:	8962b03a 	or	r17,r17,r5
 8009b04:	89a3883a 	add	r17,r17,r6
 8009b08:	2253883a 	add	r9,r4,r9
 8009b0c:	898d803a 	cmpltu	r6,r17,r6
 8009b10:	3251883a 	add	r8,r6,r9
 8009b14:	1021883a 	mov	r16,r2
 8009b18:	003ee506 	br	80096b0 <__alt_data_end+0xfc0096b0>
 8009b1c:	4984b03a 	or	r2,r9,r6
 8009b20:	103e6326 	beq	r2,zero,80094b0 <__alt_data_end+0xfc0094b0>
 8009b24:	8987c83a 	sub	r3,r17,r6
 8009b28:	88c9803a 	cmpltu	r4,r17,r3
 8009b2c:	4245c83a 	sub	r2,r8,r9
 8009b30:	1105c83a 	sub	r2,r2,r4
 8009b34:	1100202c 	andhi	r4,r2,128
 8009b38:	203ebb26 	beq	r4,zero,8009628 <__alt_data_end+0xfc009628>
 8009b3c:	3463c83a 	sub	r17,r6,r17
 8009b40:	4a07c83a 	sub	r3,r9,r8
 8009b44:	344d803a 	cmpltu	r6,r6,r17
 8009b48:	1991c83a 	sub	r8,r3,r6
 8009b4c:	3825883a 	mov	r18,r7
 8009b50:	003e5706 	br	80094b0 <__alt_data_end+0xfc0094b0>
 8009b54:	4984b03a 	or	r2,r9,r6
 8009b58:	10002e26 	beq	r2,zero,8009c14 <__adddf3+0x7e0>
 8009b5c:	4004d0fa 	srli	r2,r8,3
 8009b60:	8822d0fa 	srli	r17,r17,3
 8009b64:	4010977a 	slli	r8,r8,29
 8009b68:	10c0022c 	andhi	r3,r2,8
 8009b6c:	4462b03a 	or	r17,r8,r17
 8009b70:	18000826 	beq	r3,zero,8009b94 <__adddf3+0x760>
 8009b74:	4808d0fa 	srli	r4,r9,3
 8009b78:	20c0022c 	andhi	r3,r4,8
 8009b7c:	1800051e 	bne	r3,zero,8009b94 <__adddf3+0x760>
 8009b80:	300cd0fa 	srli	r6,r6,3
 8009b84:	4806977a 	slli	r3,r9,29
 8009b88:	2005883a 	mov	r2,r4
 8009b8c:	3825883a 	mov	r18,r7
 8009b90:	19a2b03a 	or	r17,r3,r6
 8009b94:	8810d77a 	srli	r8,r17,29
 8009b98:	100490fa 	slli	r2,r2,3
 8009b9c:	882290fa 	slli	r17,r17,3
 8009ba0:	0401ffc4 	movi	r16,2047
 8009ba4:	4090b03a 	or	r8,r8,r2
 8009ba8:	003e4106 	br	80094b0 <__alt_data_end+0xfc0094b0>
 8009bac:	0141ffc4 	movi	r5,2047
 8009bb0:	117fc71e 	bne	r2,r5,8009ad0 <__alt_data_end+0xfc009ad0>
 8009bb4:	4811883a 	mov	r8,r9
 8009bb8:	3023883a 	mov	r17,r6
 8009bbc:	1021883a 	mov	r16,r2
 8009bc0:	003e3b06 	br	80094b0 <__alt_data_end+0xfc0094b0>
 8009bc4:	10002f26 	beq	r2,zero,8009c84 <__adddf3+0x850>
 8009bc8:	4984b03a 	or	r2,r9,r6
 8009bcc:	10001126 	beq	r2,zero,8009c14 <__adddf3+0x7e0>
 8009bd0:	4004d0fa 	srli	r2,r8,3
 8009bd4:	8822d0fa 	srli	r17,r17,3
 8009bd8:	4010977a 	slli	r8,r8,29
 8009bdc:	10c0022c 	andhi	r3,r2,8
 8009be0:	4462b03a 	or	r17,r8,r17
 8009be4:	183feb26 	beq	r3,zero,8009b94 <__alt_data_end+0xfc009b94>
 8009be8:	4808d0fa 	srli	r4,r9,3
 8009bec:	20c0022c 	andhi	r3,r4,8
 8009bf0:	183fe81e 	bne	r3,zero,8009b94 <__alt_data_end+0xfc009b94>
 8009bf4:	300cd0fa 	srli	r6,r6,3
 8009bf8:	4806977a 	slli	r3,r9,29
 8009bfc:	2005883a 	mov	r2,r4
 8009c00:	19a2b03a 	or	r17,r3,r6
 8009c04:	003fe306 	br	8009b94 <__alt_data_end+0xfc009b94>
 8009c08:	0011883a 	mov	r8,zero
 8009c0c:	0005883a 	mov	r2,zero
 8009c10:	003e3f06 	br	8009510 <__alt_data_end+0xfc009510>
 8009c14:	0401ffc4 	movi	r16,2047
 8009c18:	003e2506 	br	80094b0 <__alt_data_end+0xfc0094b0>
 8009c1c:	0013883a 	mov	r9,zero
 8009c20:	003f8406 	br	8009a34 <__alt_data_end+0xfc009a34>
 8009c24:	0005883a 	mov	r2,zero
 8009c28:	0007883a 	mov	r3,zero
 8009c2c:	003e8906 	br	8009654 <__alt_data_end+0xfc009654>
 8009c30:	197ff804 	addi	r5,r3,-32
 8009c34:	01000804 	movi	r4,32
 8009c38:	414ad83a 	srl	r5,r8,r5
 8009c3c:	19002426 	beq	r3,r4,8009cd0 <__adddf3+0x89c>
 8009c40:	01001004 	movi	r4,64
 8009c44:	20c7c83a 	sub	r3,r4,r3
 8009c48:	40c6983a 	sll	r3,r8,r3
 8009c4c:	1c46b03a 	or	r3,r3,r17
 8009c50:	1806c03a 	cmpne	r3,r3,zero
 8009c54:	28e2b03a 	or	r17,r5,r3
 8009c58:	0007883a 	mov	r3,zero
 8009c5c:	003f2306 	br	80098ec <__alt_data_end+0xfc0098ec>
 8009c60:	0007883a 	mov	r3,zero
 8009c64:	5811883a 	mov	r8,r11
 8009c68:	00bfffc4 	movi	r2,-1
 8009c6c:	0401ffc4 	movi	r16,2047
 8009c70:	003e7806 	br	8009654 <__alt_data_end+0xfc009654>
 8009c74:	4462b03a 	or	r17,r8,r17
 8009c78:	8822c03a 	cmpne	r17,r17,zero
 8009c7c:	0009883a 	mov	r4,zero
 8009c80:	003fa006 	br	8009b04 <__alt_data_end+0xfc009b04>
 8009c84:	4811883a 	mov	r8,r9
 8009c88:	3023883a 	mov	r17,r6
 8009c8c:	0401ffc4 	movi	r16,2047
 8009c90:	003e0706 	br	80094b0 <__alt_data_end+0xfc0094b0>
 8009c94:	4811883a 	mov	r8,r9
 8009c98:	3023883a 	mov	r17,r6
 8009c9c:	003e0406 	br	80094b0 <__alt_data_end+0xfc0094b0>
 8009ca0:	21fff804 	addi	r7,r4,-32
 8009ca4:	01400804 	movi	r5,32
 8009ca8:	41ced83a 	srl	r7,r8,r7
 8009cac:	21400a26 	beq	r4,r5,8009cd8 <__adddf3+0x8a4>
 8009cb0:	01401004 	movi	r5,64
 8009cb4:	2909c83a 	sub	r4,r5,r4
 8009cb8:	4108983a 	sll	r4,r8,r4
 8009cbc:	2448b03a 	or	r4,r4,r17
 8009cc0:	2008c03a 	cmpne	r4,r4,zero
 8009cc4:	3922b03a 	or	r17,r7,r4
 8009cc8:	0009883a 	mov	r4,zero
 8009ccc:	003f8d06 	br	8009b04 <__alt_data_end+0xfc009b04>
 8009cd0:	0007883a 	mov	r3,zero
 8009cd4:	003fdd06 	br	8009c4c <__alt_data_end+0xfc009c4c>
 8009cd8:	0009883a 	mov	r4,zero
 8009cdc:	003ff706 	br	8009cbc <__alt_data_end+0xfc009cbc>

08009ce0 <__divdf3>:
 8009ce0:	defff004 	addi	sp,sp,-64
 8009ce4:	dc800815 	stw	r18,32(sp)
 8009ce8:	2824d53a 	srli	r18,r5,20
 8009cec:	dd800c15 	stw	r22,48(sp)
 8009cf0:	282cd7fa 	srli	r22,r5,31
 8009cf4:	dc000615 	stw	r16,24(sp)
 8009cf8:	04000434 	movhi	r16,16
 8009cfc:	843fffc4 	addi	r16,r16,-1
 8009d00:	dfc00f15 	stw	ra,60(sp)
 8009d04:	df000e15 	stw	fp,56(sp)
 8009d08:	ddc00d15 	stw	r23,52(sp)
 8009d0c:	dd400b15 	stw	r21,44(sp)
 8009d10:	dd000a15 	stw	r20,40(sp)
 8009d14:	dcc00915 	stw	r19,36(sp)
 8009d18:	dc400715 	stw	r17,28(sp)
 8009d1c:	9481ffcc 	andi	r18,r18,2047
 8009d20:	2c20703a 	and	r16,r5,r16
 8009d24:	b2003fcc 	andi	r8,r22,255
 8009d28:	90006126 	beq	r18,zero,8009eb0 <__divdf3+0x1d0>
 8009d2c:	0081ffc4 	movi	r2,2047
 8009d30:	202b883a 	mov	r21,r4
 8009d34:	90803726 	beq	r18,r2,8009e14 <__divdf3+0x134>
 8009d38:	80800434 	orhi	r2,r16,16
 8009d3c:	100490fa 	slli	r2,r2,3
 8009d40:	2020d77a 	srli	r16,r4,29
 8009d44:	202a90fa 	slli	r21,r4,3
 8009d48:	94bf0044 	addi	r18,r18,-1023
 8009d4c:	80a0b03a 	or	r16,r16,r2
 8009d50:	0013883a 	mov	r9,zero
 8009d54:	000b883a 	mov	r5,zero
 8009d58:	3806d53a 	srli	r3,r7,20
 8009d5c:	382ed7fa 	srli	r23,r7,31
 8009d60:	04400434 	movhi	r17,16
 8009d64:	8c7fffc4 	addi	r17,r17,-1
 8009d68:	18c1ffcc 	andi	r3,r3,2047
 8009d6c:	3029883a 	mov	r20,r6
 8009d70:	3c62703a 	and	r17,r7,r17
 8009d74:	bf003fcc 	andi	fp,r23,255
 8009d78:	18006e26 	beq	r3,zero,8009f34 <__divdf3+0x254>
 8009d7c:	0081ffc4 	movi	r2,2047
 8009d80:	18806626 	beq	r3,r2,8009f1c <__divdf3+0x23c>
 8009d84:	88800434 	orhi	r2,r17,16
 8009d88:	100490fa 	slli	r2,r2,3
 8009d8c:	3022d77a 	srli	r17,r6,29
 8009d90:	302890fa 	slli	r20,r6,3
 8009d94:	18ff0044 	addi	r3,r3,-1023
 8009d98:	88a2b03a 	or	r17,r17,r2
 8009d9c:	000f883a 	mov	r7,zero
 8009da0:	b5e6f03a 	xor	r19,r22,r23
 8009da4:	3a4cb03a 	or	r6,r7,r9
 8009da8:	008003c4 	movi	r2,15
 8009dac:	9809883a 	mov	r4,r19
 8009db0:	90c7c83a 	sub	r3,r18,r3
 8009db4:	9cc03fcc 	andi	r19,r19,255
 8009db8:	11809636 	bltu	r2,r6,800a014 <__divdf3+0x334>
 8009dbc:	300c90ba 	slli	r6,r6,2
 8009dc0:	00820074 	movhi	r2,2049
 8009dc4:	10a77504 	addi	r2,r2,-25132
 8009dc8:	308d883a 	add	r6,r6,r2
 8009dcc:	30800017 	ldw	r2,0(r6)
 8009dd0:	1000683a 	jmp	r2
 8009dd4:	0800a014 	ori	zero,at,640
 8009dd8:	08009e4c 	andi	zero,at,633
 8009ddc:	0800a004 	addi	zero,at,640
 8009de0:	08009e40 	call	8009e4 <__alt_mem_onchip_memory2_0+0x8009e4>
 8009de4:	0800a004 	addi	zero,at,640
 8009de8:	08009fd8 	cmpnei	zero,at,639
 8009dec:	0800a004 	addi	zero,at,640
 8009df0:	08009e40 	call	8009e4 <__alt_mem_onchip_memory2_0+0x8009e4>
 8009df4:	08009e4c 	andi	zero,at,633
 8009df8:	08009e4c 	andi	zero,at,633
 8009dfc:	08009fd8 	cmpnei	zero,at,639
 8009e00:	08009e40 	call	8009e4 <__alt_mem_onchip_memory2_0+0x8009e4>
 8009e04:	08009e30 	cmpltui	zero,at,632
 8009e08:	08009e30 	cmpltui	zero,at,632
 8009e0c:	08009e30 	cmpltui	zero,at,632
 8009e10:	0800a39c 	xori	zero,at,654
 8009e14:	2404b03a 	or	r2,r4,r16
 8009e18:	10006c1e 	bne	r2,zero,8009fcc <__divdf3+0x2ec>
 8009e1c:	02400204 	movi	r9,8
 8009e20:	0021883a 	mov	r16,zero
 8009e24:	002b883a 	mov	r21,zero
 8009e28:	01400084 	movi	r5,2
 8009e2c:	003fca06 	br	8009d58 <__alt_data_end+0xfc009d58>
 8009e30:	8023883a 	mov	r17,r16
 8009e34:	a829883a 	mov	r20,r21
 8009e38:	4039883a 	mov	fp,r8
 8009e3c:	280f883a 	mov	r7,r5
 8009e40:	00800084 	movi	r2,2
 8009e44:	3881601e 	bne	r7,r2,800a3c8 <__divdf3+0x6e8>
 8009e48:	e027883a 	mov	r19,fp
 8009e4c:	9900004c 	andi	r4,r19,1
 8009e50:	0081ffc4 	movi	r2,2047
 8009e54:	0021883a 	mov	r16,zero
 8009e58:	002b883a 	mov	r21,zero
 8009e5c:	1004953a 	slli	r2,r2,20
 8009e60:	20c03fcc 	andi	r3,r4,255
 8009e64:	01400434 	movhi	r5,16
 8009e68:	297fffc4 	addi	r5,r5,-1
 8009e6c:	180697fa 	slli	r3,r3,31
 8009e70:	8160703a 	and	r16,r16,r5
 8009e74:	80a0b03a 	or	r16,r16,r2
 8009e78:	80c6b03a 	or	r3,r16,r3
 8009e7c:	a805883a 	mov	r2,r21
 8009e80:	dfc00f17 	ldw	ra,60(sp)
 8009e84:	df000e17 	ldw	fp,56(sp)
 8009e88:	ddc00d17 	ldw	r23,52(sp)
 8009e8c:	dd800c17 	ldw	r22,48(sp)
 8009e90:	dd400b17 	ldw	r21,44(sp)
 8009e94:	dd000a17 	ldw	r20,40(sp)
 8009e98:	dcc00917 	ldw	r19,36(sp)
 8009e9c:	dc800817 	ldw	r18,32(sp)
 8009ea0:	dc400717 	ldw	r17,28(sp)
 8009ea4:	dc000617 	ldw	r16,24(sp)
 8009ea8:	dec01004 	addi	sp,sp,64
 8009eac:	f800283a 	ret
 8009eb0:	2404b03a 	or	r2,r4,r16
 8009eb4:	2023883a 	mov	r17,r4
 8009eb8:	10003f26 	beq	r2,zero,8009fb8 <__divdf3+0x2d8>
 8009ebc:	80015e26 	beq	r16,zero,800a438 <__divdf3+0x758>
 8009ec0:	8009883a 	mov	r4,r16
 8009ec4:	d9800215 	stw	r6,8(sp)
 8009ec8:	d9c00515 	stw	r7,20(sp)
 8009ecc:	da000415 	stw	r8,16(sp)
 8009ed0:	800bc740 	call	800bc74 <__clzsi2>
 8009ed4:	d9800217 	ldw	r6,8(sp)
 8009ed8:	d9c00517 	ldw	r7,20(sp)
 8009edc:	da000417 	ldw	r8,16(sp)
 8009ee0:	113ffd44 	addi	r4,r2,-11
 8009ee4:	00c00704 	movi	r3,28
 8009ee8:	19014f16 	blt	r3,r4,800a428 <__divdf3+0x748>
 8009eec:	00c00744 	movi	r3,29
 8009ef0:	157ffe04 	addi	r21,r2,-8
 8009ef4:	1907c83a 	sub	r3,r3,r4
 8009ef8:	8560983a 	sll	r16,r16,r21
 8009efc:	88c6d83a 	srl	r3,r17,r3
 8009f00:	8d6a983a 	sll	r21,r17,r21
 8009f04:	1c20b03a 	or	r16,r3,r16
 8009f08:	1080fcc4 	addi	r2,r2,1011
 8009f0c:	00a5c83a 	sub	r18,zero,r2
 8009f10:	0013883a 	mov	r9,zero
 8009f14:	000b883a 	mov	r5,zero
 8009f18:	003f8f06 	br	8009d58 <__alt_data_end+0xfc009d58>
 8009f1c:	3444b03a 	or	r2,r6,r17
 8009f20:	1000231e 	bne	r2,zero,8009fb0 <__divdf3+0x2d0>
 8009f24:	0023883a 	mov	r17,zero
 8009f28:	0029883a 	mov	r20,zero
 8009f2c:	01c00084 	movi	r7,2
 8009f30:	003f9b06 	br	8009da0 <__alt_data_end+0xfc009da0>
 8009f34:	3444b03a 	or	r2,r6,r17
 8009f38:	10001926 	beq	r2,zero,8009fa0 <__divdf3+0x2c0>
 8009f3c:	88014b26 	beq	r17,zero,800a46c <__divdf3+0x78c>
 8009f40:	8809883a 	mov	r4,r17
 8009f44:	d9400115 	stw	r5,4(sp)
 8009f48:	d9800215 	stw	r6,8(sp)
 8009f4c:	da000415 	stw	r8,16(sp)
 8009f50:	da400315 	stw	r9,12(sp)
 8009f54:	800bc740 	call	800bc74 <__clzsi2>
 8009f58:	d9400117 	ldw	r5,4(sp)
 8009f5c:	d9800217 	ldw	r6,8(sp)
 8009f60:	da000417 	ldw	r8,16(sp)
 8009f64:	da400317 	ldw	r9,12(sp)
 8009f68:	113ffd44 	addi	r4,r2,-11
 8009f6c:	00c00704 	movi	r3,28
 8009f70:	19013a16 	blt	r3,r4,800a45c <__divdf3+0x77c>
 8009f74:	00c00744 	movi	r3,29
 8009f78:	153ffe04 	addi	r20,r2,-8
 8009f7c:	1907c83a 	sub	r3,r3,r4
 8009f80:	8d22983a 	sll	r17,r17,r20
 8009f84:	30c6d83a 	srl	r3,r6,r3
 8009f88:	3528983a 	sll	r20,r6,r20
 8009f8c:	1c62b03a 	or	r17,r3,r17
 8009f90:	1080fcc4 	addi	r2,r2,1011
 8009f94:	0087c83a 	sub	r3,zero,r2
 8009f98:	000f883a 	mov	r7,zero
 8009f9c:	003f8006 	br	8009da0 <__alt_data_end+0xfc009da0>
 8009fa0:	0023883a 	mov	r17,zero
 8009fa4:	0029883a 	mov	r20,zero
 8009fa8:	01c00044 	movi	r7,1
 8009fac:	003f7c06 	br	8009da0 <__alt_data_end+0xfc009da0>
 8009fb0:	01c000c4 	movi	r7,3
 8009fb4:	003f7a06 	br	8009da0 <__alt_data_end+0xfc009da0>
 8009fb8:	02400104 	movi	r9,4
 8009fbc:	0021883a 	mov	r16,zero
 8009fc0:	002b883a 	mov	r21,zero
 8009fc4:	01400044 	movi	r5,1
 8009fc8:	003f6306 	br	8009d58 <__alt_data_end+0xfc009d58>
 8009fcc:	02400304 	movi	r9,12
 8009fd0:	014000c4 	movi	r5,3
 8009fd4:	003f6006 	br	8009d58 <__alt_data_end+0xfc009d58>
 8009fd8:	04000434 	movhi	r16,16
 8009fdc:	0009883a 	mov	r4,zero
 8009fe0:	843fffc4 	addi	r16,r16,-1
 8009fe4:	057fffc4 	movi	r21,-1
 8009fe8:	0081ffc4 	movi	r2,2047
 8009fec:	003f9b06 	br	8009e5c <__alt_data_end+0xfc009e5c>
 8009ff0:	00c00044 	movi	r3,1
 8009ff4:	1887c83a 	sub	r3,r3,r2
 8009ff8:	01000e04 	movi	r4,56
 8009ffc:	20c1530e 	bge	r4,r3,800a54c <__divdf3+0x86c>
 800a000:	9900004c 	andi	r4,r19,1
 800a004:	0005883a 	mov	r2,zero
 800a008:	0021883a 	mov	r16,zero
 800a00c:	002b883a 	mov	r21,zero
 800a010:	003f9206 	br	8009e5c <__alt_data_end+0xfc009e5c>
 800a014:	8c012e36 	bltu	r17,r16,800a4d0 <__divdf3+0x7f0>
 800a018:	84412c26 	beq	r16,r17,800a4cc <__divdf3+0x7ec>
 800a01c:	a82f883a 	mov	r23,r21
 800a020:	18ffffc4 	addi	r3,r3,-1
 800a024:	002b883a 	mov	r21,zero
 800a028:	a004d63a 	srli	r2,r20,24
 800a02c:	8822923a 	slli	r17,r17,8
 800a030:	a028923a 	slli	r20,r20,8
 800a034:	8009883a 	mov	r4,r16
 800a038:	88acb03a 	or	r22,r17,r2
 800a03c:	dd000015 	stw	r20,0(sp)
 800a040:	b028d43a 	srli	r20,r22,16
 800a044:	d8c00215 	stw	r3,8(sp)
 800a048:	b4bfffcc 	andi	r18,r22,65535
 800a04c:	a00b883a 	mov	r5,r20
 800a050:	80009680 	call	8000968 <__udivsi3>
 800a054:	100b883a 	mov	r5,r2
 800a058:	9009883a 	mov	r4,r18
 800a05c:	1023883a 	mov	r17,r2
 800a060:	8000a240 	call	8000a24 <__mulsi3>
 800a064:	8009883a 	mov	r4,r16
 800a068:	a00b883a 	mov	r5,r20
 800a06c:	1039883a 	mov	fp,r2
 800a070:	80009cc0 	call	80009cc <__umodsi3>
 800a074:	1004943a 	slli	r2,r2,16
 800a078:	b808d43a 	srli	r4,r23,16
 800a07c:	d8c00217 	ldw	r3,8(sp)
 800a080:	2084b03a 	or	r2,r4,r2
 800a084:	1700062e 	bgeu	r2,fp,800a0a0 <__divdf3+0x3c0>
 800a088:	1585883a 	add	r2,r2,r22
 800a08c:	893fffc4 	addi	r4,r17,-1
 800a090:	15811d36 	bltu	r2,r22,800a508 <__divdf3+0x828>
 800a094:	17011c2e 	bgeu	r2,fp,800a508 <__divdf3+0x828>
 800a098:	8c7fff84 	addi	r17,r17,-2
 800a09c:	1585883a 	add	r2,r2,r22
 800a0a0:	1739c83a 	sub	fp,r2,fp
 800a0a4:	a00b883a 	mov	r5,r20
 800a0a8:	e009883a 	mov	r4,fp
 800a0ac:	d8c00215 	stw	r3,8(sp)
 800a0b0:	80009680 	call	8000968 <__udivsi3>
 800a0b4:	100b883a 	mov	r5,r2
 800a0b8:	9009883a 	mov	r4,r18
 800a0bc:	1021883a 	mov	r16,r2
 800a0c0:	8000a240 	call	8000a24 <__mulsi3>
 800a0c4:	a00b883a 	mov	r5,r20
 800a0c8:	e009883a 	mov	r4,fp
 800a0cc:	d8800415 	stw	r2,16(sp)
 800a0d0:	80009cc0 	call	80009cc <__umodsi3>
 800a0d4:	1004943a 	slli	r2,r2,16
 800a0d8:	da000417 	ldw	r8,16(sp)
 800a0dc:	bdffffcc 	andi	r23,r23,65535
 800a0e0:	b884b03a 	or	r2,r23,r2
 800a0e4:	d8c00217 	ldw	r3,8(sp)
 800a0e8:	1200062e 	bgeu	r2,r8,800a104 <__divdf3+0x424>
 800a0ec:	1585883a 	add	r2,r2,r22
 800a0f0:	813fffc4 	addi	r4,r16,-1
 800a0f4:	15810236 	bltu	r2,r22,800a500 <__divdf3+0x820>
 800a0f8:	1201012e 	bgeu	r2,r8,800a500 <__divdf3+0x820>
 800a0fc:	843fff84 	addi	r16,r16,-2
 800a100:	1585883a 	add	r2,r2,r22
 800a104:	8822943a 	slli	r17,r17,16
 800a108:	d9800017 	ldw	r6,0(sp)
 800a10c:	1211c83a 	sub	r8,r2,r8
 800a110:	8c22b03a 	or	r17,r17,r16
 800a114:	373fffcc 	andi	fp,r6,65535
 800a118:	8abfffcc 	andi	r10,r17,65535
 800a11c:	8820d43a 	srli	r16,r17,16
 800a120:	5009883a 	mov	r4,r10
 800a124:	e00b883a 	mov	r5,fp
 800a128:	302ed43a 	srli	r23,r6,16
 800a12c:	d8c00215 	stw	r3,8(sp)
 800a130:	da000415 	stw	r8,16(sp)
 800a134:	da800115 	stw	r10,4(sp)
 800a138:	8000a240 	call	8000a24 <__mulsi3>
 800a13c:	800b883a 	mov	r5,r16
 800a140:	e009883a 	mov	r4,fp
 800a144:	d8800515 	stw	r2,20(sp)
 800a148:	8000a240 	call	8000a24 <__mulsi3>
 800a14c:	8009883a 	mov	r4,r16
 800a150:	b80b883a 	mov	r5,r23
 800a154:	d8800315 	stw	r2,12(sp)
 800a158:	8000a240 	call	8000a24 <__mulsi3>
 800a15c:	da800117 	ldw	r10,4(sp)
 800a160:	b80b883a 	mov	r5,r23
 800a164:	1021883a 	mov	r16,r2
 800a168:	5009883a 	mov	r4,r10
 800a16c:	8000a240 	call	8000a24 <__mulsi3>
 800a170:	d9c00517 	ldw	r7,20(sp)
 800a174:	da400317 	ldw	r9,12(sp)
 800a178:	d8c00217 	ldw	r3,8(sp)
 800a17c:	3808d43a 	srli	r4,r7,16
 800a180:	1245883a 	add	r2,r2,r9
 800a184:	da000417 	ldw	r8,16(sp)
 800a188:	2085883a 	add	r2,r4,r2
 800a18c:	1240022e 	bgeu	r2,r9,800a198 <__divdf3+0x4b8>
 800a190:	01000074 	movhi	r4,1
 800a194:	8121883a 	add	r16,r16,r4
 800a198:	1008d43a 	srli	r4,r2,16
 800a19c:	1004943a 	slli	r2,r2,16
 800a1a0:	39ffffcc 	andi	r7,r7,65535
 800a1a4:	2409883a 	add	r4,r4,r16
 800a1a8:	11c5883a 	add	r2,r2,r7
 800a1ac:	4100bb36 	bltu	r8,r4,800a49c <__divdf3+0x7bc>
 800a1b0:	4100d726 	beq	r8,r4,800a510 <__divdf3+0x830>
 800a1b4:	4109c83a 	sub	r4,r8,r4
 800a1b8:	a8a1c83a 	sub	r16,r21,r2
 800a1bc:	ac2b803a 	cmpltu	r21,r21,r16
 800a1c0:	256bc83a 	sub	r21,r4,r21
 800a1c4:	b540d926 	beq	r22,r21,800a52c <__divdf3+0x84c>
 800a1c8:	a00b883a 	mov	r5,r20
 800a1cc:	a809883a 	mov	r4,r21
 800a1d0:	d8c00215 	stw	r3,8(sp)
 800a1d4:	80009680 	call	8000968 <__udivsi3>
 800a1d8:	100b883a 	mov	r5,r2
 800a1dc:	9009883a 	mov	r4,r18
 800a1e0:	d8800515 	stw	r2,20(sp)
 800a1e4:	8000a240 	call	8000a24 <__mulsi3>
 800a1e8:	a809883a 	mov	r4,r21
 800a1ec:	a00b883a 	mov	r5,r20
 800a1f0:	d8800415 	stw	r2,16(sp)
 800a1f4:	80009cc0 	call	80009cc <__umodsi3>
 800a1f8:	1004943a 	slli	r2,r2,16
 800a1fc:	8008d43a 	srli	r4,r16,16
 800a200:	da000417 	ldw	r8,16(sp)
 800a204:	d8c00217 	ldw	r3,8(sp)
 800a208:	2084b03a 	or	r2,r4,r2
 800a20c:	d9c00517 	ldw	r7,20(sp)
 800a210:	1200062e 	bgeu	r2,r8,800a22c <__divdf3+0x54c>
 800a214:	1585883a 	add	r2,r2,r22
 800a218:	393fffc4 	addi	r4,r7,-1
 800a21c:	1580c536 	bltu	r2,r22,800a534 <__divdf3+0x854>
 800a220:	1200c42e 	bgeu	r2,r8,800a534 <__divdf3+0x854>
 800a224:	39ffff84 	addi	r7,r7,-2
 800a228:	1585883a 	add	r2,r2,r22
 800a22c:	122bc83a 	sub	r21,r2,r8
 800a230:	a00b883a 	mov	r5,r20
 800a234:	a809883a 	mov	r4,r21
 800a238:	d8c00215 	stw	r3,8(sp)
 800a23c:	d9c00515 	stw	r7,20(sp)
 800a240:	80009680 	call	8000968 <__udivsi3>
 800a244:	9009883a 	mov	r4,r18
 800a248:	100b883a 	mov	r5,r2
 800a24c:	d8800415 	stw	r2,16(sp)
 800a250:	8000a240 	call	8000a24 <__mulsi3>
 800a254:	a809883a 	mov	r4,r21
 800a258:	a00b883a 	mov	r5,r20
 800a25c:	1025883a 	mov	r18,r2
 800a260:	80009cc0 	call	80009cc <__umodsi3>
 800a264:	1004943a 	slli	r2,r2,16
 800a268:	813fffcc 	andi	r4,r16,65535
 800a26c:	d8c00217 	ldw	r3,8(sp)
 800a270:	20a0b03a 	or	r16,r4,r2
 800a274:	d9c00517 	ldw	r7,20(sp)
 800a278:	da000417 	ldw	r8,16(sp)
 800a27c:	8480062e 	bgeu	r16,r18,800a298 <__divdf3+0x5b8>
 800a280:	85a1883a 	add	r16,r16,r22
 800a284:	40bfffc4 	addi	r2,r8,-1
 800a288:	8580ac36 	bltu	r16,r22,800a53c <__divdf3+0x85c>
 800a28c:	8480ab2e 	bgeu	r16,r18,800a53c <__divdf3+0x85c>
 800a290:	423fff84 	addi	r8,r8,-2
 800a294:	85a1883a 	add	r16,r16,r22
 800a298:	3804943a 	slli	r2,r7,16
 800a29c:	84a1c83a 	sub	r16,r16,r18
 800a2a0:	e009883a 	mov	r4,fp
 800a2a4:	1228b03a 	or	r20,r2,r8
 800a2a8:	a1ffffcc 	andi	r7,r20,65535
 800a2ac:	a024d43a 	srli	r18,r20,16
 800a2b0:	380b883a 	mov	r5,r7
 800a2b4:	d8c00215 	stw	r3,8(sp)
 800a2b8:	d9c00515 	stw	r7,20(sp)
 800a2bc:	8000a240 	call	8000a24 <__mulsi3>
 800a2c0:	900b883a 	mov	r5,r18
 800a2c4:	e009883a 	mov	r4,fp
 800a2c8:	102b883a 	mov	r21,r2
 800a2cc:	8000a240 	call	8000a24 <__mulsi3>
 800a2d0:	900b883a 	mov	r5,r18
 800a2d4:	b809883a 	mov	r4,r23
 800a2d8:	1039883a 	mov	fp,r2
 800a2dc:	8000a240 	call	8000a24 <__mulsi3>
 800a2e0:	d9c00517 	ldw	r7,20(sp)
 800a2e4:	b80b883a 	mov	r5,r23
 800a2e8:	1025883a 	mov	r18,r2
 800a2ec:	3809883a 	mov	r4,r7
 800a2f0:	8000a240 	call	8000a24 <__mulsi3>
 800a2f4:	a808d43a 	srli	r4,r21,16
 800a2f8:	1705883a 	add	r2,r2,fp
 800a2fc:	d8c00217 	ldw	r3,8(sp)
 800a300:	2085883a 	add	r2,r4,r2
 800a304:	1700022e 	bgeu	r2,fp,800a310 <__divdf3+0x630>
 800a308:	01000074 	movhi	r4,1
 800a30c:	9125883a 	add	r18,r18,r4
 800a310:	1008d43a 	srli	r4,r2,16
 800a314:	1004943a 	slli	r2,r2,16
 800a318:	ad7fffcc 	andi	r21,r21,65535
 800a31c:	2489883a 	add	r4,r4,r18
 800a320:	1545883a 	add	r2,r2,r21
 800a324:	81003836 	bltu	r16,r4,800a408 <__divdf3+0x728>
 800a328:	81003626 	beq	r16,r4,800a404 <__divdf3+0x724>
 800a32c:	a5000054 	ori	r20,r20,1
 800a330:	1880ffc4 	addi	r2,r3,1023
 800a334:	00bf2e0e 	bge	zero,r2,8009ff0 <__alt_data_end+0xfc009ff0>
 800a338:	a10001cc 	andi	r4,r20,7
 800a33c:	20000726 	beq	r4,zero,800a35c <__divdf3+0x67c>
 800a340:	a10003cc 	andi	r4,r20,15
 800a344:	01400104 	movi	r5,4
 800a348:	21400426 	beq	r4,r5,800a35c <__divdf3+0x67c>
 800a34c:	a149883a 	add	r4,r20,r5
 800a350:	2529803a 	cmpltu	r20,r4,r20
 800a354:	8d23883a 	add	r17,r17,r20
 800a358:	2029883a 	mov	r20,r4
 800a35c:	8900402c 	andhi	r4,r17,256
 800a360:	20000426 	beq	r4,zero,800a374 <__divdf3+0x694>
 800a364:	18810004 	addi	r2,r3,1024
 800a368:	00ffc034 	movhi	r3,65280
 800a36c:	18ffffc4 	addi	r3,r3,-1
 800a370:	88e2703a 	and	r17,r17,r3
 800a374:	00c1ff84 	movi	r3,2046
 800a378:	18beb416 	blt	r3,r2,8009e4c <__alt_data_end+0xfc009e4c>
 800a37c:	a028d0fa 	srli	r20,r20,3
 800a380:	882a977a 	slli	r21,r17,29
 800a384:	8820927a 	slli	r16,r17,9
 800a388:	1081ffcc 	andi	r2,r2,2047
 800a38c:	ad2ab03a 	or	r21,r21,r20
 800a390:	8020d33a 	srli	r16,r16,12
 800a394:	9900004c 	andi	r4,r19,1
 800a398:	003eb006 	br	8009e5c <__alt_data_end+0xfc009e5c>
 800a39c:	8080022c 	andhi	r2,r16,8
 800a3a0:	10001226 	beq	r2,zero,800a3ec <__divdf3+0x70c>
 800a3a4:	8880022c 	andhi	r2,r17,8
 800a3a8:	1000101e 	bne	r2,zero,800a3ec <__divdf3+0x70c>
 800a3ac:	00800434 	movhi	r2,16
 800a3b0:	8c000234 	orhi	r16,r17,8
 800a3b4:	10bfffc4 	addi	r2,r2,-1
 800a3b8:	b809883a 	mov	r4,r23
 800a3bc:	80a0703a 	and	r16,r16,r2
 800a3c0:	a02b883a 	mov	r21,r20
 800a3c4:	003f0806 	br	8009fe8 <__alt_data_end+0xfc009fe8>
 800a3c8:	008000c4 	movi	r2,3
 800a3cc:	3880b126 	beq	r7,r2,800a694 <__divdf3+0x9b4>
 800a3d0:	00800044 	movi	r2,1
 800a3d4:	38805b1e 	bne	r7,r2,800a544 <__divdf3+0x864>
 800a3d8:	e009883a 	mov	r4,fp
 800a3dc:	0005883a 	mov	r2,zero
 800a3e0:	0021883a 	mov	r16,zero
 800a3e4:	002b883a 	mov	r21,zero
 800a3e8:	003e9c06 	br	8009e5c <__alt_data_end+0xfc009e5c>
 800a3ec:	00800434 	movhi	r2,16
 800a3f0:	84000234 	orhi	r16,r16,8
 800a3f4:	10bfffc4 	addi	r2,r2,-1
 800a3f8:	b009883a 	mov	r4,r22
 800a3fc:	80a0703a 	and	r16,r16,r2
 800a400:	003ef906 	br	8009fe8 <__alt_data_end+0xfc009fe8>
 800a404:	103fca26 	beq	r2,zero,800a330 <__alt_data_end+0xfc00a330>
 800a408:	b421883a 	add	r16,r22,r16
 800a40c:	a17fffc4 	addi	r5,r20,-1
 800a410:	8580422e 	bgeu	r16,r22,800a51c <__divdf3+0x83c>
 800a414:	2829883a 	mov	r20,r5
 800a418:	813fc41e 	bne	r16,r4,800a32c <__alt_data_end+0xfc00a32c>
 800a41c:	d9800017 	ldw	r6,0(sp)
 800a420:	30bfc21e 	bne	r6,r2,800a32c <__alt_data_end+0xfc00a32c>
 800a424:	003fc206 	br	800a330 <__alt_data_end+0xfc00a330>
 800a428:	143ff604 	addi	r16,r2,-40
 800a42c:	8c20983a 	sll	r16,r17,r16
 800a430:	002b883a 	mov	r21,zero
 800a434:	003eb406 	br	8009f08 <__alt_data_end+0xfc009f08>
 800a438:	d9800215 	stw	r6,8(sp)
 800a43c:	d9c00515 	stw	r7,20(sp)
 800a440:	da000415 	stw	r8,16(sp)
 800a444:	800bc740 	call	800bc74 <__clzsi2>
 800a448:	10800804 	addi	r2,r2,32
 800a44c:	da000417 	ldw	r8,16(sp)
 800a450:	d9c00517 	ldw	r7,20(sp)
 800a454:	d9800217 	ldw	r6,8(sp)
 800a458:	003ea106 	br	8009ee0 <__alt_data_end+0xfc009ee0>
 800a45c:	147ff604 	addi	r17,r2,-40
 800a460:	3462983a 	sll	r17,r6,r17
 800a464:	0029883a 	mov	r20,zero
 800a468:	003ec906 	br	8009f90 <__alt_data_end+0xfc009f90>
 800a46c:	3009883a 	mov	r4,r6
 800a470:	d9400115 	stw	r5,4(sp)
 800a474:	d9800215 	stw	r6,8(sp)
 800a478:	da000415 	stw	r8,16(sp)
 800a47c:	da400315 	stw	r9,12(sp)
 800a480:	800bc740 	call	800bc74 <__clzsi2>
 800a484:	10800804 	addi	r2,r2,32
 800a488:	da400317 	ldw	r9,12(sp)
 800a48c:	da000417 	ldw	r8,16(sp)
 800a490:	d9800217 	ldw	r6,8(sp)
 800a494:	d9400117 	ldw	r5,4(sp)
 800a498:	003eb306 	br	8009f68 <__alt_data_end+0xfc009f68>
 800a49c:	d9800017 	ldw	r6,0(sp)
 800a4a0:	a9ab883a 	add	r21,r21,r6
 800a4a4:	a98b803a 	cmpltu	r5,r21,r6
 800a4a8:	2d8b883a 	add	r5,r5,r22
 800a4ac:	2a11883a 	add	r8,r5,r8
 800a4b0:	897fffc4 	addi	r5,r17,-1
 800a4b4:	b2000c2e 	bgeu	r22,r8,800a4e8 <__divdf3+0x808>
 800a4b8:	41003f36 	bltu	r8,r4,800a5b8 <__divdf3+0x8d8>
 800a4bc:	22006c26 	beq	r4,r8,800a670 <__divdf3+0x990>
 800a4c0:	4109c83a 	sub	r4,r8,r4
 800a4c4:	2823883a 	mov	r17,r5
 800a4c8:	003f3b06 	br	800a1b8 <__alt_data_end+0xfc00a1b8>
 800a4cc:	ad3ed336 	bltu	r21,r20,800a01c <__alt_data_end+0xfc00a01c>
 800a4d0:	a804d07a 	srli	r2,r21,1
 800a4d4:	802e97fa 	slli	r23,r16,31
 800a4d8:	a82a97fa 	slli	r21,r21,31
 800a4dc:	8020d07a 	srli	r16,r16,1
 800a4e0:	b8aeb03a 	or	r23,r23,r2
 800a4e4:	003ed006 	br	800a028 <__alt_data_end+0xfc00a028>
 800a4e8:	b23ff51e 	bne	r22,r8,800a4c0 <__alt_data_end+0xfc00a4c0>
 800a4ec:	d9800017 	ldw	r6,0(sp)
 800a4f0:	a9bff12e 	bgeu	r21,r6,800a4b8 <__alt_data_end+0xfc00a4b8>
 800a4f4:	b109c83a 	sub	r4,r22,r4
 800a4f8:	2823883a 	mov	r17,r5
 800a4fc:	003f2e06 	br	800a1b8 <__alt_data_end+0xfc00a1b8>
 800a500:	2021883a 	mov	r16,r4
 800a504:	003eff06 	br	800a104 <__alt_data_end+0xfc00a104>
 800a508:	2023883a 	mov	r17,r4
 800a50c:	003ee406 	br	800a0a0 <__alt_data_end+0xfc00a0a0>
 800a510:	a8bfe236 	bltu	r21,r2,800a49c <__alt_data_end+0xfc00a49c>
 800a514:	0009883a 	mov	r4,zero
 800a518:	003f2706 	br	800a1b8 <__alt_data_end+0xfc00a1b8>
 800a51c:	81002d36 	bltu	r16,r4,800a5d4 <__divdf3+0x8f4>
 800a520:	24005626 	beq	r4,r16,800a67c <__divdf3+0x99c>
 800a524:	2829883a 	mov	r20,r5
 800a528:	003f8006 	br	800a32c <__alt_data_end+0xfc00a32c>
 800a52c:	053fffc4 	movi	r20,-1
 800a530:	003f7f06 	br	800a330 <__alt_data_end+0xfc00a330>
 800a534:	200f883a 	mov	r7,r4
 800a538:	003f3c06 	br	800a22c <__alt_data_end+0xfc00a22c>
 800a53c:	1011883a 	mov	r8,r2
 800a540:	003f5506 	br	800a298 <__alt_data_end+0xfc00a298>
 800a544:	e027883a 	mov	r19,fp
 800a548:	003f7906 	br	800a330 <__alt_data_end+0xfc00a330>
 800a54c:	010007c4 	movi	r4,31
 800a550:	20c02816 	blt	r4,r3,800a5f4 <__divdf3+0x914>
 800a554:	00800804 	movi	r2,32
 800a558:	10c5c83a 	sub	r2,r2,r3
 800a55c:	888a983a 	sll	r5,r17,r2
 800a560:	a0c8d83a 	srl	r4,r20,r3
 800a564:	a084983a 	sll	r2,r20,r2
 800a568:	88e2d83a 	srl	r17,r17,r3
 800a56c:	2906b03a 	or	r3,r5,r4
 800a570:	1004c03a 	cmpne	r2,r2,zero
 800a574:	1886b03a 	or	r3,r3,r2
 800a578:	188001cc 	andi	r2,r3,7
 800a57c:	10000726 	beq	r2,zero,800a59c <__divdf3+0x8bc>
 800a580:	188003cc 	andi	r2,r3,15
 800a584:	01000104 	movi	r4,4
 800a588:	11000426 	beq	r2,r4,800a59c <__divdf3+0x8bc>
 800a58c:	1805883a 	mov	r2,r3
 800a590:	10c00104 	addi	r3,r2,4
 800a594:	1885803a 	cmpltu	r2,r3,r2
 800a598:	88a3883a 	add	r17,r17,r2
 800a59c:	8880202c 	andhi	r2,r17,128
 800a5a0:	10002926 	beq	r2,zero,800a648 <__divdf3+0x968>
 800a5a4:	9900004c 	andi	r4,r19,1
 800a5a8:	00800044 	movi	r2,1
 800a5ac:	0021883a 	mov	r16,zero
 800a5b0:	002b883a 	mov	r21,zero
 800a5b4:	003e2906 	br	8009e5c <__alt_data_end+0xfc009e5c>
 800a5b8:	d9800017 	ldw	r6,0(sp)
 800a5bc:	8c7fff84 	addi	r17,r17,-2
 800a5c0:	a9ab883a 	add	r21,r21,r6
 800a5c4:	a98b803a 	cmpltu	r5,r21,r6
 800a5c8:	2d8b883a 	add	r5,r5,r22
 800a5cc:	2a11883a 	add	r8,r5,r8
 800a5d0:	003ef806 	br	800a1b4 <__alt_data_end+0xfc00a1b4>
 800a5d4:	d9800017 	ldw	r6,0(sp)
 800a5d8:	318f883a 	add	r7,r6,r6
 800a5dc:	398b803a 	cmpltu	r5,r7,r6
 800a5e0:	2d8d883a 	add	r6,r5,r22
 800a5e4:	81a1883a 	add	r16,r16,r6
 800a5e8:	a17fff84 	addi	r5,r20,-2
 800a5ec:	d9c00015 	stw	r7,0(sp)
 800a5f0:	003f8806 	br	800a414 <__alt_data_end+0xfc00a414>
 800a5f4:	013ff844 	movi	r4,-31
 800a5f8:	2085c83a 	sub	r2,r4,r2
 800a5fc:	8888d83a 	srl	r4,r17,r2
 800a600:	00800804 	movi	r2,32
 800a604:	18802126 	beq	r3,r2,800a68c <__divdf3+0x9ac>
 800a608:	04001004 	movi	r16,64
 800a60c:	80c7c83a 	sub	r3,r16,r3
 800a610:	88e0983a 	sll	r16,r17,r3
 800a614:	8504b03a 	or	r2,r16,r20
 800a618:	1004c03a 	cmpne	r2,r2,zero
 800a61c:	2084b03a 	or	r2,r4,r2
 800a620:	144001cc 	andi	r17,r2,7
 800a624:	88000d1e 	bne	r17,zero,800a65c <__divdf3+0x97c>
 800a628:	0021883a 	mov	r16,zero
 800a62c:	102ad0fa 	srli	r21,r2,3
 800a630:	9900004c 	andi	r4,r19,1
 800a634:	0005883a 	mov	r2,zero
 800a638:	ac6ab03a 	or	r21,r21,r17
 800a63c:	003e0706 	br	8009e5c <__alt_data_end+0xfc009e5c>
 800a640:	1007883a 	mov	r3,r2
 800a644:	0023883a 	mov	r17,zero
 800a648:	8820927a 	slli	r16,r17,9
 800a64c:	1805883a 	mov	r2,r3
 800a650:	8822977a 	slli	r17,r17,29
 800a654:	8020d33a 	srli	r16,r16,12
 800a658:	003ff406 	br	800a62c <__alt_data_end+0xfc00a62c>
 800a65c:	10c003cc 	andi	r3,r2,15
 800a660:	01000104 	movi	r4,4
 800a664:	193ff626 	beq	r3,r4,800a640 <__alt_data_end+0xfc00a640>
 800a668:	0023883a 	mov	r17,zero
 800a66c:	003fc806 	br	800a590 <__alt_data_end+0xfc00a590>
 800a670:	a8bfd136 	bltu	r21,r2,800a5b8 <__alt_data_end+0xfc00a5b8>
 800a674:	2823883a 	mov	r17,r5
 800a678:	003fa606 	br	800a514 <__alt_data_end+0xfc00a514>
 800a67c:	d9800017 	ldw	r6,0(sp)
 800a680:	30bfd436 	bltu	r6,r2,800a5d4 <__alt_data_end+0xfc00a5d4>
 800a684:	2829883a 	mov	r20,r5
 800a688:	003f6406 	br	800a41c <__alt_data_end+0xfc00a41c>
 800a68c:	0021883a 	mov	r16,zero
 800a690:	003fe006 	br	800a614 <__alt_data_end+0xfc00a614>
 800a694:	00800434 	movhi	r2,16
 800a698:	8c000234 	orhi	r16,r17,8
 800a69c:	10bfffc4 	addi	r2,r2,-1
 800a6a0:	e009883a 	mov	r4,fp
 800a6a4:	80a0703a 	and	r16,r16,r2
 800a6a8:	a02b883a 	mov	r21,r20
 800a6ac:	003e4e06 	br	8009fe8 <__alt_data_end+0xfc009fe8>

0800a6b0 <__eqdf2>:
 800a6b0:	2804d53a 	srli	r2,r5,20
 800a6b4:	3806d53a 	srli	r3,r7,20
 800a6b8:	02000434 	movhi	r8,16
 800a6bc:	423fffc4 	addi	r8,r8,-1
 800a6c0:	1081ffcc 	andi	r2,r2,2047
 800a6c4:	0281ffc4 	movi	r10,2047
 800a6c8:	2a12703a 	and	r9,r5,r8
 800a6cc:	18c1ffcc 	andi	r3,r3,2047
 800a6d0:	3a10703a 	and	r8,r7,r8
 800a6d4:	280ad7fa 	srli	r5,r5,31
 800a6d8:	380ed7fa 	srli	r7,r7,31
 800a6dc:	12801026 	beq	r2,r10,800a720 <__eqdf2+0x70>
 800a6e0:	0281ffc4 	movi	r10,2047
 800a6e4:	1a800a26 	beq	r3,r10,800a710 <__eqdf2+0x60>
 800a6e8:	10c00226 	beq	r2,r3,800a6f4 <__eqdf2+0x44>
 800a6ec:	00800044 	movi	r2,1
 800a6f0:	f800283a 	ret
 800a6f4:	4a3ffd1e 	bne	r9,r8,800a6ec <__alt_data_end+0xfc00a6ec>
 800a6f8:	21bffc1e 	bne	r4,r6,800a6ec <__alt_data_end+0xfc00a6ec>
 800a6fc:	29c00c26 	beq	r5,r7,800a730 <__eqdf2+0x80>
 800a700:	103ffa1e 	bne	r2,zero,800a6ec <__alt_data_end+0xfc00a6ec>
 800a704:	2244b03a 	or	r2,r4,r9
 800a708:	1004c03a 	cmpne	r2,r2,zero
 800a70c:	f800283a 	ret
 800a710:	3214b03a 	or	r10,r6,r8
 800a714:	503ff426 	beq	r10,zero,800a6e8 <__alt_data_end+0xfc00a6e8>
 800a718:	00800044 	movi	r2,1
 800a71c:	f800283a 	ret
 800a720:	2254b03a 	or	r10,r4,r9
 800a724:	503fee26 	beq	r10,zero,800a6e0 <__alt_data_end+0xfc00a6e0>
 800a728:	00800044 	movi	r2,1
 800a72c:	f800283a 	ret
 800a730:	0005883a 	mov	r2,zero
 800a734:	f800283a 	ret

0800a738 <__gedf2>:
 800a738:	2804d53a 	srli	r2,r5,20
 800a73c:	3806d53a 	srli	r3,r7,20
 800a740:	02000434 	movhi	r8,16
 800a744:	423fffc4 	addi	r8,r8,-1
 800a748:	1081ffcc 	andi	r2,r2,2047
 800a74c:	0241ffc4 	movi	r9,2047
 800a750:	2a14703a 	and	r10,r5,r8
 800a754:	18c1ffcc 	andi	r3,r3,2047
 800a758:	3a10703a 	and	r8,r7,r8
 800a75c:	280ad7fa 	srli	r5,r5,31
 800a760:	380ed7fa 	srli	r7,r7,31
 800a764:	12401d26 	beq	r2,r9,800a7dc <__gedf2+0xa4>
 800a768:	0241ffc4 	movi	r9,2047
 800a76c:	1a401226 	beq	r3,r9,800a7b8 <__gedf2+0x80>
 800a770:	1000081e 	bne	r2,zero,800a794 <__gedf2+0x5c>
 800a774:	2296b03a 	or	r11,r4,r10
 800a778:	5813003a 	cmpeq	r9,r11,zero
 800a77c:	1800091e 	bne	r3,zero,800a7a4 <__gedf2+0x6c>
 800a780:	3218b03a 	or	r12,r6,r8
 800a784:	6000071e 	bne	r12,zero,800a7a4 <__gedf2+0x6c>
 800a788:	0005883a 	mov	r2,zero
 800a78c:	5800101e 	bne	r11,zero,800a7d0 <__gedf2+0x98>
 800a790:	f800283a 	ret
 800a794:	18000c1e 	bne	r3,zero,800a7c8 <__gedf2+0x90>
 800a798:	3212b03a 	or	r9,r6,r8
 800a79c:	48000c26 	beq	r9,zero,800a7d0 <__gedf2+0x98>
 800a7a0:	0013883a 	mov	r9,zero
 800a7a4:	39c03fcc 	andi	r7,r7,255
 800a7a8:	48000826 	beq	r9,zero,800a7cc <__gedf2+0x94>
 800a7ac:	38000926 	beq	r7,zero,800a7d4 <__gedf2+0x9c>
 800a7b0:	00800044 	movi	r2,1
 800a7b4:	f800283a 	ret
 800a7b8:	3212b03a 	or	r9,r6,r8
 800a7bc:	483fec26 	beq	r9,zero,800a770 <__alt_data_end+0xfc00a770>
 800a7c0:	00bfff84 	movi	r2,-2
 800a7c4:	f800283a 	ret
 800a7c8:	39c03fcc 	andi	r7,r7,255
 800a7cc:	29c00626 	beq	r5,r7,800a7e8 <__gedf2+0xb0>
 800a7d0:	283ff726 	beq	r5,zero,800a7b0 <__alt_data_end+0xfc00a7b0>
 800a7d4:	00bfffc4 	movi	r2,-1
 800a7d8:	f800283a 	ret
 800a7dc:	2292b03a 	or	r9,r4,r10
 800a7e0:	483fe126 	beq	r9,zero,800a768 <__alt_data_end+0xfc00a768>
 800a7e4:	003ff606 	br	800a7c0 <__alt_data_end+0xfc00a7c0>
 800a7e8:	18bff916 	blt	r3,r2,800a7d0 <__alt_data_end+0xfc00a7d0>
 800a7ec:	10c00316 	blt	r2,r3,800a7fc <__gedf2+0xc4>
 800a7f0:	42bff736 	bltu	r8,r10,800a7d0 <__alt_data_end+0xfc00a7d0>
 800a7f4:	52000326 	beq	r10,r8,800a804 <__gedf2+0xcc>
 800a7f8:	5200042e 	bgeu	r10,r8,800a80c <__gedf2+0xd4>
 800a7fc:	283fec1e 	bne	r5,zero,800a7b0 <__alt_data_end+0xfc00a7b0>
 800a800:	003ff406 	br	800a7d4 <__alt_data_end+0xfc00a7d4>
 800a804:	313ff236 	bltu	r6,r4,800a7d0 <__alt_data_end+0xfc00a7d0>
 800a808:	21bffc36 	bltu	r4,r6,800a7fc <__alt_data_end+0xfc00a7fc>
 800a80c:	0005883a 	mov	r2,zero
 800a810:	f800283a 	ret

0800a814 <__ledf2>:
 800a814:	2804d53a 	srli	r2,r5,20
 800a818:	3810d53a 	srli	r8,r7,20
 800a81c:	00c00434 	movhi	r3,16
 800a820:	18ffffc4 	addi	r3,r3,-1
 800a824:	1081ffcc 	andi	r2,r2,2047
 800a828:	0241ffc4 	movi	r9,2047
 800a82c:	28d4703a 	and	r10,r5,r3
 800a830:	4201ffcc 	andi	r8,r8,2047
 800a834:	38c6703a 	and	r3,r7,r3
 800a838:	280ad7fa 	srli	r5,r5,31
 800a83c:	380ed7fa 	srli	r7,r7,31
 800a840:	12401f26 	beq	r2,r9,800a8c0 <__ledf2+0xac>
 800a844:	0241ffc4 	movi	r9,2047
 800a848:	42401426 	beq	r8,r9,800a89c <__ledf2+0x88>
 800a84c:	1000091e 	bne	r2,zero,800a874 <__ledf2+0x60>
 800a850:	2296b03a 	or	r11,r4,r10
 800a854:	5813003a 	cmpeq	r9,r11,zero
 800a858:	29403fcc 	andi	r5,r5,255
 800a85c:	40000a1e 	bne	r8,zero,800a888 <__ledf2+0x74>
 800a860:	30d8b03a 	or	r12,r6,r3
 800a864:	6000081e 	bne	r12,zero,800a888 <__ledf2+0x74>
 800a868:	0005883a 	mov	r2,zero
 800a86c:	5800111e 	bne	r11,zero,800a8b4 <__ledf2+0xa0>
 800a870:	f800283a 	ret
 800a874:	29403fcc 	andi	r5,r5,255
 800a878:	40000c1e 	bne	r8,zero,800a8ac <__ledf2+0x98>
 800a87c:	30d2b03a 	or	r9,r6,r3
 800a880:	48000c26 	beq	r9,zero,800a8b4 <__ledf2+0xa0>
 800a884:	0013883a 	mov	r9,zero
 800a888:	39c03fcc 	andi	r7,r7,255
 800a88c:	48000826 	beq	r9,zero,800a8b0 <__ledf2+0x9c>
 800a890:	38001126 	beq	r7,zero,800a8d8 <__ledf2+0xc4>
 800a894:	00800044 	movi	r2,1
 800a898:	f800283a 	ret
 800a89c:	30d2b03a 	or	r9,r6,r3
 800a8a0:	483fea26 	beq	r9,zero,800a84c <__alt_data_end+0xfc00a84c>
 800a8a4:	00800084 	movi	r2,2
 800a8a8:	f800283a 	ret
 800a8ac:	39c03fcc 	andi	r7,r7,255
 800a8b0:	39400726 	beq	r7,r5,800a8d0 <__ledf2+0xbc>
 800a8b4:	2800081e 	bne	r5,zero,800a8d8 <__ledf2+0xc4>
 800a8b8:	00800044 	movi	r2,1
 800a8bc:	f800283a 	ret
 800a8c0:	2292b03a 	or	r9,r4,r10
 800a8c4:	483fdf26 	beq	r9,zero,800a844 <__alt_data_end+0xfc00a844>
 800a8c8:	00800084 	movi	r2,2
 800a8cc:	f800283a 	ret
 800a8d0:	4080030e 	bge	r8,r2,800a8e0 <__ledf2+0xcc>
 800a8d4:	383fef26 	beq	r7,zero,800a894 <__alt_data_end+0xfc00a894>
 800a8d8:	00bfffc4 	movi	r2,-1
 800a8dc:	f800283a 	ret
 800a8e0:	123feb16 	blt	r2,r8,800a890 <__alt_data_end+0xfc00a890>
 800a8e4:	1abff336 	bltu	r3,r10,800a8b4 <__alt_data_end+0xfc00a8b4>
 800a8e8:	50c00326 	beq	r10,r3,800a8f8 <__ledf2+0xe4>
 800a8ec:	50c0042e 	bgeu	r10,r3,800a900 <__ledf2+0xec>
 800a8f0:	283fe81e 	bne	r5,zero,800a894 <__alt_data_end+0xfc00a894>
 800a8f4:	003ff806 	br	800a8d8 <__alt_data_end+0xfc00a8d8>
 800a8f8:	313fee36 	bltu	r6,r4,800a8b4 <__alt_data_end+0xfc00a8b4>
 800a8fc:	21bffc36 	bltu	r4,r6,800a8f0 <__alt_data_end+0xfc00a8f0>
 800a900:	0005883a 	mov	r2,zero
 800a904:	f800283a 	ret

0800a908 <__muldf3>:
 800a908:	deffee04 	addi	sp,sp,-72
 800a90c:	dd000c15 	stw	r20,48(sp)
 800a910:	2828d53a 	srli	r20,r5,20
 800a914:	ddc00f15 	stw	r23,60(sp)
 800a918:	282ed7fa 	srli	r23,r5,31
 800a91c:	dc000815 	stw	r16,32(sp)
 800a920:	04000434 	movhi	r16,16
 800a924:	dcc00b15 	stw	r19,44(sp)
 800a928:	843fffc4 	addi	r16,r16,-1
 800a92c:	dfc01115 	stw	ra,68(sp)
 800a930:	df001015 	stw	fp,64(sp)
 800a934:	dd800e15 	stw	r22,56(sp)
 800a938:	dd400d15 	stw	r21,52(sp)
 800a93c:	dc800a15 	stw	r18,40(sp)
 800a940:	dc400915 	stw	r17,36(sp)
 800a944:	a501ffcc 	andi	r20,r20,2047
 800a948:	2c20703a 	and	r16,r5,r16
 800a94c:	b827883a 	mov	r19,r23
 800a950:	ba403fcc 	andi	r9,r23,255
 800a954:	a0006026 	beq	r20,zero,800aad8 <__muldf3+0x1d0>
 800a958:	0081ffc4 	movi	r2,2047
 800a95c:	202d883a 	mov	r22,r4
 800a960:	a0803626 	beq	r20,r2,800aa3c <__muldf3+0x134>
 800a964:	84000434 	orhi	r16,r16,16
 800a968:	200ad77a 	srli	r5,r4,29
 800a96c:	800490fa 	slli	r2,r16,3
 800a970:	202c90fa 	slli	r22,r4,3
 800a974:	a53f0044 	addi	r20,r20,-1023
 800a978:	28a0b03a 	or	r16,r5,r2
 800a97c:	002b883a 	mov	r21,zero
 800a980:	000b883a 	mov	r5,zero
 800a984:	3804d53a 	srli	r2,r7,20
 800a988:	3838d7fa 	srli	fp,r7,31
 800a98c:	04400434 	movhi	r17,16
 800a990:	8c7fffc4 	addi	r17,r17,-1
 800a994:	1081ffcc 	andi	r2,r2,2047
 800a998:	3025883a 	mov	r18,r6
 800a99c:	3c62703a 	and	r17,r7,r17
 800a9a0:	e2803fcc 	andi	r10,fp,255
 800a9a4:	10006d26 	beq	r2,zero,800ab5c <__muldf3+0x254>
 800a9a8:	00c1ffc4 	movi	r3,2047
 800a9ac:	10c06526 	beq	r2,r3,800ab44 <__muldf3+0x23c>
 800a9b0:	8c400434 	orhi	r17,r17,16
 800a9b4:	300ed77a 	srli	r7,r6,29
 800a9b8:	880690fa 	slli	r3,r17,3
 800a9bc:	302490fa 	slli	r18,r6,3
 800a9c0:	10bf0044 	addi	r2,r2,-1023
 800a9c4:	38e2b03a 	or	r17,r7,r3
 800a9c8:	000f883a 	mov	r7,zero
 800a9cc:	a087883a 	add	r3,r20,r2
 800a9d0:	010003c4 	movi	r4,15
 800a9d4:	3d44b03a 	or	r2,r7,r21
 800a9d8:	e5ccf03a 	xor	r6,fp,r23
 800a9dc:	1a000044 	addi	r8,r3,1
 800a9e0:	20809b36 	bltu	r4,r2,800ac50 <__muldf3+0x348>
 800a9e4:	100490ba 	slli	r2,r2,2
 800a9e8:	01020074 	movhi	r4,2049
 800a9ec:	212a7f04 	addi	r4,r4,-22020
 800a9f0:	1105883a 	add	r2,r2,r4
 800a9f4:	10800017 	ldw	r2,0(r2)
 800a9f8:	1000683a 	jmp	r2
 800a9fc:	0800ac50 	cmplti	zero,at,689
 800aa00:	0800aa5c 	xori	zero,at,681
 800aa04:	0800aa5c 	xori	zero,at,681
 800aa08:	0800aa58 	cmpnei	zero,at,681
 800aa0c:	0800ac2c 	andhi	zero,at,688
 800aa10:	0800ac2c 	andhi	zero,at,688
 800aa14:	0800ac14 	ori	zero,at,688
 800aa18:	0800aa58 	cmpnei	zero,at,681
 800aa1c:	0800ac2c 	andhi	zero,at,688
 800aa20:	0800ac14 	ori	zero,at,688
 800aa24:	0800ac2c 	andhi	zero,at,688
 800aa28:	0800aa58 	cmpnei	zero,at,681
 800aa2c:	0800ac3c 	xorhi	zero,at,688
 800aa30:	0800ac3c 	xorhi	zero,at,688
 800aa34:	0800ac3c 	xorhi	zero,at,688
 800aa38:	0800af9c 	xori	zero,at,702
 800aa3c:	2404b03a 	or	r2,r4,r16
 800aa40:	1000711e 	bne	r2,zero,800ac08 <__muldf3+0x300>
 800aa44:	05400204 	movi	r21,8
 800aa48:	0021883a 	mov	r16,zero
 800aa4c:	002d883a 	mov	r22,zero
 800aa50:	01400084 	movi	r5,2
 800aa54:	003fcb06 	br	800a984 <__alt_data_end+0xfc00a984>
 800aa58:	500d883a 	mov	r6,r10
 800aa5c:	00800084 	movi	r2,2
 800aa60:	38805926 	beq	r7,r2,800abc8 <__muldf3+0x2c0>
 800aa64:	008000c4 	movi	r2,3
 800aa68:	3881bb26 	beq	r7,r2,800b158 <__muldf3+0x850>
 800aa6c:	00800044 	movi	r2,1
 800aa70:	3881961e 	bne	r7,r2,800b0cc <__muldf3+0x7c4>
 800aa74:	3027883a 	mov	r19,r6
 800aa78:	0005883a 	mov	r2,zero
 800aa7c:	0021883a 	mov	r16,zero
 800aa80:	002d883a 	mov	r22,zero
 800aa84:	1004953a 	slli	r2,r2,20
 800aa88:	98c03fcc 	andi	r3,r19,255
 800aa8c:	04400434 	movhi	r17,16
 800aa90:	8c7fffc4 	addi	r17,r17,-1
 800aa94:	180697fa 	slli	r3,r3,31
 800aa98:	8460703a 	and	r16,r16,r17
 800aa9c:	80a0b03a 	or	r16,r16,r2
 800aaa0:	80c6b03a 	or	r3,r16,r3
 800aaa4:	b005883a 	mov	r2,r22
 800aaa8:	dfc01117 	ldw	ra,68(sp)
 800aaac:	df001017 	ldw	fp,64(sp)
 800aab0:	ddc00f17 	ldw	r23,60(sp)
 800aab4:	dd800e17 	ldw	r22,56(sp)
 800aab8:	dd400d17 	ldw	r21,52(sp)
 800aabc:	dd000c17 	ldw	r20,48(sp)
 800aac0:	dcc00b17 	ldw	r19,44(sp)
 800aac4:	dc800a17 	ldw	r18,40(sp)
 800aac8:	dc400917 	ldw	r17,36(sp)
 800aacc:	dc000817 	ldw	r16,32(sp)
 800aad0:	dec01204 	addi	sp,sp,72
 800aad4:	f800283a 	ret
 800aad8:	2404b03a 	or	r2,r4,r16
 800aadc:	202b883a 	mov	r21,r4
 800aae0:	10004426 	beq	r2,zero,800abf4 <__muldf3+0x2ec>
 800aae4:	80015126 	beq	r16,zero,800b02c <__muldf3+0x724>
 800aae8:	8009883a 	mov	r4,r16
 800aaec:	d9800715 	stw	r6,28(sp)
 800aaf0:	d9c00215 	stw	r7,8(sp)
 800aaf4:	da400415 	stw	r9,16(sp)
 800aaf8:	800bc740 	call	800bc74 <__clzsi2>
 800aafc:	d9800717 	ldw	r6,28(sp)
 800ab00:	d9c00217 	ldw	r7,8(sp)
 800ab04:	da400417 	ldw	r9,16(sp)
 800ab08:	113ffd44 	addi	r4,r2,-11
 800ab0c:	00c00704 	movi	r3,28
 800ab10:	19014216 	blt	r3,r4,800b01c <__muldf3+0x714>
 800ab14:	00c00744 	movi	r3,29
 800ab18:	15bffe04 	addi	r22,r2,-8
 800ab1c:	1907c83a 	sub	r3,r3,r4
 800ab20:	85a0983a 	sll	r16,r16,r22
 800ab24:	a8c6d83a 	srl	r3,r21,r3
 800ab28:	adac983a 	sll	r22,r21,r22
 800ab2c:	1c20b03a 	or	r16,r3,r16
 800ab30:	1080fcc4 	addi	r2,r2,1011
 800ab34:	00a9c83a 	sub	r20,zero,r2
 800ab38:	002b883a 	mov	r21,zero
 800ab3c:	000b883a 	mov	r5,zero
 800ab40:	003f9006 	br	800a984 <__alt_data_end+0xfc00a984>
 800ab44:	3446b03a 	or	r3,r6,r17
 800ab48:	1800281e 	bne	r3,zero,800abec <__muldf3+0x2e4>
 800ab4c:	0023883a 	mov	r17,zero
 800ab50:	0025883a 	mov	r18,zero
 800ab54:	01c00084 	movi	r7,2
 800ab58:	003f9c06 	br	800a9cc <__alt_data_end+0xfc00a9cc>
 800ab5c:	3446b03a 	or	r3,r6,r17
 800ab60:	18001e26 	beq	r3,zero,800abdc <__muldf3+0x2d4>
 800ab64:	88012126 	beq	r17,zero,800afec <__muldf3+0x6e4>
 800ab68:	8809883a 	mov	r4,r17
 800ab6c:	d9400215 	stw	r5,8(sp)
 800ab70:	d9800715 	stw	r6,28(sp)
 800ab74:	da400415 	stw	r9,16(sp)
 800ab78:	da800315 	stw	r10,12(sp)
 800ab7c:	800bc740 	call	800bc74 <__clzsi2>
 800ab80:	d9400217 	ldw	r5,8(sp)
 800ab84:	d9800717 	ldw	r6,28(sp)
 800ab88:	da400417 	ldw	r9,16(sp)
 800ab8c:	da800317 	ldw	r10,12(sp)
 800ab90:	113ffd44 	addi	r4,r2,-11
 800ab94:	00c00704 	movi	r3,28
 800ab98:	19011016 	blt	r3,r4,800afdc <__muldf3+0x6d4>
 800ab9c:	00c00744 	movi	r3,29
 800aba0:	14bffe04 	addi	r18,r2,-8
 800aba4:	1907c83a 	sub	r3,r3,r4
 800aba8:	8ca2983a 	sll	r17,r17,r18
 800abac:	30c6d83a 	srl	r3,r6,r3
 800abb0:	34a4983a 	sll	r18,r6,r18
 800abb4:	1c62b03a 	or	r17,r3,r17
 800abb8:	1080fcc4 	addi	r2,r2,1011
 800abbc:	0085c83a 	sub	r2,zero,r2
 800abc0:	000f883a 	mov	r7,zero
 800abc4:	003f8106 	br	800a9cc <__alt_data_end+0xfc00a9cc>
 800abc8:	3027883a 	mov	r19,r6
 800abcc:	0081ffc4 	movi	r2,2047
 800abd0:	0021883a 	mov	r16,zero
 800abd4:	002d883a 	mov	r22,zero
 800abd8:	003faa06 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800abdc:	0023883a 	mov	r17,zero
 800abe0:	0025883a 	mov	r18,zero
 800abe4:	01c00044 	movi	r7,1
 800abe8:	003f7806 	br	800a9cc <__alt_data_end+0xfc00a9cc>
 800abec:	01c000c4 	movi	r7,3
 800abf0:	003f7606 	br	800a9cc <__alt_data_end+0xfc00a9cc>
 800abf4:	05400104 	movi	r21,4
 800abf8:	0021883a 	mov	r16,zero
 800abfc:	002d883a 	mov	r22,zero
 800ac00:	01400044 	movi	r5,1
 800ac04:	003f5f06 	br	800a984 <__alt_data_end+0xfc00a984>
 800ac08:	05400304 	movi	r21,12
 800ac0c:	014000c4 	movi	r5,3
 800ac10:	003f5c06 	br	800a984 <__alt_data_end+0xfc00a984>
 800ac14:	04000434 	movhi	r16,16
 800ac18:	0027883a 	mov	r19,zero
 800ac1c:	843fffc4 	addi	r16,r16,-1
 800ac20:	05bfffc4 	movi	r22,-1
 800ac24:	0081ffc4 	movi	r2,2047
 800ac28:	003f9606 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800ac2c:	8023883a 	mov	r17,r16
 800ac30:	b025883a 	mov	r18,r22
 800ac34:	280f883a 	mov	r7,r5
 800ac38:	003f8806 	br	800aa5c <__alt_data_end+0xfc00aa5c>
 800ac3c:	8023883a 	mov	r17,r16
 800ac40:	b025883a 	mov	r18,r22
 800ac44:	480d883a 	mov	r6,r9
 800ac48:	280f883a 	mov	r7,r5
 800ac4c:	003f8306 	br	800aa5c <__alt_data_end+0xfc00aa5c>
 800ac50:	b026d43a 	srli	r19,r22,16
 800ac54:	902ed43a 	srli	r23,r18,16
 800ac58:	b5bfffcc 	andi	r22,r22,65535
 800ac5c:	94bfffcc 	andi	r18,r18,65535
 800ac60:	b00b883a 	mov	r5,r22
 800ac64:	9009883a 	mov	r4,r18
 800ac68:	d8c00515 	stw	r3,20(sp)
 800ac6c:	d9800715 	stw	r6,28(sp)
 800ac70:	da000615 	stw	r8,24(sp)
 800ac74:	8000a240 	call	8000a24 <__mulsi3>
 800ac78:	980b883a 	mov	r5,r19
 800ac7c:	9009883a 	mov	r4,r18
 800ac80:	1029883a 	mov	r20,r2
 800ac84:	8000a240 	call	8000a24 <__mulsi3>
 800ac88:	b80b883a 	mov	r5,r23
 800ac8c:	9809883a 	mov	r4,r19
 800ac90:	102b883a 	mov	r21,r2
 800ac94:	8000a240 	call	8000a24 <__mulsi3>
 800ac98:	b809883a 	mov	r4,r23
 800ac9c:	b00b883a 	mov	r5,r22
 800aca0:	1039883a 	mov	fp,r2
 800aca4:	8000a240 	call	8000a24 <__mulsi3>
 800aca8:	a008d43a 	srli	r4,r20,16
 800acac:	1545883a 	add	r2,r2,r21
 800acb0:	d8c00517 	ldw	r3,20(sp)
 800acb4:	2085883a 	add	r2,r4,r2
 800acb8:	d9800717 	ldw	r6,28(sp)
 800acbc:	da000617 	ldw	r8,24(sp)
 800acc0:	1540022e 	bgeu	r2,r21,800accc <__muldf3+0x3c4>
 800acc4:	01000074 	movhi	r4,1
 800acc8:	e139883a 	add	fp,fp,r4
 800accc:	100e943a 	slli	r7,r2,16
 800acd0:	1004d43a 	srli	r2,r2,16
 800acd4:	882ad43a 	srli	r21,r17,16
 800acd8:	a53fffcc 	andi	r20,r20,65535
 800acdc:	8c7fffcc 	andi	r17,r17,65535
 800ace0:	3d29883a 	add	r20,r7,r20
 800ace4:	b00b883a 	mov	r5,r22
 800ace8:	8809883a 	mov	r4,r17
 800acec:	d8c00515 	stw	r3,20(sp)
 800acf0:	d9800715 	stw	r6,28(sp)
 800acf4:	da000615 	stw	r8,24(sp)
 800acf8:	dd000115 	stw	r20,4(sp)
 800acfc:	d8800015 	stw	r2,0(sp)
 800ad00:	8000a240 	call	8000a24 <__mulsi3>
 800ad04:	980b883a 	mov	r5,r19
 800ad08:	8809883a 	mov	r4,r17
 800ad0c:	d8800215 	stw	r2,8(sp)
 800ad10:	8000a240 	call	8000a24 <__mulsi3>
 800ad14:	9809883a 	mov	r4,r19
 800ad18:	a80b883a 	mov	r5,r21
 800ad1c:	1029883a 	mov	r20,r2
 800ad20:	8000a240 	call	8000a24 <__mulsi3>
 800ad24:	b00b883a 	mov	r5,r22
 800ad28:	a809883a 	mov	r4,r21
 800ad2c:	d8800415 	stw	r2,16(sp)
 800ad30:	8000a240 	call	8000a24 <__mulsi3>
 800ad34:	d9c00217 	ldw	r7,8(sp)
 800ad38:	1505883a 	add	r2,r2,r20
 800ad3c:	d8c00517 	ldw	r3,20(sp)
 800ad40:	3826d43a 	srli	r19,r7,16
 800ad44:	d9800717 	ldw	r6,28(sp)
 800ad48:	da000617 	ldw	r8,24(sp)
 800ad4c:	9885883a 	add	r2,r19,r2
 800ad50:	da400417 	ldw	r9,16(sp)
 800ad54:	1500022e 	bgeu	r2,r20,800ad60 <__muldf3+0x458>
 800ad58:	01000074 	movhi	r4,1
 800ad5c:	4913883a 	add	r9,r9,r4
 800ad60:	1028d43a 	srli	r20,r2,16
 800ad64:	1004943a 	slli	r2,r2,16
 800ad68:	802cd43a 	srli	r22,r16,16
 800ad6c:	843fffcc 	andi	r16,r16,65535
 800ad70:	3cffffcc 	andi	r19,r7,65535
 800ad74:	9009883a 	mov	r4,r18
 800ad78:	800b883a 	mov	r5,r16
 800ad7c:	a269883a 	add	r20,r20,r9
 800ad80:	d8c00515 	stw	r3,20(sp)
 800ad84:	d9800715 	stw	r6,28(sp)
 800ad88:	da000615 	stw	r8,24(sp)
 800ad8c:	14e7883a 	add	r19,r2,r19
 800ad90:	8000a240 	call	8000a24 <__mulsi3>
 800ad94:	9009883a 	mov	r4,r18
 800ad98:	b00b883a 	mov	r5,r22
 800ad9c:	d8800315 	stw	r2,12(sp)
 800ada0:	8000a240 	call	8000a24 <__mulsi3>
 800ada4:	b809883a 	mov	r4,r23
 800ada8:	b00b883a 	mov	r5,r22
 800adac:	d8800215 	stw	r2,8(sp)
 800adb0:	8000a240 	call	8000a24 <__mulsi3>
 800adb4:	b80b883a 	mov	r5,r23
 800adb8:	8009883a 	mov	r4,r16
 800adbc:	d8800415 	stw	r2,16(sp)
 800adc0:	8000a240 	call	8000a24 <__mulsi3>
 800adc4:	da800317 	ldw	r10,12(sp)
 800adc8:	d9c00217 	ldw	r7,8(sp)
 800adcc:	d9000017 	ldw	r4,0(sp)
 800add0:	502ed43a 	srli	r23,r10,16
 800add4:	11c5883a 	add	r2,r2,r7
 800add8:	24e5883a 	add	r18,r4,r19
 800addc:	b885883a 	add	r2,r23,r2
 800ade0:	d8c00517 	ldw	r3,20(sp)
 800ade4:	d9800717 	ldw	r6,28(sp)
 800ade8:	da000617 	ldw	r8,24(sp)
 800adec:	da400417 	ldw	r9,16(sp)
 800adf0:	11c0022e 	bgeu	r2,r7,800adfc <__muldf3+0x4f4>
 800adf4:	01000074 	movhi	r4,1
 800adf8:	4913883a 	add	r9,r9,r4
 800adfc:	100ed43a 	srli	r7,r2,16
 800ae00:	1004943a 	slli	r2,r2,16
 800ae04:	55ffffcc 	andi	r23,r10,65535
 800ae08:	3a53883a 	add	r9,r7,r9
 800ae0c:	8809883a 	mov	r4,r17
 800ae10:	800b883a 	mov	r5,r16
 800ae14:	d8c00515 	stw	r3,20(sp)
 800ae18:	d9800715 	stw	r6,28(sp)
 800ae1c:	da000615 	stw	r8,24(sp)
 800ae20:	da400415 	stw	r9,16(sp)
 800ae24:	15ef883a 	add	r23,r2,r23
 800ae28:	8000a240 	call	8000a24 <__mulsi3>
 800ae2c:	8809883a 	mov	r4,r17
 800ae30:	b00b883a 	mov	r5,r22
 800ae34:	d8800215 	stw	r2,8(sp)
 800ae38:	8000a240 	call	8000a24 <__mulsi3>
 800ae3c:	b00b883a 	mov	r5,r22
 800ae40:	a809883a 	mov	r4,r21
 800ae44:	d8800315 	stw	r2,12(sp)
 800ae48:	8000a240 	call	8000a24 <__mulsi3>
 800ae4c:	8009883a 	mov	r4,r16
 800ae50:	a80b883a 	mov	r5,r21
 800ae54:	1023883a 	mov	r17,r2
 800ae58:	8000a240 	call	8000a24 <__mulsi3>
 800ae5c:	d9c00217 	ldw	r7,8(sp)
 800ae60:	da800317 	ldw	r10,12(sp)
 800ae64:	d8c00517 	ldw	r3,20(sp)
 800ae68:	3808d43a 	srli	r4,r7,16
 800ae6c:	1285883a 	add	r2,r2,r10
 800ae70:	d9800717 	ldw	r6,28(sp)
 800ae74:	2085883a 	add	r2,r4,r2
 800ae78:	da000617 	ldw	r8,24(sp)
 800ae7c:	da400417 	ldw	r9,16(sp)
 800ae80:	1280022e 	bgeu	r2,r10,800ae8c <__muldf3+0x584>
 800ae84:	01000074 	movhi	r4,1
 800ae88:	8923883a 	add	r17,r17,r4
 800ae8c:	1008943a 	slli	r4,r2,16
 800ae90:	39ffffcc 	andi	r7,r7,65535
 800ae94:	e4b9883a 	add	fp,fp,r18
 800ae98:	21cf883a 	add	r7,r4,r7
 800ae9c:	e4e7803a 	cmpltu	r19,fp,r19
 800aea0:	3d0f883a 	add	r7,r7,r20
 800aea4:	bf39883a 	add	fp,r23,fp
 800aea8:	99c9883a 	add	r4,r19,r7
 800aeac:	e5ef803a 	cmpltu	r23,fp,r23
 800aeb0:	490b883a 	add	r5,r9,r4
 800aeb4:	1004d43a 	srli	r2,r2,16
 800aeb8:	b965883a 	add	r18,r23,r5
 800aebc:	24c9803a 	cmpltu	r4,r4,r19
 800aec0:	3d29803a 	cmpltu	r20,r7,r20
 800aec4:	a128b03a 	or	r20,r20,r4
 800aec8:	95ef803a 	cmpltu	r23,r18,r23
 800aecc:	2a53803a 	cmpltu	r9,r5,r9
 800aed0:	a0a9883a 	add	r20,r20,r2
 800aed4:	4deeb03a 	or	r23,r9,r23
 800aed8:	a5ef883a 	add	r23,r20,r23
 800aedc:	bc63883a 	add	r17,r23,r17
 800aee0:	e004927a 	slli	r2,fp,9
 800aee4:	d9000117 	ldw	r4,4(sp)
 800aee8:	882e927a 	slli	r23,r17,9
 800aeec:	9022d5fa 	srli	r17,r18,23
 800aef0:	e038d5fa 	srli	fp,fp,23
 800aef4:	1104b03a 	or	r2,r2,r4
 800aef8:	9024927a 	slli	r18,r18,9
 800aefc:	1004c03a 	cmpne	r2,r2,zero
 800af00:	bc62b03a 	or	r17,r23,r17
 800af04:	1738b03a 	or	fp,r2,fp
 800af08:	8880402c 	andhi	r2,r17,256
 800af0c:	e4a4b03a 	or	r18,fp,r18
 800af10:	10000726 	beq	r2,zero,800af30 <__muldf3+0x628>
 800af14:	9006d07a 	srli	r3,r18,1
 800af18:	880497fa 	slli	r2,r17,31
 800af1c:	9480004c 	andi	r18,r18,1
 800af20:	8822d07a 	srli	r17,r17,1
 800af24:	1ca4b03a 	or	r18,r3,r18
 800af28:	14a4b03a 	or	r18,r2,r18
 800af2c:	4007883a 	mov	r3,r8
 800af30:	1880ffc4 	addi	r2,r3,1023
 800af34:	0080460e 	bge	zero,r2,800b050 <__muldf3+0x748>
 800af38:	910001cc 	andi	r4,r18,7
 800af3c:	20000726 	beq	r4,zero,800af5c <__muldf3+0x654>
 800af40:	910003cc 	andi	r4,r18,15
 800af44:	01400104 	movi	r5,4
 800af48:	21400426 	beq	r4,r5,800af5c <__muldf3+0x654>
 800af4c:	9149883a 	add	r4,r18,r5
 800af50:	24a5803a 	cmpltu	r18,r4,r18
 800af54:	8ca3883a 	add	r17,r17,r18
 800af58:	2025883a 	mov	r18,r4
 800af5c:	8900402c 	andhi	r4,r17,256
 800af60:	20000426 	beq	r4,zero,800af74 <__muldf3+0x66c>
 800af64:	18810004 	addi	r2,r3,1024
 800af68:	00ffc034 	movhi	r3,65280
 800af6c:	18ffffc4 	addi	r3,r3,-1
 800af70:	88e2703a 	and	r17,r17,r3
 800af74:	00c1ff84 	movi	r3,2046
 800af78:	18bf1316 	blt	r3,r2,800abc8 <__alt_data_end+0xfc00abc8>
 800af7c:	882c977a 	slli	r22,r17,29
 800af80:	9024d0fa 	srli	r18,r18,3
 800af84:	8822927a 	slli	r17,r17,9
 800af88:	1081ffcc 	andi	r2,r2,2047
 800af8c:	b4acb03a 	or	r22,r22,r18
 800af90:	8820d33a 	srli	r16,r17,12
 800af94:	3027883a 	mov	r19,r6
 800af98:	003eba06 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800af9c:	8080022c 	andhi	r2,r16,8
 800afa0:	10000926 	beq	r2,zero,800afc8 <__muldf3+0x6c0>
 800afa4:	8880022c 	andhi	r2,r17,8
 800afa8:	1000071e 	bne	r2,zero,800afc8 <__muldf3+0x6c0>
 800afac:	00800434 	movhi	r2,16
 800afb0:	8c000234 	orhi	r16,r17,8
 800afb4:	10bfffc4 	addi	r2,r2,-1
 800afb8:	e027883a 	mov	r19,fp
 800afbc:	80a0703a 	and	r16,r16,r2
 800afc0:	902d883a 	mov	r22,r18
 800afc4:	003f1706 	br	800ac24 <__alt_data_end+0xfc00ac24>
 800afc8:	00800434 	movhi	r2,16
 800afcc:	84000234 	orhi	r16,r16,8
 800afd0:	10bfffc4 	addi	r2,r2,-1
 800afd4:	80a0703a 	and	r16,r16,r2
 800afd8:	003f1206 	br	800ac24 <__alt_data_end+0xfc00ac24>
 800afdc:	147ff604 	addi	r17,r2,-40
 800afe0:	3462983a 	sll	r17,r6,r17
 800afe4:	0025883a 	mov	r18,zero
 800afe8:	003ef306 	br	800abb8 <__alt_data_end+0xfc00abb8>
 800afec:	3009883a 	mov	r4,r6
 800aff0:	d9400215 	stw	r5,8(sp)
 800aff4:	d9800715 	stw	r6,28(sp)
 800aff8:	da400415 	stw	r9,16(sp)
 800affc:	da800315 	stw	r10,12(sp)
 800b000:	800bc740 	call	800bc74 <__clzsi2>
 800b004:	10800804 	addi	r2,r2,32
 800b008:	da800317 	ldw	r10,12(sp)
 800b00c:	da400417 	ldw	r9,16(sp)
 800b010:	d9800717 	ldw	r6,28(sp)
 800b014:	d9400217 	ldw	r5,8(sp)
 800b018:	003edd06 	br	800ab90 <__alt_data_end+0xfc00ab90>
 800b01c:	143ff604 	addi	r16,r2,-40
 800b020:	ac20983a 	sll	r16,r21,r16
 800b024:	002d883a 	mov	r22,zero
 800b028:	003ec106 	br	800ab30 <__alt_data_end+0xfc00ab30>
 800b02c:	d9800715 	stw	r6,28(sp)
 800b030:	d9c00215 	stw	r7,8(sp)
 800b034:	da400415 	stw	r9,16(sp)
 800b038:	800bc740 	call	800bc74 <__clzsi2>
 800b03c:	10800804 	addi	r2,r2,32
 800b040:	da400417 	ldw	r9,16(sp)
 800b044:	d9c00217 	ldw	r7,8(sp)
 800b048:	d9800717 	ldw	r6,28(sp)
 800b04c:	003eae06 	br	800ab08 <__alt_data_end+0xfc00ab08>
 800b050:	00c00044 	movi	r3,1
 800b054:	1887c83a 	sub	r3,r3,r2
 800b058:	01000e04 	movi	r4,56
 800b05c:	20fe8516 	blt	r4,r3,800aa74 <__alt_data_end+0xfc00aa74>
 800b060:	010007c4 	movi	r4,31
 800b064:	20c01b16 	blt	r4,r3,800b0d4 <__muldf3+0x7cc>
 800b068:	00800804 	movi	r2,32
 800b06c:	10c5c83a 	sub	r2,r2,r3
 800b070:	888a983a 	sll	r5,r17,r2
 800b074:	90c8d83a 	srl	r4,r18,r3
 800b078:	9084983a 	sll	r2,r18,r2
 800b07c:	88e2d83a 	srl	r17,r17,r3
 800b080:	2906b03a 	or	r3,r5,r4
 800b084:	1004c03a 	cmpne	r2,r2,zero
 800b088:	1886b03a 	or	r3,r3,r2
 800b08c:	188001cc 	andi	r2,r3,7
 800b090:	10000726 	beq	r2,zero,800b0b0 <__muldf3+0x7a8>
 800b094:	188003cc 	andi	r2,r3,15
 800b098:	01000104 	movi	r4,4
 800b09c:	11000426 	beq	r2,r4,800b0b0 <__muldf3+0x7a8>
 800b0a0:	1805883a 	mov	r2,r3
 800b0a4:	10c00104 	addi	r3,r2,4
 800b0a8:	1885803a 	cmpltu	r2,r3,r2
 800b0ac:	88a3883a 	add	r17,r17,r2
 800b0b0:	8880202c 	andhi	r2,r17,128
 800b0b4:	10001c26 	beq	r2,zero,800b128 <__muldf3+0x820>
 800b0b8:	3027883a 	mov	r19,r6
 800b0bc:	00800044 	movi	r2,1
 800b0c0:	0021883a 	mov	r16,zero
 800b0c4:	002d883a 	mov	r22,zero
 800b0c8:	003e6e06 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800b0cc:	4007883a 	mov	r3,r8
 800b0d0:	003f9706 	br	800af30 <__alt_data_end+0xfc00af30>
 800b0d4:	017ff844 	movi	r5,-31
 800b0d8:	2885c83a 	sub	r2,r5,r2
 800b0dc:	888ad83a 	srl	r5,r17,r2
 800b0e0:	00800804 	movi	r2,32
 800b0e4:	18801a26 	beq	r3,r2,800b150 <__muldf3+0x848>
 800b0e8:	01001004 	movi	r4,64
 800b0ec:	20c7c83a 	sub	r3,r4,r3
 800b0f0:	88e2983a 	sll	r17,r17,r3
 800b0f4:	8ca4b03a 	or	r18,r17,r18
 800b0f8:	9004c03a 	cmpne	r2,r18,zero
 800b0fc:	2884b03a 	or	r2,r5,r2
 800b100:	144001cc 	andi	r17,r2,7
 800b104:	88000d1e 	bne	r17,zero,800b13c <__muldf3+0x834>
 800b108:	0021883a 	mov	r16,zero
 800b10c:	102cd0fa 	srli	r22,r2,3
 800b110:	3027883a 	mov	r19,r6
 800b114:	0005883a 	mov	r2,zero
 800b118:	b46cb03a 	or	r22,r22,r17
 800b11c:	003e5906 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800b120:	1007883a 	mov	r3,r2
 800b124:	0023883a 	mov	r17,zero
 800b128:	8820927a 	slli	r16,r17,9
 800b12c:	1805883a 	mov	r2,r3
 800b130:	8822977a 	slli	r17,r17,29
 800b134:	8020d33a 	srli	r16,r16,12
 800b138:	003ff406 	br	800b10c <__alt_data_end+0xfc00b10c>
 800b13c:	10c003cc 	andi	r3,r2,15
 800b140:	01000104 	movi	r4,4
 800b144:	193ff626 	beq	r3,r4,800b120 <__alt_data_end+0xfc00b120>
 800b148:	0023883a 	mov	r17,zero
 800b14c:	003fd506 	br	800b0a4 <__alt_data_end+0xfc00b0a4>
 800b150:	0023883a 	mov	r17,zero
 800b154:	003fe706 	br	800b0f4 <__alt_data_end+0xfc00b0f4>
 800b158:	00800434 	movhi	r2,16
 800b15c:	8c000234 	orhi	r16,r17,8
 800b160:	10bfffc4 	addi	r2,r2,-1
 800b164:	3027883a 	mov	r19,r6
 800b168:	80a0703a 	and	r16,r16,r2
 800b16c:	902d883a 	mov	r22,r18
 800b170:	003eac06 	br	800ac24 <__alt_data_end+0xfc00ac24>

0800b174 <__subdf3>:
 800b174:	02000434 	movhi	r8,16
 800b178:	423fffc4 	addi	r8,r8,-1
 800b17c:	defffb04 	addi	sp,sp,-20
 800b180:	2a14703a 	and	r10,r5,r8
 800b184:	3812d53a 	srli	r9,r7,20
 800b188:	3a10703a 	and	r8,r7,r8
 800b18c:	2006d77a 	srli	r3,r4,29
 800b190:	3004d77a 	srli	r2,r6,29
 800b194:	dc000015 	stw	r16,0(sp)
 800b198:	501490fa 	slli	r10,r10,3
 800b19c:	2820d53a 	srli	r16,r5,20
 800b1a0:	401090fa 	slli	r8,r8,3
 800b1a4:	dc800215 	stw	r18,8(sp)
 800b1a8:	dc400115 	stw	r17,4(sp)
 800b1ac:	dfc00415 	stw	ra,16(sp)
 800b1b0:	202290fa 	slli	r17,r4,3
 800b1b4:	dcc00315 	stw	r19,12(sp)
 800b1b8:	4a41ffcc 	andi	r9,r9,2047
 800b1bc:	0101ffc4 	movi	r4,2047
 800b1c0:	2824d7fa 	srli	r18,r5,31
 800b1c4:	8401ffcc 	andi	r16,r16,2047
 800b1c8:	50c6b03a 	or	r3,r10,r3
 800b1cc:	380ed7fa 	srli	r7,r7,31
 800b1d0:	408ab03a 	or	r5,r8,r2
 800b1d4:	300c90fa 	slli	r6,r6,3
 800b1d8:	49009626 	beq	r9,r4,800b434 <__subdf3+0x2c0>
 800b1dc:	39c0005c 	xori	r7,r7,1
 800b1e0:	8245c83a 	sub	r2,r16,r9
 800b1e4:	3c807426 	beq	r7,r18,800b3b8 <__subdf3+0x244>
 800b1e8:	0080af0e 	bge	zero,r2,800b4a8 <__subdf3+0x334>
 800b1ec:	48002a1e 	bne	r9,zero,800b298 <__subdf3+0x124>
 800b1f0:	2988b03a 	or	r4,r5,r6
 800b1f4:	20009a1e 	bne	r4,zero,800b460 <__subdf3+0x2ec>
 800b1f8:	888001cc 	andi	r2,r17,7
 800b1fc:	10000726 	beq	r2,zero,800b21c <__subdf3+0xa8>
 800b200:	888003cc 	andi	r2,r17,15
 800b204:	01000104 	movi	r4,4
 800b208:	11000426 	beq	r2,r4,800b21c <__subdf3+0xa8>
 800b20c:	890b883a 	add	r5,r17,r4
 800b210:	2c63803a 	cmpltu	r17,r5,r17
 800b214:	1c47883a 	add	r3,r3,r17
 800b218:	2823883a 	mov	r17,r5
 800b21c:	1880202c 	andhi	r2,r3,128
 800b220:	10005926 	beq	r2,zero,800b388 <__subdf3+0x214>
 800b224:	84000044 	addi	r16,r16,1
 800b228:	0081ffc4 	movi	r2,2047
 800b22c:	8080be26 	beq	r16,r2,800b528 <__subdf3+0x3b4>
 800b230:	017fe034 	movhi	r5,65408
 800b234:	297fffc4 	addi	r5,r5,-1
 800b238:	1946703a 	and	r3,r3,r5
 800b23c:	1804977a 	slli	r2,r3,29
 800b240:	1806927a 	slli	r3,r3,9
 800b244:	8822d0fa 	srli	r17,r17,3
 800b248:	8401ffcc 	andi	r16,r16,2047
 800b24c:	180ad33a 	srli	r5,r3,12
 800b250:	9100004c 	andi	r4,r18,1
 800b254:	1444b03a 	or	r2,r2,r17
 800b258:	80c1ffcc 	andi	r3,r16,2047
 800b25c:	1820953a 	slli	r16,r3,20
 800b260:	20c03fcc 	andi	r3,r4,255
 800b264:	180897fa 	slli	r4,r3,31
 800b268:	00c00434 	movhi	r3,16
 800b26c:	18ffffc4 	addi	r3,r3,-1
 800b270:	28c6703a 	and	r3,r5,r3
 800b274:	1c06b03a 	or	r3,r3,r16
 800b278:	1906b03a 	or	r3,r3,r4
 800b27c:	dfc00417 	ldw	ra,16(sp)
 800b280:	dcc00317 	ldw	r19,12(sp)
 800b284:	dc800217 	ldw	r18,8(sp)
 800b288:	dc400117 	ldw	r17,4(sp)
 800b28c:	dc000017 	ldw	r16,0(sp)
 800b290:	dec00504 	addi	sp,sp,20
 800b294:	f800283a 	ret
 800b298:	0101ffc4 	movi	r4,2047
 800b29c:	813fd626 	beq	r16,r4,800b1f8 <__alt_data_end+0xfc00b1f8>
 800b2a0:	29402034 	orhi	r5,r5,128
 800b2a4:	01000e04 	movi	r4,56
 800b2a8:	2080a316 	blt	r4,r2,800b538 <__subdf3+0x3c4>
 800b2ac:	010007c4 	movi	r4,31
 800b2b0:	2080c616 	blt	r4,r2,800b5cc <__subdf3+0x458>
 800b2b4:	01000804 	movi	r4,32
 800b2b8:	2089c83a 	sub	r4,r4,r2
 800b2bc:	2910983a 	sll	r8,r5,r4
 800b2c0:	308ed83a 	srl	r7,r6,r2
 800b2c4:	3108983a 	sll	r4,r6,r4
 800b2c8:	2884d83a 	srl	r2,r5,r2
 800b2cc:	41ccb03a 	or	r6,r8,r7
 800b2d0:	2008c03a 	cmpne	r4,r4,zero
 800b2d4:	310cb03a 	or	r6,r6,r4
 800b2d8:	898dc83a 	sub	r6,r17,r6
 800b2dc:	89a3803a 	cmpltu	r17,r17,r6
 800b2e0:	1887c83a 	sub	r3,r3,r2
 800b2e4:	1c47c83a 	sub	r3,r3,r17
 800b2e8:	3023883a 	mov	r17,r6
 800b2ec:	1880202c 	andhi	r2,r3,128
 800b2f0:	10002326 	beq	r2,zero,800b380 <__subdf3+0x20c>
 800b2f4:	04c02034 	movhi	r19,128
 800b2f8:	9cffffc4 	addi	r19,r19,-1
 800b2fc:	1ce6703a 	and	r19,r3,r19
 800b300:	98007a26 	beq	r19,zero,800b4ec <__subdf3+0x378>
 800b304:	9809883a 	mov	r4,r19
 800b308:	800bc740 	call	800bc74 <__clzsi2>
 800b30c:	113ffe04 	addi	r4,r2,-8
 800b310:	00c007c4 	movi	r3,31
 800b314:	19007b16 	blt	r3,r4,800b504 <__subdf3+0x390>
 800b318:	00800804 	movi	r2,32
 800b31c:	1105c83a 	sub	r2,r2,r4
 800b320:	8884d83a 	srl	r2,r17,r2
 800b324:	9906983a 	sll	r3,r19,r4
 800b328:	8922983a 	sll	r17,r17,r4
 800b32c:	10c4b03a 	or	r2,r2,r3
 800b330:	24007816 	blt	r4,r16,800b514 <__subdf3+0x3a0>
 800b334:	2421c83a 	sub	r16,r4,r16
 800b338:	80c00044 	addi	r3,r16,1
 800b33c:	010007c4 	movi	r4,31
 800b340:	20c09516 	blt	r4,r3,800b598 <__subdf3+0x424>
 800b344:	01400804 	movi	r5,32
 800b348:	28cbc83a 	sub	r5,r5,r3
 800b34c:	88c8d83a 	srl	r4,r17,r3
 800b350:	8962983a 	sll	r17,r17,r5
 800b354:	114a983a 	sll	r5,r2,r5
 800b358:	10c6d83a 	srl	r3,r2,r3
 800b35c:	8804c03a 	cmpne	r2,r17,zero
 800b360:	290ab03a 	or	r5,r5,r4
 800b364:	28a2b03a 	or	r17,r5,r2
 800b368:	0021883a 	mov	r16,zero
 800b36c:	003fa206 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b370:	2090b03a 	or	r8,r4,r2
 800b374:	40018e26 	beq	r8,zero,800b9b0 <__subdf3+0x83c>
 800b378:	1007883a 	mov	r3,r2
 800b37c:	2023883a 	mov	r17,r4
 800b380:	888001cc 	andi	r2,r17,7
 800b384:	103f9e1e 	bne	r2,zero,800b200 <__alt_data_end+0xfc00b200>
 800b388:	1804977a 	slli	r2,r3,29
 800b38c:	8822d0fa 	srli	r17,r17,3
 800b390:	1810d0fa 	srli	r8,r3,3
 800b394:	9100004c 	andi	r4,r18,1
 800b398:	1444b03a 	or	r2,r2,r17
 800b39c:	00c1ffc4 	movi	r3,2047
 800b3a0:	80c02826 	beq	r16,r3,800b444 <__subdf3+0x2d0>
 800b3a4:	01400434 	movhi	r5,16
 800b3a8:	297fffc4 	addi	r5,r5,-1
 800b3ac:	80e0703a 	and	r16,r16,r3
 800b3b0:	414a703a 	and	r5,r8,r5
 800b3b4:	003fa806 	br	800b258 <__alt_data_end+0xfc00b258>
 800b3b8:	0080630e 	bge	zero,r2,800b548 <__subdf3+0x3d4>
 800b3bc:	48003026 	beq	r9,zero,800b480 <__subdf3+0x30c>
 800b3c0:	0101ffc4 	movi	r4,2047
 800b3c4:	813f8c26 	beq	r16,r4,800b1f8 <__alt_data_end+0xfc00b1f8>
 800b3c8:	29402034 	orhi	r5,r5,128
 800b3cc:	01000e04 	movi	r4,56
 800b3d0:	2080a90e 	bge	r4,r2,800b678 <__subdf3+0x504>
 800b3d4:	298cb03a 	or	r6,r5,r6
 800b3d8:	3012c03a 	cmpne	r9,r6,zero
 800b3dc:	0005883a 	mov	r2,zero
 800b3e0:	4c53883a 	add	r9,r9,r17
 800b3e4:	4c63803a 	cmpltu	r17,r9,r17
 800b3e8:	10c7883a 	add	r3,r2,r3
 800b3ec:	88c7883a 	add	r3,r17,r3
 800b3f0:	4823883a 	mov	r17,r9
 800b3f4:	1880202c 	andhi	r2,r3,128
 800b3f8:	1000d026 	beq	r2,zero,800b73c <__subdf3+0x5c8>
 800b3fc:	84000044 	addi	r16,r16,1
 800b400:	0081ffc4 	movi	r2,2047
 800b404:	8080fe26 	beq	r16,r2,800b800 <__subdf3+0x68c>
 800b408:	00bfe034 	movhi	r2,65408
 800b40c:	10bfffc4 	addi	r2,r2,-1
 800b410:	1886703a 	and	r3,r3,r2
 800b414:	880ad07a 	srli	r5,r17,1
 800b418:	180497fa 	slli	r2,r3,31
 800b41c:	8900004c 	andi	r4,r17,1
 800b420:	2922b03a 	or	r17,r5,r4
 800b424:	1806d07a 	srli	r3,r3,1
 800b428:	1462b03a 	or	r17,r2,r17
 800b42c:	3825883a 	mov	r18,r7
 800b430:	003f7106 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b434:	2984b03a 	or	r2,r5,r6
 800b438:	103f6826 	beq	r2,zero,800b1dc <__alt_data_end+0xfc00b1dc>
 800b43c:	39c03fcc 	andi	r7,r7,255
 800b440:	003f6706 	br	800b1e0 <__alt_data_end+0xfc00b1e0>
 800b444:	4086b03a 	or	r3,r8,r2
 800b448:	18015226 	beq	r3,zero,800b994 <__subdf3+0x820>
 800b44c:	00c00434 	movhi	r3,16
 800b450:	41400234 	orhi	r5,r8,8
 800b454:	18ffffc4 	addi	r3,r3,-1
 800b458:	28ca703a 	and	r5,r5,r3
 800b45c:	003f7e06 	br	800b258 <__alt_data_end+0xfc00b258>
 800b460:	10bfffc4 	addi	r2,r2,-1
 800b464:	1000491e 	bne	r2,zero,800b58c <__subdf3+0x418>
 800b468:	898fc83a 	sub	r7,r17,r6
 800b46c:	89e3803a 	cmpltu	r17,r17,r7
 800b470:	1947c83a 	sub	r3,r3,r5
 800b474:	1c47c83a 	sub	r3,r3,r17
 800b478:	3823883a 	mov	r17,r7
 800b47c:	003f9b06 	br	800b2ec <__alt_data_end+0xfc00b2ec>
 800b480:	2988b03a 	or	r4,r5,r6
 800b484:	203f5c26 	beq	r4,zero,800b1f8 <__alt_data_end+0xfc00b1f8>
 800b488:	10bfffc4 	addi	r2,r2,-1
 800b48c:	1000931e 	bne	r2,zero,800b6dc <__subdf3+0x568>
 800b490:	898d883a 	add	r6,r17,r6
 800b494:	3463803a 	cmpltu	r17,r6,r17
 800b498:	1947883a 	add	r3,r3,r5
 800b49c:	88c7883a 	add	r3,r17,r3
 800b4a0:	3023883a 	mov	r17,r6
 800b4a4:	003fd306 	br	800b3f4 <__alt_data_end+0xfc00b3f4>
 800b4a8:	1000541e 	bne	r2,zero,800b5fc <__subdf3+0x488>
 800b4ac:	80800044 	addi	r2,r16,1
 800b4b0:	1081ffcc 	andi	r2,r2,2047
 800b4b4:	01000044 	movi	r4,1
 800b4b8:	2080a20e 	bge	r4,r2,800b744 <__subdf3+0x5d0>
 800b4bc:	8989c83a 	sub	r4,r17,r6
 800b4c0:	8905803a 	cmpltu	r2,r17,r4
 800b4c4:	1967c83a 	sub	r19,r3,r5
 800b4c8:	98a7c83a 	sub	r19,r19,r2
 800b4cc:	9880202c 	andhi	r2,r19,128
 800b4d0:	10006326 	beq	r2,zero,800b660 <__subdf3+0x4ec>
 800b4d4:	3463c83a 	sub	r17,r6,r17
 800b4d8:	28c7c83a 	sub	r3,r5,r3
 800b4dc:	344d803a 	cmpltu	r6,r6,r17
 800b4e0:	19a7c83a 	sub	r19,r3,r6
 800b4e4:	3825883a 	mov	r18,r7
 800b4e8:	983f861e 	bne	r19,zero,800b304 <__alt_data_end+0xfc00b304>
 800b4ec:	8809883a 	mov	r4,r17
 800b4f0:	800bc740 	call	800bc74 <__clzsi2>
 800b4f4:	10800804 	addi	r2,r2,32
 800b4f8:	113ffe04 	addi	r4,r2,-8
 800b4fc:	00c007c4 	movi	r3,31
 800b500:	193f850e 	bge	r3,r4,800b318 <__alt_data_end+0xfc00b318>
 800b504:	10bff604 	addi	r2,r2,-40
 800b508:	8884983a 	sll	r2,r17,r2
 800b50c:	0023883a 	mov	r17,zero
 800b510:	243f880e 	bge	r4,r16,800b334 <__alt_data_end+0xfc00b334>
 800b514:	00ffe034 	movhi	r3,65408
 800b518:	18ffffc4 	addi	r3,r3,-1
 800b51c:	8121c83a 	sub	r16,r16,r4
 800b520:	10c6703a 	and	r3,r2,r3
 800b524:	003f3406 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b528:	9100004c 	andi	r4,r18,1
 800b52c:	000b883a 	mov	r5,zero
 800b530:	0005883a 	mov	r2,zero
 800b534:	003f4806 	br	800b258 <__alt_data_end+0xfc00b258>
 800b538:	298cb03a 	or	r6,r5,r6
 800b53c:	300cc03a 	cmpne	r6,r6,zero
 800b540:	0005883a 	mov	r2,zero
 800b544:	003f6406 	br	800b2d8 <__alt_data_end+0xfc00b2d8>
 800b548:	10009a1e 	bne	r2,zero,800b7b4 <__subdf3+0x640>
 800b54c:	82400044 	addi	r9,r16,1
 800b550:	4881ffcc 	andi	r2,r9,2047
 800b554:	02800044 	movi	r10,1
 800b558:	5080670e 	bge	r10,r2,800b6f8 <__subdf3+0x584>
 800b55c:	0081ffc4 	movi	r2,2047
 800b560:	4880af26 	beq	r9,r2,800b820 <__subdf3+0x6ac>
 800b564:	898d883a 	add	r6,r17,r6
 800b568:	1945883a 	add	r2,r3,r5
 800b56c:	3447803a 	cmpltu	r3,r6,r17
 800b570:	1887883a 	add	r3,r3,r2
 800b574:	182297fa 	slli	r17,r3,31
 800b578:	300cd07a 	srli	r6,r6,1
 800b57c:	1806d07a 	srli	r3,r3,1
 800b580:	4821883a 	mov	r16,r9
 800b584:	89a2b03a 	or	r17,r17,r6
 800b588:	003f1b06 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b58c:	0101ffc4 	movi	r4,2047
 800b590:	813f441e 	bne	r16,r4,800b2a4 <__alt_data_end+0xfc00b2a4>
 800b594:	003f1806 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b598:	843ff844 	addi	r16,r16,-31
 800b59c:	01400804 	movi	r5,32
 800b5a0:	1408d83a 	srl	r4,r2,r16
 800b5a4:	19405026 	beq	r3,r5,800b6e8 <__subdf3+0x574>
 800b5a8:	01401004 	movi	r5,64
 800b5ac:	28c7c83a 	sub	r3,r5,r3
 800b5b0:	10c4983a 	sll	r2,r2,r3
 800b5b4:	88a2b03a 	or	r17,r17,r2
 800b5b8:	8822c03a 	cmpne	r17,r17,zero
 800b5bc:	2462b03a 	or	r17,r4,r17
 800b5c0:	0007883a 	mov	r3,zero
 800b5c4:	0021883a 	mov	r16,zero
 800b5c8:	003f6d06 	br	800b380 <__alt_data_end+0xfc00b380>
 800b5cc:	11fff804 	addi	r7,r2,-32
 800b5d0:	01000804 	movi	r4,32
 800b5d4:	29ced83a 	srl	r7,r5,r7
 800b5d8:	11004526 	beq	r2,r4,800b6f0 <__subdf3+0x57c>
 800b5dc:	01001004 	movi	r4,64
 800b5e0:	2089c83a 	sub	r4,r4,r2
 800b5e4:	2904983a 	sll	r2,r5,r4
 800b5e8:	118cb03a 	or	r6,r2,r6
 800b5ec:	300cc03a 	cmpne	r6,r6,zero
 800b5f0:	398cb03a 	or	r6,r7,r6
 800b5f4:	0005883a 	mov	r2,zero
 800b5f8:	003f3706 	br	800b2d8 <__alt_data_end+0xfc00b2d8>
 800b5fc:	80002a26 	beq	r16,zero,800b6a8 <__subdf3+0x534>
 800b600:	0101ffc4 	movi	r4,2047
 800b604:	49006626 	beq	r9,r4,800b7a0 <__subdf3+0x62c>
 800b608:	0085c83a 	sub	r2,zero,r2
 800b60c:	18c02034 	orhi	r3,r3,128
 800b610:	01000e04 	movi	r4,56
 800b614:	20807e16 	blt	r4,r2,800b810 <__subdf3+0x69c>
 800b618:	010007c4 	movi	r4,31
 800b61c:	2080e716 	blt	r4,r2,800b9bc <__subdf3+0x848>
 800b620:	01000804 	movi	r4,32
 800b624:	2089c83a 	sub	r4,r4,r2
 800b628:	1914983a 	sll	r10,r3,r4
 800b62c:	8890d83a 	srl	r8,r17,r2
 800b630:	8908983a 	sll	r4,r17,r4
 800b634:	1884d83a 	srl	r2,r3,r2
 800b638:	5222b03a 	or	r17,r10,r8
 800b63c:	2006c03a 	cmpne	r3,r4,zero
 800b640:	88e2b03a 	or	r17,r17,r3
 800b644:	3463c83a 	sub	r17,r6,r17
 800b648:	2885c83a 	sub	r2,r5,r2
 800b64c:	344d803a 	cmpltu	r6,r6,r17
 800b650:	1187c83a 	sub	r3,r2,r6
 800b654:	4821883a 	mov	r16,r9
 800b658:	3825883a 	mov	r18,r7
 800b65c:	003f2306 	br	800b2ec <__alt_data_end+0xfc00b2ec>
 800b660:	24d0b03a 	or	r8,r4,r19
 800b664:	40001b1e 	bne	r8,zero,800b6d4 <__subdf3+0x560>
 800b668:	0005883a 	mov	r2,zero
 800b66c:	0009883a 	mov	r4,zero
 800b670:	0021883a 	mov	r16,zero
 800b674:	003f4906 	br	800b39c <__alt_data_end+0xfc00b39c>
 800b678:	010007c4 	movi	r4,31
 800b67c:	20803a16 	blt	r4,r2,800b768 <__subdf3+0x5f4>
 800b680:	01000804 	movi	r4,32
 800b684:	2089c83a 	sub	r4,r4,r2
 800b688:	2912983a 	sll	r9,r5,r4
 800b68c:	3090d83a 	srl	r8,r6,r2
 800b690:	3108983a 	sll	r4,r6,r4
 800b694:	2884d83a 	srl	r2,r5,r2
 800b698:	4a12b03a 	or	r9,r9,r8
 800b69c:	2008c03a 	cmpne	r4,r4,zero
 800b6a0:	4912b03a 	or	r9,r9,r4
 800b6a4:	003f4e06 	br	800b3e0 <__alt_data_end+0xfc00b3e0>
 800b6a8:	1c48b03a 	or	r4,r3,r17
 800b6ac:	20003c26 	beq	r4,zero,800b7a0 <__subdf3+0x62c>
 800b6b0:	0084303a 	nor	r2,zero,r2
 800b6b4:	1000381e 	bne	r2,zero,800b798 <__subdf3+0x624>
 800b6b8:	3463c83a 	sub	r17,r6,r17
 800b6bc:	28c5c83a 	sub	r2,r5,r3
 800b6c0:	344d803a 	cmpltu	r6,r6,r17
 800b6c4:	1187c83a 	sub	r3,r2,r6
 800b6c8:	4821883a 	mov	r16,r9
 800b6cc:	3825883a 	mov	r18,r7
 800b6d0:	003f0606 	br	800b2ec <__alt_data_end+0xfc00b2ec>
 800b6d4:	2023883a 	mov	r17,r4
 800b6d8:	003f0906 	br	800b300 <__alt_data_end+0xfc00b300>
 800b6dc:	0101ffc4 	movi	r4,2047
 800b6e0:	813f3a1e 	bne	r16,r4,800b3cc <__alt_data_end+0xfc00b3cc>
 800b6e4:	003ec406 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b6e8:	0005883a 	mov	r2,zero
 800b6ec:	003fb106 	br	800b5b4 <__alt_data_end+0xfc00b5b4>
 800b6f0:	0005883a 	mov	r2,zero
 800b6f4:	003fbc06 	br	800b5e8 <__alt_data_end+0xfc00b5e8>
 800b6f8:	1c44b03a 	or	r2,r3,r17
 800b6fc:	80008e1e 	bne	r16,zero,800b938 <__subdf3+0x7c4>
 800b700:	1000c826 	beq	r2,zero,800ba24 <__subdf3+0x8b0>
 800b704:	2984b03a 	or	r2,r5,r6
 800b708:	103ebb26 	beq	r2,zero,800b1f8 <__alt_data_end+0xfc00b1f8>
 800b70c:	8989883a 	add	r4,r17,r6
 800b710:	1945883a 	add	r2,r3,r5
 800b714:	2447803a 	cmpltu	r3,r4,r17
 800b718:	1887883a 	add	r3,r3,r2
 800b71c:	1880202c 	andhi	r2,r3,128
 800b720:	2023883a 	mov	r17,r4
 800b724:	103f1626 	beq	r2,zero,800b380 <__alt_data_end+0xfc00b380>
 800b728:	00bfe034 	movhi	r2,65408
 800b72c:	10bfffc4 	addi	r2,r2,-1
 800b730:	5021883a 	mov	r16,r10
 800b734:	1886703a 	and	r3,r3,r2
 800b738:	003eaf06 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b73c:	3825883a 	mov	r18,r7
 800b740:	003f0f06 	br	800b380 <__alt_data_end+0xfc00b380>
 800b744:	1c44b03a 	or	r2,r3,r17
 800b748:	8000251e 	bne	r16,zero,800b7e0 <__subdf3+0x66c>
 800b74c:	1000661e 	bne	r2,zero,800b8e8 <__subdf3+0x774>
 800b750:	2990b03a 	or	r8,r5,r6
 800b754:	40009626 	beq	r8,zero,800b9b0 <__subdf3+0x83c>
 800b758:	2807883a 	mov	r3,r5
 800b75c:	3023883a 	mov	r17,r6
 800b760:	3825883a 	mov	r18,r7
 800b764:	003ea406 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b768:	127ff804 	addi	r9,r2,-32
 800b76c:	01000804 	movi	r4,32
 800b770:	2a52d83a 	srl	r9,r5,r9
 800b774:	11008c26 	beq	r2,r4,800b9a8 <__subdf3+0x834>
 800b778:	01001004 	movi	r4,64
 800b77c:	2085c83a 	sub	r2,r4,r2
 800b780:	2884983a 	sll	r2,r5,r2
 800b784:	118cb03a 	or	r6,r2,r6
 800b788:	300cc03a 	cmpne	r6,r6,zero
 800b78c:	4992b03a 	or	r9,r9,r6
 800b790:	0005883a 	mov	r2,zero
 800b794:	003f1206 	br	800b3e0 <__alt_data_end+0xfc00b3e0>
 800b798:	0101ffc4 	movi	r4,2047
 800b79c:	493f9c1e 	bne	r9,r4,800b610 <__alt_data_end+0xfc00b610>
 800b7a0:	2807883a 	mov	r3,r5
 800b7a4:	3023883a 	mov	r17,r6
 800b7a8:	4821883a 	mov	r16,r9
 800b7ac:	3825883a 	mov	r18,r7
 800b7b0:	003e9106 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b7b4:	80001f1e 	bne	r16,zero,800b834 <__subdf3+0x6c0>
 800b7b8:	1c48b03a 	or	r4,r3,r17
 800b7bc:	20005a26 	beq	r4,zero,800b928 <__subdf3+0x7b4>
 800b7c0:	0084303a 	nor	r2,zero,r2
 800b7c4:	1000561e 	bne	r2,zero,800b920 <__subdf3+0x7ac>
 800b7c8:	89a3883a 	add	r17,r17,r6
 800b7cc:	1945883a 	add	r2,r3,r5
 800b7d0:	898d803a 	cmpltu	r6,r17,r6
 800b7d4:	3087883a 	add	r3,r6,r2
 800b7d8:	4821883a 	mov	r16,r9
 800b7dc:	003f0506 	br	800b3f4 <__alt_data_end+0xfc00b3f4>
 800b7e0:	10002b1e 	bne	r2,zero,800b890 <__subdf3+0x71c>
 800b7e4:	2984b03a 	or	r2,r5,r6
 800b7e8:	10008026 	beq	r2,zero,800b9ec <__subdf3+0x878>
 800b7ec:	2807883a 	mov	r3,r5
 800b7f0:	3023883a 	mov	r17,r6
 800b7f4:	3825883a 	mov	r18,r7
 800b7f8:	0401ffc4 	movi	r16,2047
 800b7fc:	003e7e06 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b800:	3809883a 	mov	r4,r7
 800b804:	0011883a 	mov	r8,zero
 800b808:	0005883a 	mov	r2,zero
 800b80c:	003ee306 	br	800b39c <__alt_data_end+0xfc00b39c>
 800b810:	1c62b03a 	or	r17,r3,r17
 800b814:	8822c03a 	cmpne	r17,r17,zero
 800b818:	0005883a 	mov	r2,zero
 800b81c:	003f8906 	br	800b644 <__alt_data_end+0xfc00b644>
 800b820:	3809883a 	mov	r4,r7
 800b824:	4821883a 	mov	r16,r9
 800b828:	0011883a 	mov	r8,zero
 800b82c:	0005883a 	mov	r2,zero
 800b830:	003eda06 	br	800b39c <__alt_data_end+0xfc00b39c>
 800b834:	0101ffc4 	movi	r4,2047
 800b838:	49003b26 	beq	r9,r4,800b928 <__subdf3+0x7b4>
 800b83c:	0085c83a 	sub	r2,zero,r2
 800b840:	18c02034 	orhi	r3,r3,128
 800b844:	01000e04 	movi	r4,56
 800b848:	20806e16 	blt	r4,r2,800ba04 <__subdf3+0x890>
 800b84c:	010007c4 	movi	r4,31
 800b850:	20807716 	blt	r4,r2,800ba30 <__subdf3+0x8bc>
 800b854:	01000804 	movi	r4,32
 800b858:	2089c83a 	sub	r4,r4,r2
 800b85c:	1914983a 	sll	r10,r3,r4
 800b860:	8890d83a 	srl	r8,r17,r2
 800b864:	8908983a 	sll	r4,r17,r4
 800b868:	1884d83a 	srl	r2,r3,r2
 800b86c:	5222b03a 	or	r17,r10,r8
 800b870:	2006c03a 	cmpne	r3,r4,zero
 800b874:	88e2b03a 	or	r17,r17,r3
 800b878:	89a3883a 	add	r17,r17,r6
 800b87c:	1145883a 	add	r2,r2,r5
 800b880:	898d803a 	cmpltu	r6,r17,r6
 800b884:	3087883a 	add	r3,r6,r2
 800b888:	4821883a 	mov	r16,r9
 800b88c:	003ed906 	br	800b3f4 <__alt_data_end+0xfc00b3f4>
 800b890:	2984b03a 	or	r2,r5,r6
 800b894:	10004226 	beq	r2,zero,800b9a0 <__subdf3+0x82c>
 800b898:	1808d0fa 	srli	r4,r3,3
 800b89c:	8822d0fa 	srli	r17,r17,3
 800b8a0:	1806977a 	slli	r3,r3,29
 800b8a4:	2080022c 	andhi	r2,r4,8
 800b8a8:	1c62b03a 	or	r17,r3,r17
 800b8ac:	10000826 	beq	r2,zero,800b8d0 <__subdf3+0x75c>
 800b8b0:	2812d0fa 	srli	r9,r5,3
 800b8b4:	4880022c 	andhi	r2,r9,8
 800b8b8:	1000051e 	bne	r2,zero,800b8d0 <__subdf3+0x75c>
 800b8bc:	300cd0fa 	srli	r6,r6,3
 800b8c0:	2804977a 	slli	r2,r5,29
 800b8c4:	4809883a 	mov	r4,r9
 800b8c8:	3825883a 	mov	r18,r7
 800b8cc:	11a2b03a 	or	r17,r2,r6
 800b8d0:	8806d77a 	srli	r3,r17,29
 800b8d4:	200890fa 	slli	r4,r4,3
 800b8d8:	882290fa 	slli	r17,r17,3
 800b8dc:	0401ffc4 	movi	r16,2047
 800b8e0:	1906b03a 	or	r3,r3,r4
 800b8e4:	003e4406 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b8e8:	2984b03a 	or	r2,r5,r6
 800b8ec:	103e4226 	beq	r2,zero,800b1f8 <__alt_data_end+0xfc00b1f8>
 800b8f0:	8989c83a 	sub	r4,r17,r6
 800b8f4:	8911803a 	cmpltu	r8,r17,r4
 800b8f8:	1945c83a 	sub	r2,r3,r5
 800b8fc:	1205c83a 	sub	r2,r2,r8
 800b900:	1200202c 	andhi	r8,r2,128
 800b904:	403e9a26 	beq	r8,zero,800b370 <__alt_data_end+0xfc00b370>
 800b908:	3463c83a 	sub	r17,r6,r17
 800b90c:	28c5c83a 	sub	r2,r5,r3
 800b910:	344d803a 	cmpltu	r6,r6,r17
 800b914:	1187c83a 	sub	r3,r2,r6
 800b918:	3825883a 	mov	r18,r7
 800b91c:	003e3606 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b920:	0101ffc4 	movi	r4,2047
 800b924:	493fc71e 	bne	r9,r4,800b844 <__alt_data_end+0xfc00b844>
 800b928:	2807883a 	mov	r3,r5
 800b92c:	3023883a 	mov	r17,r6
 800b930:	4821883a 	mov	r16,r9
 800b934:	003e3006 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b938:	10003626 	beq	r2,zero,800ba14 <__subdf3+0x8a0>
 800b93c:	2984b03a 	or	r2,r5,r6
 800b940:	10001726 	beq	r2,zero,800b9a0 <__subdf3+0x82c>
 800b944:	1808d0fa 	srli	r4,r3,3
 800b948:	8822d0fa 	srli	r17,r17,3
 800b94c:	1806977a 	slli	r3,r3,29
 800b950:	2080022c 	andhi	r2,r4,8
 800b954:	1c62b03a 	or	r17,r3,r17
 800b958:	10000726 	beq	r2,zero,800b978 <__subdf3+0x804>
 800b95c:	2812d0fa 	srli	r9,r5,3
 800b960:	4880022c 	andhi	r2,r9,8
 800b964:	1000041e 	bne	r2,zero,800b978 <__subdf3+0x804>
 800b968:	300cd0fa 	srli	r6,r6,3
 800b96c:	2804977a 	slli	r2,r5,29
 800b970:	4809883a 	mov	r4,r9
 800b974:	11a2b03a 	or	r17,r2,r6
 800b978:	8806d77a 	srli	r3,r17,29
 800b97c:	200890fa 	slli	r4,r4,3
 800b980:	882290fa 	slli	r17,r17,3
 800b984:	3825883a 	mov	r18,r7
 800b988:	1906b03a 	or	r3,r3,r4
 800b98c:	0401ffc4 	movi	r16,2047
 800b990:	003e1906 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b994:	000b883a 	mov	r5,zero
 800b998:	0005883a 	mov	r2,zero
 800b99c:	003e2e06 	br	800b258 <__alt_data_end+0xfc00b258>
 800b9a0:	0401ffc4 	movi	r16,2047
 800b9a4:	003e1406 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800b9a8:	0005883a 	mov	r2,zero
 800b9ac:	003f7506 	br	800b784 <__alt_data_end+0xfc00b784>
 800b9b0:	0005883a 	mov	r2,zero
 800b9b4:	0009883a 	mov	r4,zero
 800b9b8:	003e7806 	br	800b39c <__alt_data_end+0xfc00b39c>
 800b9bc:	123ff804 	addi	r8,r2,-32
 800b9c0:	01000804 	movi	r4,32
 800b9c4:	1a10d83a 	srl	r8,r3,r8
 800b9c8:	11002526 	beq	r2,r4,800ba60 <__subdf3+0x8ec>
 800b9cc:	01001004 	movi	r4,64
 800b9d0:	2085c83a 	sub	r2,r4,r2
 800b9d4:	1884983a 	sll	r2,r3,r2
 800b9d8:	1444b03a 	or	r2,r2,r17
 800b9dc:	1004c03a 	cmpne	r2,r2,zero
 800b9e0:	40a2b03a 	or	r17,r8,r2
 800b9e4:	0005883a 	mov	r2,zero
 800b9e8:	003f1606 	br	800b644 <__alt_data_end+0xfc00b644>
 800b9ec:	02000434 	movhi	r8,16
 800b9f0:	0009883a 	mov	r4,zero
 800b9f4:	423fffc4 	addi	r8,r8,-1
 800b9f8:	00bfffc4 	movi	r2,-1
 800b9fc:	0401ffc4 	movi	r16,2047
 800ba00:	003e6606 	br	800b39c <__alt_data_end+0xfc00b39c>
 800ba04:	1c62b03a 	or	r17,r3,r17
 800ba08:	8822c03a 	cmpne	r17,r17,zero
 800ba0c:	0005883a 	mov	r2,zero
 800ba10:	003f9906 	br	800b878 <__alt_data_end+0xfc00b878>
 800ba14:	2807883a 	mov	r3,r5
 800ba18:	3023883a 	mov	r17,r6
 800ba1c:	0401ffc4 	movi	r16,2047
 800ba20:	003df506 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800ba24:	2807883a 	mov	r3,r5
 800ba28:	3023883a 	mov	r17,r6
 800ba2c:	003df206 	br	800b1f8 <__alt_data_end+0xfc00b1f8>
 800ba30:	123ff804 	addi	r8,r2,-32
 800ba34:	01000804 	movi	r4,32
 800ba38:	1a10d83a 	srl	r8,r3,r8
 800ba3c:	11000a26 	beq	r2,r4,800ba68 <__subdf3+0x8f4>
 800ba40:	01001004 	movi	r4,64
 800ba44:	2085c83a 	sub	r2,r4,r2
 800ba48:	1884983a 	sll	r2,r3,r2
 800ba4c:	1444b03a 	or	r2,r2,r17
 800ba50:	1004c03a 	cmpne	r2,r2,zero
 800ba54:	40a2b03a 	or	r17,r8,r2
 800ba58:	0005883a 	mov	r2,zero
 800ba5c:	003f8606 	br	800b878 <__alt_data_end+0xfc00b878>
 800ba60:	0005883a 	mov	r2,zero
 800ba64:	003fdc06 	br	800b9d8 <__alt_data_end+0xfc00b9d8>
 800ba68:	0005883a 	mov	r2,zero
 800ba6c:	003ff706 	br	800ba4c <__alt_data_end+0xfc00ba4c>

0800ba70 <__fixdfsi>:
 800ba70:	280cd53a 	srli	r6,r5,20
 800ba74:	00c00434 	movhi	r3,16
 800ba78:	18ffffc4 	addi	r3,r3,-1
 800ba7c:	3181ffcc 	andi	r6,r6,2047
 800ba80:	01c0ff84 	movi	r7,1022
 800ba84:	28c6703a 	and	r3,r5,r3
 800ba88:	280ad7fa 	srli	r5,r5,31
 800ba8c:	3980120e 	bge	r7,r6,800bad8 <__fixdfsi+0x68>
 800ba90:	00810744 	movi	r2,1053
 800ba94:	11800c16 	blt	r2,r6,800bac8 <__fixdfsi+0x58>
 800ba98:	00810cc4 	movi	r2,1075
 800ba9c:	1185c83a 	sub	r2,r2,r6
 800baa0:	01c007c4 	movi	r7,31
 800baa4:	18c00434 	orhi	r3,r3,16
 800baa8:	38800d16 	blt	r7,r2,800bae0 <__fixdfsi+0x70>
 800baac:	31befb44 	addi	r6,r6,-1043
 800bab0:	2084d83a 	srl	r2,r4,r2
 800bab4:	1986983a 	sll	r3,r3,r6
 800bab8:	1884b03a 	or	r2,r3,r2
 800babc:	28000726 	beq	r5,zero,800badc <__fixdfsi+0x6c>
 800bac0:	0085c83a 	sub	r2,zero,r2
 800bac4:	f800283a 	ret
 800bac8:	00a00034 	movhi	r2,32768
 800bacc:	10bfffc4 	addi	r2,r2,-1
 800bad0:	2885883a 	add	r2,r5,r2
 800bad4:	f800283a 	ret
 800bad8:	0005883a 	mov	r2,zero
 800badc:	f800283a 	ret
 800bae0:	008104c4 	movi	r2,1043
 800bae4:	1185c83a 	sub	r2,r2,r6
 800bae8:	1884d83a 	srl	r2,r3,r2
 800baec:	003ff306 	br	800babc <__alt_data_end+0xfc00babc>

0800baf0 <__floatsidf>:
 800baf0:	defffd04 	addi	sp,sp,-12
 800baf4:	dfc00215 	stw	ra,8(sp)
 800baf8:	dc400115 	stw	r17,4(sp)
 800bafc:	dc000015 	stw	r16,0(sp)
 800bb00:	20002b26 	beq	r4,zero,800bbb0 <__floatsidf+0xc0>
 800bb04:	2023883a 	mov	r17,r4
 800bb08:	2020d7fa 	srli	r16,r4,31
 800bb0c:	20002d16 	blt	r4,zero,800bbc4 <__floatsidf+0xd4>
 800bb10:	8809883a 	mov	r4,r17
 800bb14:	800bc740 	call	800bc74 <__clzsi2>
 800bb18:	01410784 	movi	r5,1054
 800bb1c:	288bc83a 	sub	r5,r5,r2
 800bb20:	01010cc4 	movi	r4,1075
 800bb24:	2149c83a 	sub	r4,r4,r5
 800bb28:	00c007c4 	movi	r3,31
 800bb2c:	1900160e 	bge	r3,r4,800bb88 <__floatsidf+0x98>
 800bb30:	00c104c4 	movi	r3,1043
 800bb34:	1947c83a 	sub	r3,r3,r5
 800bb38:	88c6983a 	sll	r3,r17,r3
 800bb3c:	00800434 	movhi	r2,16
 800bb40:	10bfffc4 	addi	r2,r2,-1
 800bb44:	1886703a 	and	r3,r3,r2
 800bb48:	2941ffcc 	andi	r5,r5,2047
 800bb4c:	800d883a 	mov	r6,r16
 800bb50:	0005883a 	mov	r2,zero
 800bb54:	280a953a 	slli	r5,r5,20
 800bb58:	31803fcc 	andi	r6,r6,255
 800bb5c:	01000434 	movhi	r4,16
 800bb60:	300c97fa 	slli	r6,r6,31
 800bb64:	213fffc4 	addi	r4,r4,-1
 800bb68:	1906703a 	and	r3,r3,r4
 800bb6c:	1946b03a 	or	r3,r3,r5
 800bb70:	1986b03a 	or	r3,r3,r6
 800bb74:	dfc00217 	ldw	ra,8(sp)
 800bb78:	dc400117 	ldw	r17,4(sp)
 800bb7c:	dc000017 	ldw	r16,0(sp)
 800bb80:	dec00304 	addi	sp,sp,12
 800bb84:	f800283a 	ret
 800bb88:	00c002c4 	movi	r3,11
 800bb8c:	1887c83a 	sub	r3,r3,r2
 800bb90:	88c6d83a 	srl	r3,r17,r3
 800bb94:	8904983a 	sll	r2,r17,r4
 800bb98:	01000434 	movhi	r4,16
 800bb9c:	213fffc4 	addi	r4,r4,-1
 800bba0:	2941ffcc 	andi	r5,r5,2047
 800bba4:	1906703a 	and	r3,r3,r4
 800bba8:	800d883a 	mov	r6,r16
 800bbac:	003fe906 	br	800bb54 <__alt_data_end+0xfc00bb54>
 800bbb0:	000d883a 	mov	r6,zero
 800bbb4:	000b883a 	mov	r5,zero
 800bbb8:	0007883a 	mov	r3,zero
 800bbbc:	0005883a 	mov	r2,zero
 800bbc0:	003fe406 	br	800bb54 <__alt_data_end+0xfc00bb54>
 800bbc4:	0123c83a 	sub	r17,zero,r4
 800bbc8:	003fd106 	br	800bb10 <__alt_data_end+0xfc00bb10>

0800bbcc <__floatunsidf>:
 800bbcc:	defffe04 	addi	sp,sp,-8
 800bbd0:	dc000015 	stw	r16,0(sp)
 800bbd4:	dfc00115 	stw	ra,4(sp)
 800bbd8:	2021883a 	mov	r16,r4
 800bbdc:	20002226 	beq	r4,zero,800bc68 <__floatunsidf+0x9c>
 800bbe0:	800bc740 	call	800bc74 <__clzsi2>
 800bbe4:	01010784 	movi	r4,1054
 800bbe8:	2089c83a 	sub	r4,r4,r2
 800bbec:	01810cc4 	movi	r6,1075
 800bbf0:	310dc83a 	sub	r6,r6,r4
 800bbf4:	00c007c4 	movi	r3,31
 800bbf8:	1980120e 	bge	r3,r6,800bc44 <__floatunsidf+0x78>
 800bbfc:	00c104c4 	movi	r3,1043
 800bc00:	1907c83a 	sub	r3,r3,r4
 800bc04:	80ca983a 	sll	r5,r16,r3
 800bc08:	00800434 	movhi	r2,16
 800bc0c:	10bfffc4 	addi	r2,r2,-1
 800bc10:	2101ffcc 	andi	r4,r4,2047
 800bc14:	0021883a 	mov	r16,zero
 800bc18:	288a703a 	and	r5,r5,r2
 800bc1c:	2008953a 	slli	r4,r4,20
 800bc20:	00c00434 	movhi	r3,16
 800bc24:	18ffffc4 	addi	r3,r3,-1
 800bc28:	28c6703a 	and	r3,r5,r3
 800bc2c:	8005883a 	mov	r2,r16
 800bc30:	1906b03a 	or	r3,r3,r4
 800bc34:	dfc00117 	ldw	ra,4(sp)
 800bc38:	dc000017 	ldw	r16,0(sp)
 800bc3c:	dec00204 	addi	sp,sp,8
 800bc40:	f800283a 	ret
 800bc44:	00c002c4 	movi	r3,11
 800bc48:	188bc83a 	sub	r5,r3,r2
 800bc4c:	814ad83a 	srl	r5,r16,r5
 800bc50:	00c00434 	movhi	r3,16
 800bc54:	18ffffc4 	addi	r3,r3,-1
 800bc58:	81a0983a 	sll	r16,r16,r6
 800bc5c:	2101ffcc 	andi	r4,r4,2047
 800bc60:	28ca703a 	and	r5,r5,r3
 800bc64:	003fed06 	br	800bc1c <__alt_data_end+0xfc00bc1c>
 800bc68:	0009883a 	mov	r4,zero
 800bc6c:	000b883a 	mov	r5,zero
 800bc70:	003fea06 	br	800bc1c <__alt_data_end+0xfc00bc1c>

0800bc74 <__clzsi2>:
 800bc74:	00bfffd4 	movui	r2,65535
 800bc78:	11000536 	bltu	r2,r4,800bc90 <__clzsi2+0x1c>
 800bc7c:	00803fc4 	movi	r2,255
 800bc80:	11000f36 	bltu	r2,r4,800bcc0 <__clzsi2+0x4c>
 800bc84:	00800804 	movi	r2,32
 800bc88:	0007883a 	mov	r3,zero
 800bc8c:	00000506 	br	800bca4 <__clzsi2+0x30>
 800bc90:	00804034 	movhi	r2,256
 800bc94:	10bfffc4 	addi	r2,r2,-1
 800bc98:	11000c2e 	bgeu	r2,r4,800bccc <__clzsi2+0x58>
 800bc9c:	00800204 	movi	r2,8
 800bca0:	00c00604 	movi	r3,24
 800bca4:	20c8d83a 	srl	r4,r4,r3
 800bca8:	00c20074 	movhi	r3,2049
 800bcac:	18f8ac04 	addi	r3,r3,-7504
 800bcb0:	1909883a 	add	r4,r3,r4
 800bcb4:	20c00003 	ldbu	r3,0(r4)
 800bcb8:	10c5c83a 	sub	r2,r2,r3
 800bcbc:	f800283a 	ret
 800bcc0:	00800604 	movi	r2,24
 800bcc4:	00c00204 	movi	r3,8
 800bcc8:	003ff606 	br	800bca4 <__alt_data_end+0xfc00bca4>
 800bccc:	00800404 	movi	r2,16
 800bcd0:	1007883a 	mov	r3,r2
 800bcd4:	003ff306 	br	800bca4 <__alt_data_end+0xfc00bca4>

0800bcd8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800bcd8:	defffc04 	addi	sp,sp,-16
 800bcdc:	df000315 	stw	fp,12(sp)
 800bce0:	df000304 	addi	fp,sp,12
 800bce4:	e13ffd15 	stw	r4,-12(fp)
 800bce8:	e17ffe15 	stw	r5,-8(fp)
 800bcec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800bcf0:	e0fffe17 	ldw	r3,-8(fp)
 800bcf4:	e0bffd17 	ldw	r2,-12(fp)
 800bcf8:	18800c26 	beq	r3,r2,800bd2c <alt_load_section+0x54>
  {
    while( to != end )
 800bcfc:	00000806 	br	800bd20 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800bd00:	e0bffe17 	ldw	r2,-8(fp)
 800bd04:	10c00104 	addi	r3,r2,4
 800bd08:	e0fffe15 	stw	r3,-8(fp)
 800bd0c:	e0fffd17 	ldw	r3,-12(fp)
 800bd10:	19000104 	addi	r4,r3,4
 800bd14:	e13ffd15 	stw	r4,-12(fp)
 800bd18:	18c00017 	ldw	r3,0(r3)
 800bd1c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800bd20:	e0fffe17 	ldw	r3,-8(fp)
 800bd24:	e0bfff17 	ldw	r2,-4(fp)
 800bd28:	18bff51e 	bne	r3,r2,800bd00 <__alt_data_end+0xfc00bd00>
    {
      *to++ = *from++;
    }
  }
}
 800bd2c:	0001883a 	nop
 800bd30:	e037883a 	mov	sp,fp
 800bd34:	df000017 	ldw	fp,0(sp)
 800bd38:	dec00104 	addi	sp,sp,4
 800bd3c:	f800283a 	ret

0800bd40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800bd40:	defffe04 	addi	sp,sp,-8
 800bd44:	dfc00115 	stw	ra,4(sp)
 800bd48:	df000015 	stw	fp,0(sp)
 800bd4c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800bd50:	01820074 	movhi	r6,2049
 800bd54:	31800e04 	addi	r6,r6,56
 800bd58:	01420074 	movhi	r5,2049
 800bd5c:	2978f704 	addi	r5,r5,-7204
 800bd60:	01020074 	movhi	r4,2049
 800bd64:	21000e04 	addi	r4,r4,56
 800bd68:	800bcd80 	call	800bcd8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800bd6c:	01820034 	movhi	r6,2048
 800bd70:	31808c04 	addi	r6,r6,560
 800bd74:	01420034 	movhi	r5,2048
 800bd78:	29400804 	addi	r5,r5,32
 800bd7c:	01020034 	movhi	r4,2048
 800bd80:	21000804 	addi	r4,r4,32
 800bd84:	800bcd80 	call	800bcd8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800bd88:	01820074 	movhi	r6,2049
 800bd8c:	31b8f704 	addi	r6,r6,-7204
 800bd90:	01420074 	movhi	r5,2049
 800bd94:	29782504 	addi	r5,r5,-8044
 800bd98:	01020074 	movhi	r4,2049
 800bd9c:	21382504 	addi	r4,r4,-8044
 800bda0:	800bcd80 	call	800bcd8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800bda4:	800cf2c0 	call	800cf2c <alt_dcache_flush_all>
  alt_icache_flush_all();
 800bda8:	800d1180 	call	800d118 <alt_icache_flush_all>
}
 800bdac:	0001883a 	nop
 800bdb0:	e037883a 	mov	sp,fp
 800bdb4:	dfc00117 	ldw	ra,4(sp)
 800bdb8:	df000017 	ldw	fp,0(sp)
 800bdbc:	dec00204 	addi	sp,sp,8
 800bdc0:	f800283a 	ret

0800bdc4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800bdc4:	defffd04 	addi	sp,sp,-12
 800bdc8:	dfc00215 	stw	ra,8(sp)
 800bdcc:	df000115 	stw	fp,4(sp)
 800bdd0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800bdd4:	0009883a 	mov	r4,zero
 800bdd8:	800bf9c0 	call	800bf9c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800bddc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800bde0:	800bfd40 	call	800bfd4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800bde4:	01820074 	movhi	r6,2049
 800bde8:	31b8ec04 	addi	r6,r6,-7248
 800bdec:	01420074 	movhi	r5,2049
 800bdf0:	2978ec04 	addi	r5,r5,-7248
 800bdf4:	01020074 	movhi	r4,2049
 800bdf8:	2138ec04 	addi	r4,r4,-7248
 800bdfc:	800d4bc0 	call	800d4bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800be00:	800d0580 	call	800d058 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800be04:	01020074 	movhi	r4,2049
 800be08:	21342e04 	addi	r4,r4,-12104
 800be0c:	800dd000 	call	800dd00 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800be10:	d0a72e17 	ldw	r2,-25416(gp)
 800be14:	d0e72f17 	ldw	r3,-25412(gp)
 800be18:	d1273017 	ldw	r4,-25408(gp)
 800be1c:	200d883a 	mov	r6,r4
 800be20:	180b883a 	mov	r5,r3
 800be24:	1009883a 	mov	r4,r2
 800be28:	80006000 	call	8000600 <main>
 800be2c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800be30:	01000044 	movi	r4,1
 800be34:	800ce540 	call	800ce54 <close>
  exit (result);
 800be38:	e13fff17 	ldw	r4,-4(fp)
 800be3c:	800dd140 	call	800dd14 <exit>

0800be40 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800be40:	defffe04 	addi	sp,sp,-8
 800be44:	df000115 	stw	fp,4(sp)
 800be48:	df000104 	addi	fp,sp,4
 800be4c:	e13fff15 	stw	r4,-4(fp)
}
 800be50:	0001883a 	nop
 800be54:	e037883a 	mov	sp,fp
 800be58:	df000017 	ldw	fp,0(sp)
 800be5c:	dec00104 	addi	sp,sp,4
 800be60:	f800283a 	ret

0800be64 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800be64:	defffe04 	addi	sp,sp,-8
 800be68:	df000115 	stw	fp,4(sp)
 800be6c:	df000104 	addi	fp,sp,4
 800be70:	e13fff15 	stw	r4,-4(fp)
}
 800be74:	0001883a 	nop
 800be78:	e037883a 	mov	sp,fp
 800be7c:	df000017 	ldw	fp,0(sp)
 800be80:	dec00104 	addi	sp,sp,4
 800be84:	f800283a 	ret

0800be88 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800be88:	defff904 	addi	sp,sp,-28
 800be8c:	df000615 	stw	fp,24(sp)
 800be90:	df000604 	addi	fp,sp,24
 800be94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800be98:	0005303a 	rdctl	r2,status
 800be9c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800bea0:	e0fffe17 	ldw	r3,-8(fp)
 800bea4:	00bfff84 	movi	r2,-2
 800bea8:	1884703a 	and	r2,r3,r2
 800beac:	1001703a 	wrctl	status,r2
  
  return context;
 800beb0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800beb4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800beb8:	d0a00617 	ldw	r2,-32744(gp)
 800bebc:	10c000c4 	addi	r3,r2,3
 800bec0:	00bfff04 	movi	r2,-4
 800bec4:	1884703a 	and	r2,r3,r2
 800bec8:	d0a00615 	stw	r2,-32744(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800becc:	d0e00617 	ldw	r3,-32744(gp)
 800bed0:	e0bfff17 	ldw	r2,-4(fp)
 800bed4:	1887883a 	add	r3,r3,r2
 800bed8:	00830034 	movhi	r2,3072
 800bedc:	10800004 	addi	r2,r2,0
 800bee0:	10c0062e 	bgeu	r2,r3,800befc <sbrk+0x74>
 800bee4:	e0bffb17 	ldw	r2,-20(fp)
 800bee8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800beec:	e0bffa17 	ldw	r2,-24(fp)
 800bef0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800bef4:	00bfffc4 	movi	r2,-1
 800bef8:	00000b06 	br	800bf28 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800befc:	d0a00617 	ldw	r2,-32744(gp)
 800bf00:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800bf04:	d0e00617 	ldw	r3,-32744(gp)
 800bf08:	e0bfff17 	ldw	r2,-4(fp)
 800bf0c:	1885883a 	add	r2,r3,r2
 800bf10:	d0a00615 	stw	r2,-32744(gp)
 800bf14:	e0bffb17 	ldw	r2,-20(fp)
 800bf18:	e0bffc15 	stw	r2,-16(fp)
 800bf1c:	e0bffc17 	ldw	r2,-16(fp)
 800bf20:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800bf24:	e0bffd17 	ldw	r2,-12(fp)
} 
 800bf28:	e037883a 	mov	sp,fp
 800bf2c:	df000017 	ldw	fp,0(sp)
 800bf30:	dec00104 	addi	sp,sp,4
 800bf34:	f800283a 	ret

0800bf38 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800bf38:	defffd04 	addi	sp,sp,-12
 800bf3c:	dfc00215 	stw	ra,8(sp)
 800bf40:	df000115 	stw	fp,4(sp)
 800bf44:	df000104 	addi	fp,sp,4
 800bf48:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800bf4c:	e13fff17 	ldw	r4,-4(fp)
 800bf50:	800ccc00 	call	800ccc0 <alt_busy_sleep>
}
 800bf54:	e037883a 	mov	sp,fp
 800bf58:	dfc00117 	ldw	ra,4(sp)
 800bf5c:	df000017 	ldw	fp,0(sp)
 800bf60:	dec00204 	addi	sp,sp,8
 800bf64:	f800283a 	ret

0800bf68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800bf68:	defffd04 	addi	sp,sp,-12
 800bf6c:	dfc00215 	stw	ra,8(sp)
 800bf70:	df000115 	stw	fp,4(sp)
 800bf74:	df000104 	addi	fp,sp,4
 800bf78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800bf7c:	d1600904 	addi	r5,gp,-32732
 800bf80:	e13fff17 	ldw	r4,-4(fp)
 800bf84:	800cfb40 	call	800cfb4 <alt_dev_llist_insert>
}
 800bf88:	e037883a 	mov	sp,fp
 800bf8c:	dfc00117 	ldw	ra,4(sp)
 800bf90:	df000017 	ldw	fp,0(sp)
 800bf94:	dec00204 	addi	sp,sp,8
 800bf98:	f800283a 	ret

0800bf9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800bf9c:	defffd04 	addi	sp,sp,-12
 800bfa0:	dfc00215 	stw	ra,8(sp)
 800bfa4:	df000115 	stw	fp,4(sp)
 800bfa8:	df000104 	addi	fp,sp,4
 800bfac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800bfb0:	800d9e40 	call	800d9e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800bfb4:	00800044 	movi	r2,1
 800bfb8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800bfbc:	0001883a 	nop
 800bfc0:	e037883a 	mov	sp,fp
 800bfc4:	dfc00117 	ldw	ra,4(sp)
 800bfc8:	df000017 	ldw	fp,0(sp)
 800bfcc:	dec00204 	addi	sp,sp,8
 800bfd0:	f800283a 	ret

0800bfd4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800bfd4:	defffe04 	addi	sp,sp,-8
 800bfd8:	dfc00115 	stw	ra,4(sp)
 800bfdc:	df000015 	stw	fp,0(sp)
 800bfe0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 800bfe4:	01c0fa04 	movi	r7,1000
 800bfe8:	01800084 	movi	r6,2
 800bfec:	000b883a 	mov	r5,zero
 800bff0:	01081004 	movi	r4,8256
 800bff4:	800cb180 	call	800cb18 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 800bff8:	01800044 	movi	r6,1
 800bffc:	000b883a 	mov	r5,zero
 800c000:	01020074 	movhi	r4,2049
 800c004:	213b8604 	addi	r4,r4,-4584
 800c008:	800c19c0 	call	800c19c <altera_avalon_jtag_uart_init>
 800c00c:	01020074 	movhi	r4,2049
 800c010:	213b7c04 	addi	r4,r4,-4624
 800c014:	800bf680 	call	800bf68 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI0, spi0);
 800c018:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800c01c:	0001883a 	nop
}
 800c020:	0001883a 	nop
 800c024:	e037883a 	mov	sp,fp
 800c028:	dfc00117 	ldw	ra,4(sp)
 800c02c:	df000017 	ldw	fp,0(sp)
 800c030:	dec00204 	addi	sp,sp,8
 800c034:	f800283a 	ret

0800c038 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800c038:	defffa04 	addi	sp,sp,-24
 800c03c:	dfc00515 	stw	ra,20(sp)
 800c040:	df000415 	stw	fp,16(sp)
 800c044:	df000404 	addi	fp,sp,16
 800c048:	e13ffd15 	stw	r4,-12(fp)
 800c04c:	e17ffe15 	stw	r5,-8(fp)
 800c050:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800c054:	e0bffd17 	ldw	r2,-12(fp)
 800c058:	10800017 	ldw	r2,0(r2)
 800c05c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800c060:	e0bffc17 	ldw	r2,-16(fp)
 800c064:	10c00a04 	addi	r3,r2,40
 800c068:	e0bffd17 	ldw	r2,-12(fp)
 800c06c:	10800217 	ldw	r2,8(r2)
 800c070:	100f883a 	mov	r7,r2
 800c074:	e1bfff17 	ldw	r6,-4(fp)
 800c078:	e17ffe17 	ldw	r5,-8(fp)
 800c07c:	1809883a 	mov	r4,r3
 800c080:	800c6600 	call	800c660 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800c084:	e037883a 	mov	sp,fp
 800c088:	dfc00117 	ldw	ra,4(sp)
 800c08c:	df000017 	ldw	fp,0(sp)
 800c090:	dec00204 	addi	sp,sp,8
 800c094:	f800283a 	ret

0800c098 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800c098:	defffa04 	addi	sp,sp,-24
 800c09c:	dfc00515 	stw	ra,20(sp)
 800c0a0:	df000415 	stw	fp,16(sp)
 800c0a4:	df000404 	addi	fp,sp,16
 800c0a8:	e13ffd15 	stw	r4,-12(fp)
 800c0ac:	e17ffe15 	stw	r5,-8(fp)
 800c0b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800c0b4:	e0bffd17 	ldw	r2,-12(fp)
 800c0b8:	10800017 	ldw	r2,0(r2)
 800c0bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800c0c0:	e0bffc17 	ldw	r2,-16(fp)
 800c0c4:	10c00a04 	addi	r3,r2,40
 800c0c8:	e0bffd17 	ldw	r2,-12(fp)
 800c0cc:	10800217 	ldw	r2,8(r2)
 800c0d0:	100f883a 	mov	r7,r2
 800c0d4:	e1bfff17 	ldw	r6,-4(fp)
 800c0d8:	e17ffe17 	ldw	r5,-8(fp)
 800c0dc:	1809883a 	mov	r4,r3
 800c0e0:	800c87c0 	call	800c87c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800c0e4:	e037883a 	mov	sp,fp
 800c0e8:	dfc00117 	ldw	ra,4(sp)
 800c0ec:	df000017 	ldw	fp,0(sp)
 800c0f0:	dec00204 	addi	sp,sp,8
 800c0f4:	f800283a 	ret

0800c0f8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800c0f8:	defffc04 	addi	sp,sp,-16
 800c0fc:	dfc00315 	stw	ra,12(sp)
 800c100:	df000215 	stw	fp,8(sp)
 800c104:	df000204 	addi	fp,sp,8
 800c108:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800c10c:	e0bfff17 	ldw	r2,-4(fp)
 800c110:	10800017 	ldw	r2,0(r2)
 800c114:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800c118:	e0bffe17 	ldw	r2,-8(fp)
 800c11c:	10c00a04 	addi	r3,r2,40
 800c120:	e0bfff17 	ldw	r2,-4(fp)
 800c124:	10800217 	ldw	r2,8(r2)
 800c128:	100b883a 	mov	r5,r2
 800c12c:	1809883a 	mov	r4,r3
 800c130:	800c5080 	call	800c508 <altera_avalon_jtag_uart_close>
}
 800c134:	e037883a 	mov	sp,fp
 800c138:	dfc00117 	ldw	ra,4(sp)
 800c13c:	df000017 	ldw	fp,0(sp)
 800c140:	dec00204 	addi	sp,sp,8
 800c144:	f800283a 	ret

0800c148 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800c148:	defffa04 	addi	sp,sp,-24
 800c14c:	dfc00515 	stw	ra,20(sp)
 800c150:	df000415 	stw	fp,16(sp)
 800c154:	df000404 	addi	fp,sp,16
 800c158:	e13ffd15 	stw	r4,-12(fp)
 800c15c:	e17ffe15 	stw	r5,-8(fp)
 800c160:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800c164:	e0bffd17 	ldw	r2,-12(fp)
 800c168:	10800017 	ldw	r2,0(r2)
 800c16c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800c170:	e0bffc17 	ldw	r2,-16(fp)
 800c174:	10800a04 	addi	r2,r2,40
 800c178:	e1bfff17 	ldw	r6,-4(fp)
 800c17c:	e17ffe17 	ldw	r5,-8(fp)
 800c180:	1009883a 	mov	r4,r2
 800c184:	800c5700 	call	800c570 <altera_avalon_jtag_uart_ioctl>
}
 800c188:	e037883a 	mov	sp,fp
 800c18c:	dfc00117 	ldw	ra,4(sp)
 800c190:	df000017 	ldw	fp,0(sp)
 800c194:	dec00204 	addi	sp,sp,8
 800c198:	f800283a 	ret

0800c19c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800c19c:	defffa04 	addi	sp,sp,-24
 800c1a0:	dfc00515 	stw	ra,20(sp)
 800c1a4:	df000415 	stw	fp,16(sp)
 800c1a8:	df000404 	addi	fp,sp,16
 800c1ac:	e13ffd15 	stw	r4,-12(fp)
 800c1b0:	e17ffe15 	stw	r5,-8(fp)
 800c1b4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c1b8:	e0bffd17 	ldw	r2,-12(fp)
 800c1bc:	00c00044 	movi	r3,1
 800c1c0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800c1c4:	e0bffd17 	ldw	r2,-12(fp)
 800c1c8:	10800017 	ldw	r2,0(r2)
 800c1cc:	10800104 	addi	r2,r2,4
 800c1d0:	1007883a 	mov	r3,r2
 800c1d4:	e0bffd17 	ldw	r2,-12(fp)
 800c1d8:	10800817 	ldw	r2,32(r2)
 800c1dc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800c1e0:	e0bffe17 	ldw	r2,-8(fp)
 800c1e4:	e0ffff17 	ldw	r3,-4(fp)
 800c1e8:	d8000015 	stw	zero,0(sp)
 800c1ec:	e1fffd17 	ldw	r7,-12(fp)
 800c1f0:	01820074 	movhi	r6,2049
 800c1f4:	31b09704 	addi	r6,r6,-15780
 800c1f8:	180b883a 	mov	r5,r3
 800c1fc:	1009883a 	mov	r4,r2
 800c200:	800d1380 	call	800d138 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800c204:	e0bffd17 	ldw	r2,-12(fp)
 800c208:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800c20c:	e0bffd17 	ldw	r2,-12(fp)
 800c210:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800c214:	d0e73217 	ldw	r3,-25400(gp)
 800c218:	e1fffd17 	ldw	r7,-12(fp)
 800c21c:	01820074 	movhi	r6,2049
 800c220:	31b11a04 	addi	r6,r6,-15256
 800c224:	180b883a 	mov	r5,r3
 800c228:	1009883a 	mov	r4,r2
 800c22c:	800cb940 	call	800cb94 <alt_alarm_start>
 800c230:	1000040e 	bge	r2,zero,800c244 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800c234:	e0fffd17 	ldw	r3,-12(fp)
 800c238:	00a00034 	movhi	r2,32768
 800c23c:	10bfffc4 	addi	r2,r2,-1
 800c240:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800c244:	0001883a 	nop
 800c248:	e037883a 	mov	sp,fp
 800c24c:	dfc00117 	ldw	ra,4(sp)
 800c250:	df000017 	ldw	fp,0(sp)
 800c254:	dec00204 	addi	sp,sp,8
 800c258:	f800283a 	ret

0800c25c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800c25c:	defff804 	addi	sp,sp,-32
 800c260:	df000715 	stw	fp,28(sp)
 800c264:	df000704 	addi	fp,sp,28
 800c268:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800c26c:	e0bfff17 	ldw	r2,-4(fp)
 800c270:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800c274:	e0bffb17 	ldw	r2,-20(fp)
 800c278:	10800017 	ldw	r2,0(r2)
 800c27c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c280:	e0bffc17 	ldw	r2,-16(fp)
 800c284:	10800104 	addi	r2,r2,4
 800c288:	10800037 	ldwio	r2,0(r2)
 800c28c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800c290:	e0bffd17 	ldw	r2,-12(fp)
 800c294:	1080c00c 	andi	r2,r2,768
 800c298:	10006d26 	beq	r2,zero,800c450 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800c29c:	e0bffd17 	ldw	r2,-12(fp)
 800c2a0:	1080400c 	andi	r2,r2,256
 800c2a4:	10003526 	beq	r2,zero,800c37c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800c2a8:	00800074 	movhi	r2,1
 800c2ac:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c2b0:	e0bffb17 	ldw	r2,-20(fp)
 800c2b4:	10800a17 	ldw	r2,40(r2)
 800c2b8:	10800044 	addi	r2,r2,1
 800c2bc:	1081ffcc 	andi	r2,r2,2047
 800c2c0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800c2c4:	e0bffb17 	ldw	r2,-20(fp)
 800c2c8:	10c00b17 	ldw	r3,44(r2)
 800c2cc:	e0bffe17 	ldw	r2,-8(fp)
 800c2d0:	18801526 	beq	r3,r2,800c328 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800c2d4:	e0bffc17 	ldw	r2,-16(fp)
 800c2d8:	10800037 	ldwio	r2,0(r2)
 800c2dc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800c2e0:	e0bff917 	ldw	r2,-28(fp)
 800c2e4:	10a0000c 	andi	r2,r2,32768
 800c2e8:	10001126 	beq	r2,zero,800c330 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800c2ec:	e0bffb17 	ldw	r2,-20(fp)
 800c2f0:	10800a17 	ldw	r2,40(r2)
 800c2f4:	e0fff917 	ldw	r3,-28(fp)
 800c2f8:	1809883a 	mov	r4,r3
 800c2fc:	e0fffb17 	ldw	r3,-20(fp)
 800c300:	1885883a 	add	r2,r3,r2
 800c304:	10800e04 	addi	r2,r2,56
 800c308:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c30c:	e0bffb17 	ldw	r2,-20(fp)
 800c310:	10800a17 	ldw	r2,40(r2)
 800c314:	10800044 	addi	r2,r2,1
 800c318:	10c1ffcc 	andi	r3,r2,2047
 800c31c:	e0bffb17 	ldw	r2,-20(fp)
 800c320:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800c324:	003fe206 	br	800c2b0 <__alt_data_end+0xfc00c2b0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800c328:	0001883a 	nop
 800c32c:	00000106 	br	800c334 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800c330:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800c334:	e0bff917 	ldw	r2,-28(fp)
 800c338:	10bfffec 	andhi	r2,r2,65535
 800c33c:	10000f26 	beq	r2,zero,800c37c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c340:	e0bffb17 	ldw	r2,-20(fp)
 800c344:	10c00817 	ldw	r3,32(r2)
 800c348:	00bfff84 	movi	r2,-2
 800c34c:	1886703a 	and	r3,r3,r2
 800c350:	e0bffb17 	ldw	r2,-20(fp)
 800c354:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800c358:	e0bffc17 	ldw	r2,-16(fp)
 800c35c:	10800104 	addi	r2,r2,4
 800c360:	1007883a 	mov	r3,r2
 800c364:	e0bffb17 	ldw	r2,-20(fp)
 800c368:	10800817 	ldw	r2,32(r2)
 800c36c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c370:	e0bffc17 	ldw	r2,-16(fp)
 800c374:	10800104 	addi	r2,r2,4
 800c378:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800c37c:	e0bffd17 	ldw	r2,-12(fp)
 800c380:	1080800c 	andi	r2,r2,512
 800c384:	103fbe26 	beq	r2,zero,800c280 <__alt_data_end+0xfc00c280>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800c388:	e0bffd17 	ldw	r2,-12(fp)
 800c38c:	1004d43a 	srli	r2,r2,16
 800c390:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800c394:	00001406 	br	800c3e8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800c398:	e0bffc17 	ldw	r2,-16(fp)
 800c39c:	e0fffb17 	ldw	r3,-20(fp)
 800c3a0:	18c00d17 	ldw	r3,52(r3)
 800c3a4:	e13ffb17 	ldw	r4,-20(fp)
 800c3a8:	20c7883a 	add	r3,r4,r3
 800c3ac:	18c20e04 	addi	r3,r3,2104
 800c3b0:	18c00003 	ldbu	r3,0(r3)
 800c3b4:	18c03fcc 	andi	r3,r3,255
 800c3b8:	18c0201c 	xori	r3,r3,128
 800c3bc:	18ffe004 	addi	r3,r3,-128
 800c3c0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c3c4:	e0bffb17 	ldw	r2,-20(fp)
 800c3c8:	10800d17 	ldw	r2,52(r2)
 800c3cc:	10800044 	addi	r2,r2,1
 800c3d0:	10c1ffcc 	andi	r3,r2,2047
 800c3d4:	e0bffb17 	ldw	r2,-20(fp)
 800c3d8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800c3dc:	e0bffa17 	ldw	r2,-24(fp)
 800c3e0:	10bfffc4 	addi	r2,r2,-1
 800c3e4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800c3e8:	e0bffa17 	ldw	r2,-24(fp)
 800c3ec:	10000526 	beq	r2,zero,800c404 <altera_avalon_jtag_uart_irq+0x1a8>
 800c3f0:	e0bffb17 	ldw	r2,-20(fp)
 800c3f4:	10c00d17 	ldw	r3,52(r2)
 800c3f8:	e0bffb17 	ldw	r2,-20(fp)
 800c3fc:	10800c17 	ldw	r2,48(r2)
 800c400:	18bfe51e 	bne	r3,r2,800c398 <__alt_data_end+0xfc00c398>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800c404:	e0bffa17 	ldw	r2,-24(fp)
 800c408:	103f9d26 	beq	r2,zero,800c280 <__alt_data_end+0xfc00c280>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800c40c:	e0bffb17 	ldw	r2,-20(fp)
 800c410:	10c00817 	ldw	r3,32(r2)
 800c414:	00bfff44 	movi	r2,-3
 800c418:	1886703a 	and	r3,r3,r2
 800c41c:	e0bffb17 	ldw	r2,-20(fp)
 800c420:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c424:	e0bffb17 	ldw	r2,-20(fp)
 800c428:	10800017 	ldw	r2,0(r2)
 800c42c:	10800104 	addi	r2,r2,4
 800c430:	1007883a 	mov	r3,r2
 800c434:	e0bffb17 	ldw	r2,-20(fp)
 800c438:	10800817 	ldw	r2,32(r2)
 800c43c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c440:	e0bffc17 	ldw	r2,-16(fp)
 800c444:	10800104 	addi	r2,r2,4
 800c448:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800c44c:	003f8c06 	br	800c280 <__alt_data_end+0xfc00c280>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800c450:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 800c454:	0001883a 	nop
 800c458:	e037883a 	mov	sp,fp
 800c45c:	df000017 	ldw	fp,0(sp)
 800c460:	dec00104 	addi	sp,sp,4
 800c464:	f800283a 	ret

0800c468 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800c468:	defff804 	addi	sp,sp,-32
 800c46c:	df000715 	stw	fp,28(sp)
 800c470:	df000704 	addi	fp,sp,28
 800c474:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800c478:	e0bffb17 	ldw	r2,-20(fp)
 800c47c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800c480:	e0bff917 	ldw	r2,-28(fp)
 800c484:	10800017 	ldw	r2,0(r2)
 800c488:	10800104 	addi	r2,r2,4
 800c48c:	10800037 	ldwio	r2,0(r2)
 800c490:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800c494:	e0bffa17 	ldw	r2,-24(fp)
 800c498:	1081000c 	andi	r2,r2,1024
 800c49c:	10000b26 	beq	r2,zero,800c4cc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800c4a0:	e0bff917 	ldw	r2,-28(fp)
 800c4a4:	10800017 	ldw	r2,0(r2)
 800c4a8:	10800104 	addi	r2,r2,4
 800c4ac:	1007883a 	mov	r3,r2
 800c4b0:	e0bff917 	ldw	r2,-28(fp)
 800c4b4:	10800817 	ldw	r2,32(r2)
 800c4b8:	10810014 	ori	r2,r2,1024
 800c4bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800c4c0:	e0bff917 	ldw	r2,-28(fp)
 800c4c4:	10000915 	stw	zero,36(r2)
 800c4c8:	00000a06 	br	800c4f4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800c4cc:	e0bff917 	ldw	r2,-28(fp)
 800c4d0:	10c00917 	ldw	r3,36(r2)
 800c4d4:	00a00034 	movhi	r2,32768
 800c4d8:	10bfff04 	addi	r2,r2,-4
 800c4dc:	10c00536 	bltu	r2,r3,800c4f4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800c4e0:	e0bff917 	ldw	r2,-28(fp)
 800c4e4:	10800917 	ldw	r2,36(r2)
 800c4e8:	10c00044 	addi	r3,r2,1
 800c4ec:	e0bff917 	ldw	r2,-28(fp)
 800c4f0:	10c00915 	stw	r3,36(r2)
 800c4f4:	d0a73217 	ldw	r2,-25400(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800c4f8:	e037883a 	mov	sp,fp
 800c4fc:	df000017 	ldw	fp,0(sp)
 800c500:	dec00104 	addi	sp,sp,4
 800c504:	f800283a 	ret

0800c508 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800c508:	defffd04 	addi	sp,sp,-12
 800c50c:	df000215 	stw	fp,8(sp)
 800c510:	df000204 	addi	fp,sp,8
 800c514:	e13ffe15 	stw	r4,-8(fp)
 800c518:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800c51c:	00000506 	br	800c534 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800c520:	e0bfff17 	ldw	r2,-4(fp)
 800c524:	1090000c 	andi	r2,r2,16384
 800c528:	10000226 	beq	r2,zero,800c534 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800c52c:	00bffd44 	movi	r2,-11
 800c530:	00000b06 	br	800c560 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800c534:	e0bffe17 	ldw	r2,-8(fp)
 800c538:	10c00d17 	ldw	r3,52(r2)
 800c53c:	e0bffe17 	ldw	r2,-8(fp)
 800c540:	10800c17 	ldw	r2,48(r2)
 800c544:	18800526 	beq	r3,r2,800c55c <altera_avalon_jtag_uart_close+0x54>
 800c548:	e0bffe17 	ldw	r2,-8(fp)
 800c54c:	10c00917 	ldw	r3,36(r2)
 800c550:	e0bffe17 	ldw	r2,-8(fp)
 800c554:	10800117 	ldw	r2,4(r2)
 800c558:	18bff136 	bltu	r3,r2,800c520 <__alt_data_end+0xfc00c520>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800c55c:	0005883a 	mov	r2,zero
}
 800c560:	e037883a 	mov	sp,fp
 800c564:	df000017 	ldw	fp,0(sp)
 800c568:	dec00104 	addi	sp,sp,4
 800c56c:	f800283a 	ret

0800c570 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800c570:	defffa04 	addi	sp,sp,-24
 800c574:	df000515 	stw	fp,20(sp)
 800c578:	df000504 	addi	fp,sp,20
 800c57c:	e13ffd15 	stw	r4,-12(fp)
 800c580:	e17ffe15 	stw	r5,-8(fp)
 800c584:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800c588:	00bff9c4 	movi	r2,-25
 800c58c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800c590:	e0bffe17 	ldw	r2,-8(fp)
 800c594:	10da8060 	cmpeqi	r3,r2,27137
 800c598:	1800031e 	bne	r3,zero,800c5a8 <altera_avalon_jtag_uart_ioctl+0x38>
 800c59c:	109a80a0 	cmpeqi	r2,r2,27138
 800c5a0:	1000181e 	bne	r2,zero,800c604 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 800c5a4:	00002906 	br	800c64c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800c5a8:	e0bffd17 	ldw	r2,-12(fp)
 800c5ac:	10c00117 	ldw	r3,4(r2)
 800c5b0:	00a00034 	movhi	r2,32768
 800c5b4:	10bfffc4 	addi	r2,r2,-1
 800c5b8:	18802126 	beq	r3,r2,800c640 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800c5bc:	e0bfff17 	ldw	r2,-4(fp)
 800c5c0:	10800017 	ldw	r2,0(r2)
 800c5c4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800c5c8:	e0bffc17 	ldw	r2,-16(fp)
 800c5cc:	10800090 	cmplti	r2,r2,2
 800c5d0:	1000061e 	bne	r2,zero,800c5ec <altera_avalon_jtag_uart_ioctl+0x7c>
 800c5d4:	e0fffc17 	ldw	r3,-16(fp)
 800c5d8:	00a00034 	movhi	r2,32768
 800c5dc:	10bfffc4 	addi	r2,r2,-1
 800c5e0:	18800226 	beq	r3,r2,800c5ec <altera_avalon_jtag_uart_ioctl+0x7c>
 800c5e4:	e0bffc17 	ldw	r2,-16(fp)
 800c5e8:	00000206 	br	800c5f4 <altera_avalon_jtag_uart_ioctl+0x84>
 800c5ec:	00a00034 	movhi	r2,32768
 800c5f0:	10bfff84 	addi	r2,r2,-2
 800c5f4:	e0fffd17 	ldw	r3,-12(fp)
 800c5f8:	18800115 	stw	r2,4(r3)
      rc = 0;
 800c5fc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800c600:	00000f06 	br	800c640 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800c604:	e0bffd17 	ldw	r2,-12(fp)
 800c608:	10c00117 	ldw	r3,4(r2)
 800c60c:	00a00034 	movhi	r2,32768
 800c610:	10bfffc4 	addi	r2,r2,-1
 800c614:	18800c26 	beq	r3,r2,800c648 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800c618:	e0bffd17 	ldw	r2,-12(fp)
 800c61c:	10c00917 	ldw	r3,36(r2)
 800c620:	e0bffd17 	ldw	r2,-12(fp)
 800c624:	10800117 	ldw	r2,4(r2)
 800c628:	1885803a 	cmpltu	r2,r3,r2
 800c62c:	10c03fcc 	andi	r3,r2,255
 800c630:	e0bfff17 	ldw	r2,-4(fp)
 800c634:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800c638:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800c63c:	00000206 	br	800c648 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800c640:	0001883a 	nop
 800c644:	00000106 	br	800c64c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800c648:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800c64c:	e0bffb17 	ldw	r2,-20(fp)
}
 800c650:	e037883a 	mov	sp,fp
 800c654:	df000017 	ldw	fp,0(sp)
 800c658:	dec00104 	addi	sp,sp,4
 800c65c:	f800283a 	ret

0800c660 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800c660:	defff304 	addi	sp,sp,-52
 800c664:	dfc00c15 	stw	ra,48(sp)
 800c668:	df000b15 	stw	fp,44(sp)
 800c66c:	df000b04 	addi	fp,sp,44
 800c670:	e13ffc15 	stw	r4,-16(fp)
 800c674:	e17ffd15 	stw	r5,-12(fp)
 800c678:	e1bffe15 	stw	r6,-8(fp)
 800c67c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800c680:	e0bffd17 	ldw	r2,-12(fp)
 800c684:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800c688:	00004706 	br	800c7a8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800c68c:	e0bffc17 	ldw	r2,-16(fp)
 800c690:	10800a17 	ldw	r2,40(r2)
 800c694:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800c698:	e0bffc17 	ldw	r2,-16(fp)
 800c69c:	10800b17 	ldw	r2,44(r2)
 800c6a0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800c6a4:	e0fff717 	ldw	r3,-36(fp)
 800c6a8:	e0bff817 	ldw	r2,-32(fp)
 800c6ac:	18800536 	bltu	r3,r2,800c6c4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800c6b0:	e0fff717 	ldw	r3,-36(fp)
 800c6b4:	e0bff817 	ldw	r2,-32(fp)
 800c6b8:	1885c83a 	sub	r2,r3,r2
 800c6bc:	e0bff615 	stw	r2,-40(fp)
 800c6c0:	00000406 	br	800c6d4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800c6c4:	00c20004 	movi	r3,2048
 800c6c8:	e0bff817 	ldw	r2,-32(fp)
 800c6cc:	1885c83a 	sub	r2,r3,r2
 800c6d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800c6d4:	e0bff617 	ldw	r2,-40(fp)
 800c6d8:	10001e26 	beq	r2,zero,800c754 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800c6dc:	e0fffe17 	ldw	r3,-8(fp)
 800c6e0:	e0bff617 	ldw	r2,-40(fp)
 800c6e4:	1880022e 	bgeu	r3,r2,800c6f0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800c6e8:	e0bffe17 	ldw	r2,-8(fp)
 800c6ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800c6f0:	e0bffc17 	ldw	r2,-16(fp)
 800c6f4:	10c00e04 	addi	r3,r2,56
 800c6f8:	e0bff817 	ldw	r2,-32(fp)
 800c6fc:	1885883a 	add	r2,r3,r2
 800c700:	e1bff617 	ldw	r6,-40(fp)
 800c704:	100b883a 	mov	r5,r2
 800c708:	e13ff517 	ldw	r4,-44(fp)
 800c70c:	800515c0 	call	800515c <memcpy>
      ptr   += n;
 800c710:	e0fff517 	ldw	r3,-44(fp)
 800c714:	e0bff617 	ldw	r2,-40(fp)
 800c718:	1885883a 	add	r2,r3,r2
 800c71c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800c720:	e0fffe17 	ldw	r3,-8(fp)
 800c724:	e0bff617 	ldw	r2,-40(fp)
 800c728:	1885c83a 	sub	r2,r3,r2
 800c72c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c730:	e0fff817 	ldw	r3,-32(fp)
 800c734:	e0bff617 	ldw	r2,-40(fp)
 800c738:	1885883a 	add	r2,r3,r2
 800c73c:	10c1ffcc 	andi	r3,r2,2047
 800c740:	e0bffc17 	ldw	r2,-16(fp)
 800c744:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800c748:	e0bffe17 	ldw	r2,-8(fp)
 800c74c:	00bfcf16 	blt	zero,r2,800c68c <__alt_data_end+0xfc00c68c>
 800c750:	00000106 	br	800c758 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800c754:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800c758:	e0fff517 	ldw	r3,-44(fp)
 800c75c:	e0bffd17 	ldw	r2,-12(fp)
 800c760:	1880141e 	bne	r3,r2,800c7b4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800c764:	e0bfff17 	ldw	r2,-4(fp)
 800c768:	1090000c 	andi	r2,r2,16384
 800c76c:	1000131e 	bne	r2,zero,800c7bc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800c770:	0001883a 	nop
 800c774:	e0bffc17 	ldw	r2,-16(fp)
 800c778:	10c00a17 	ldw	r3,40(r2)
 800c77c:	e0bff717 	ldw	r2,-36(fp)
 800c780:	1880051e 	bne	r3,r2,800c798 <altera_avalon_jtag_uart_read+0x138>
 800c784:	e0bffc17 	ldw	r2,-16(fp)
 800c788:	10c00917 	ldw	r3,36(r2)
 800c78c:	e0bffc17 	ldw	r2,-16(fp)
 800c790:	10800117 	ldw	r2,4(r2)
 800c794:	18bff736 	bltu	r3,r2,800c774 <__alt_data_end+0xfc00c774>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800c798:	e0bffc17 	ldw	r2,-16(fp)
 800c79c:	10c00a17 	ldw	r3,40(r2)
 800c7a0:	e0bff717 	ldw	r2,-36(fp)
 800c7a4:	18800726 	beq	r3,r2,800c7c4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800c7a8:	e0bffe17 	ldw	r2,-8(fp)
 800c7ac:	00bfb716 	blt	zero,r2,800c68c <__alt_data_end+0xfc00c68c>
 800c7b0:	00000506 	br	800c7c8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 800c7b4:	0001883a 	nop
 800c7b8:	00000306 	br	800c7c8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800c7bc:	0001883a 	nop
 800c7c0:	00000106 	br	800c7c8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 800c7c4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800c7c8:	e0fff517 	ldw	r3,-44(fp)
 800c7cc:	e0bffd17 	ldw	r2,-12(fp)
 800c7d0:	18801826 	beq	r3,r2,800c834 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c7d4:	0005303a 	rdctl	r2,status
 800c7d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c7dc:	e0fffb17 	ldw	r3,-20(fp)
 800c7e0:	00bfff84 	movi	r2,-2
 800c7e4:	1884703a 	and	r2,r3,r2
 800c7e8:	1001703a 	wrctl	status,r2
  
  return context;
 800c7ec:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800c7f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c7f4:	e0bffc17 	ldw	r2,-16(fp)
 800c7f8:	10800817 	ldw	r2,32(r2)
 800c7fc:	10c00054 	ori	r3,r2,1
 800c800:	e0bffc17 	ldw	r2,-16(fp)
 800c804:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c808:	e0bffc17 	ldw	r2,-16(fp)
 800c80c:	10800017 	ldw	r2,0(r2)
 800c810:	10800104 	addi	r2,r2,4
 800c814:	1007883a 	mov	r3,r2
 800c818:	e0bffc17 	ldw	r2,-16(fp)
 800c81c:	10800817 	ldw	r2,32(r2)
 800c820:	18800035 	stwio	r2,0(r3)
 800c824:	e0bffa17 	ldw	r2,-24(fp)
 800c828:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c82c:	e0bff917 	ldw	r2,-28(fp)
 800c830:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800c834:	e0fff517 	ldw	r3,-44(fp)
 800c838:	e0bffd17 	ldw	r2,-12(fp)
 800c83c:	18800426 	beq	r3,r2,800c850 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800c840:	e0fff517 	ldw	r3,-44(fp)
 800c844:	e0bffd17 	ldw	r2,-12(fp)
 800c848:	1885c83a 	sub	r2,r3,r2
 800c84c:	00000606 	br	800c868 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800c850:	e0bfff17 	ldw	r2,-4(fp)
 800c854:	1090000c 	andi	r2,r2,16384
 800c858:	10000226 	beq	r2,zero,800c864 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800c85c:	00bffd44 	movi	r2,-11
 800c860:	00000106 	br	800c868 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 800c864:	00bffec4 	movi	r2,-5
}
 800c868:	e037883a 	mov	sp,fp
 800c86c:	dfc00117 	ldw	ra,4(sp)
 800c870:	df000017 	ldw	fp,0(sp)
 800c874:	dec00204 	addi	sp,sp,8
 800c878:	f800283a 	ret

0800c87c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800c87c:	defff304 	addi	sp,sp,-52
 800c880:	dfc00c15 	stw	ra,48(sp)
 800c884:	df000b15 	stw	fp,44(sp)
 800c888:	df000b04 	addi	fp,sp,44
 800c88c:	e13ffc15 	stw	r4,-16(fp)
 800c890:	e17ffd15 	stw	r5,-12(fp)
 800c894:	e1bffe15 	stw	r6,-8(fp)
 800c898:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800c89c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800c8a0:	e0bffd17 	ldw	r2,-12(fp)
 800c8a4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800c8a8:	00003706 	br	800c988 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800c8ac:	e0bffc17 	ldw	r2,-16(fp)
 800c8b0:	10800c17 	ldw	r2,48(r2)
 800c8b4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 800c8b8:	e0bffc17 	ldw	r2,-16(fp)
 800c8bc:	10800d17 	ldw	r2,52(r2)
 800c8c0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800c8c4:	e0fff917 	ldw	r3,-28(fp)
 800c8c8:	e0bff517 	ldw	r2,-44(fp)
 800c8cc:	1880062e 	bgeu	r3,r2,800c8e8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800c8d0:	e0fff517 	ldw	r3,-44(fp)
 800c8d4:	e0bff917 	ldw	r2,-28(fp)
 800c8d8:	1885c83a 	sub	r2,r3,r2
 800c8dc:	10bfffc4 	addi	r2,r2,-1
 800c8e0:	e0bff615 	stw	r2,-40(fp)
 800c8e4:	00000b06 	br	800c914 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800c8e8:	e0bff517 	ldw	r2,-44(fp)
 800c8ec:	10000526 	beq	r2,zero,800c904 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800c8f0:	00c20004 	movi	r3,2048
 800c8f4:	e0bff917 	ldw	r2,-28(fp)
 800c8f8:	1885c83a 	sub	r2,r3,r2
 800c8fc:	e0bff615 	stw	r2,-40(fp)
 800c900:	00000406 	br	800c914 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800c904:	00c1ffc4 	movi	r3,2047
 800c908:	e0bff917 	ldw	r2,-28(fp)
 800c90c:	1885c83a 	sub	r2,r3,r2
 800c910:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800c914:	e0bff617 	ldw	r2,-40(fp)
 800c918:	10001e26 	beq	r2,zero,800c994 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800c91c:	e0fffe17 	ldw	r3,-8(fp)
 800c920:	e0bff617 	ldw	r2,-40(fp)
 800c924:	1880022e 	bgeu	r3,r2,800c930 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800c928:	e0bffe17 	ldw	r2,-8(fp)
 800c92c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800c930:	e0bffc17 	ldw	r2,-16(fp)
 800c934:	10c20e04 	addi	r3,r2,2104
 800c938:	e0bff917 	ldw	r2,-28(fp)
 800c93c:	1885883a 	add	r2,r3,r2
 800c940:	e1bff617 	ldw	r6,-40(fp)
 800c944:	e17ffd17 	ldw	r5,-12(fp)
 800c948:	1009883a 	mov	r4,r2
 800c94c:	800515c0 	call	800515c <memcpy>
      ptr   += n;
 800c950:	e0fffd17 	ldw	r3,-12(fp)
 800c954:	e0bff617 	ldw	r2,-40(fp)
 800c958:	1885883a 	add	r2,r3,r2
 800c95c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800c960:	e0fffe17 	ldw	r3,-8(fp)
 800c964:	e0bff617 	ldw	r2,-40(fp)
 800c968:	1885c83a 	sub	r2,r3,r2
 800c96c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c970:	e0fff917 	ldw	r3,-28(fp)
 800c974:	e0bff617 	ldw	r2,-40(fp)
 800c978:	1885883a 	add	r2,r3,r2
 800c97c:	10c1ffcc 	andi	r3,r2,2047
 800c980:	e0bffc17 	ldw	r2,-16(fp)
 800c984:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800c988:	e0bffe17 	ldw	r2,-8(fp)
 800c98c:	00bfc716 	blt	zero,r2,800c8ac <__alt_data_end+0xfc00c8ac>
 800c990:	00000106 	br	800c998 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 800c994:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c998:	0005303a 	rdctl	r2,status
 800c99c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c9a0:	e0fffb17 	ldw	r3,-20(fp)
 800c9a4:	00bfff84 	movi	r2,-2
 800c9a8:	1884703a 	and	r2,r3,r2
 800c9ac:	1001703a 	wrctl	status,r2
  
  return context;
 800c9b0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800c9b4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800c9b8:	e0bffc17 	ldw	r2,-16(fp)
 800c9bc:	10800817 	ldw	r2,32(r2)
 800c9c0:	10c00094 	ori	r3,r2,2
 800c9c4:	e0bffc17 	ldw	r2,-16(fp)
 800c9c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c9cc:	e0bffc17 	ldw	r2,-16(fp)
 800c9d0:	10800017 	ldw	r2,0(r2)
 800c9d4:	10800104 	addi	r2,r2,4
 800c9d8:	1007883a 	mov	r3,r2
 800c9dc:	e0bffc17 	ldw	r2,-16(fp)
 800c9e0:	10800817 	ldw	r2,32(r2)
 800c9e4:	18800035 	stwio	r2,0(r3)
 800c9e8:	e0bffa17 	ldw	r2,-24(fp)
 800c9ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c9f0:	e0bff817 	ldw	r2,-32(fp)
 800c9f4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800c9f8:	e0bffe17 	ldw	r2,-8(fp)
 800c9fc:	0080100e 	bge	zero,r2,800ca40 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800ca00:	e0bfff17 	ldw	r2,-4(fp)
 800ca04:	1090000c 	andi	r2,r2,16384
 800ca08:	1000101e 	bne	r2,zero,800ca4c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800ca0c:	0001883a 	nop
 800ca10:	e0bffc17 	ldw	r2,-16(fp)
 800ca14:	10c00d17 	ldw	r3,52(r2)
 800ca18:	e0bff517 	ldw	r2,-44(fp)
 800ca1c:	1880051e 	bne	r3,r2,800ca34 <altera_avalon_jtag_uart_write+0x1b8>
 800ca20:	e0bffc17 	ldw	r2,-16(fp)
 800ca24:	10c00917 	ldw	r3,36(r2)
 800ca28:	e0bffc17 	ldw	r2,-16(fp)
 800ca2c:	10800117 	ldw	r2,4(r2)
 800ca30:	18bff736 	bltu	r3,r2,800ca10 <__alt_data_end+0xfc00ca10>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800ca34:	e0bffc17 	ldw	r2,-16(fp)
 800ca38:	10800917 	ldw	r2,36(r2)
 800ca3c:	1000051e 	bne	r2,zero,800ca54 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800ca40:	e0bffe17 	ldw	r2,-8(fp)
 800ca44:	00bfd016 	blt	zero,r2,800c988 <__alt_data_end+0xfc00c988>
 800ca48:	00000306 	br	800ca58 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 800ca4c:	0001883a 	nop
 800ca50:	00000106 	br	800ca58 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 800ca54:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800ca58:	e0fffd17 	ldw	r3,-12(fp)
 800ca5c:	e0bff717 	ldw	r2,-36(fp)
 800ca60:	18800426 	beq	r3,r2,800ca74 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800ca64:	e0fffd17 	ldw	r3,-12(fp)
 800ca68:	e0bff717 	ldw	r2,-36(fp)
 800ca6c:	1885c83a 	sub	r2,r3,r2
 800ca70:	00000606 	br	800ca8c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800ca74:	e0bfff17 	ldw	r2,-4(fp)
 800ca78:	1090000c 	andi	r2,r2,16384
 800ca7c:	10000226 	beq	r2,zero,800ca88 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800ca80:	00bffd44 	movi	r2,-11
 800ca84:	00000106 	br	800ca8c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800ca88:	00bffec4 	movi	r2,-5
}
 800ca8c:	e037883a 	mov	sp,fp
 800ca90:	dfc00117 	ldw	ra,4(sp)
 800ca94:	df000017 	ldw	fp,0(sp)
 800ca98:	dec00204 	addi	sp,sp,8
 800ca9c:	f800283a 	ret

0800caa0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800caa0:	defffa04 	addi	sp,sp,-24
 800caa4:	dfc00515 	stw	ra,20(sp)
 800caa8:	df000415 	stw	fp,16(sp)
 800caac:	df000404 	addi	fp,sp,16
 800cab0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800cab4:	0007883a 	mov	r3,zero
 800cab8:	e0bfff17 	ldw	r2,-4(fp)
 800cabc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800cac0:	e0bfff17 	ldw	r2,-4(fp)
 800cac4:	10800104 	addi	r2,r2,4
 800cac8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800cacc:	0005303a 	rdctl	r2,status
 800cad0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800cad4:	e0fffd17 	ldw	r3,-12(fp)
 800cad8:	00bfff84 	movi	r2,-2
 800cadc:	1884703a 	and	r2,r3,r2
 800cae0:	1001703a 	wrctl	status,r2
  
  return context;
 800cae4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800cae8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800caec:	800d8dc0 	call	800d8dc <alt_tick>
 800caf0:	e0bffc17 	ldw	r2,-16(fp)
 800caf4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800caf8:	e0bffe17 	ldw	r2,-8(fp)
 800cafc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800cb00:	0001883a 	nop
 800cb04:	e037883a 	mov	sp,fp
 800cb08:	dfc00117 	ldw	ra,4(sp)
 800cb0c:	df000017 	ldw	fp,0(sp)
 800cb10:	dec00204 	addi	sp,sp,8
 800cb14:	f800283a 	ret

0800cb18 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800cb18:	defff804 	addi	sp,sp,-32
 800cb1c:	dfc00715 	stw	ra,28(sp)
 800cb20:	df000615 	stw	fp,24(sp)
 800cb24:	df000604 	addi	fp,sp,24
 800cb28:	e13ffc15 	stw	r4,-16(fp)
 800cb2c:	e17ffd15 	stw	r5,-12(fp)
 800cb30:	e1bffe15 	stw	r6,-8(fp)
 800cb34:	e1ffff15 	stw	r7,-4(fp)
 800cb38:	e0bfff17 	ldw	r2,-4(fp)
 800cb3c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800cb40:	d0a73217 	ldw	r2,-25400(gp)
 800cb44:	1000021e 	bne	r2,zero,800cb50 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 800cb48:	e0bffb17 	ldw	r2,-20(fp)
 800cb4c:	d0a73215 	stw	r2,-25400(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800cb50:	e0bffc17 	ldw	r2,-16(fp)
 800cb54:	10800104 	addi	r2,r2,4
 800cb58:	00c001c4 	movi	r3,7
 800cb5c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800cb60:	d8000015 	stw	zero,0(sp)
 800cb64:	e1fffc17 	ldw	r7,-16(fp)
 800cb68:	01820074 	movhi	r6,2049
 800cb6c:	31b2a804 	addi	r6,r6,-13664
 800cb70:	e17ffe17 	ldw	r5,-8(fp)
 800cb74:	e13ffd17 	ldw	r4,-12(fp)
 800cb78:	800d1380 	call	800d138 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800cb7c:	0001883a 	nop
 800cb80:	e037883a 	mov	sp,fp
 800cb84:	dfc00117 	ldw	ra,4(sp)
 800cb88:	df000017 	ldw	fp,0(sp)
 800cb8c:	dec00204 	addi	sp,sp,8
 800cb90:	f800283a 	ret

0800cb94 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800cb94:	defff504 	addi	sp,sp,-44
 800cb98:	df000a15 	stw	fp,40(sp)
 800cb9c:	df000a04 	addi	fp,sp,40
 800cba0:	e13ffc15 	stw	r4,-16(fp)
 800cba4:	e17ffd15 	stw	r5,-12(fp)
 800cba8:	e1bffe15 	stw	r6,-8(fp)
 800cbac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800cbb0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800cbb4:	d0a73217 	ldw	r2,-25400(gp)
  
  if (alt_ticks_per_second ())
 800cbb8:	10003c26 	beq	r2,zero,800ccac <alt_alarm_start+0x118>
  {
    if (alarm)
 800cbbc:	e0bffc17 	ldw	r2,-16(fp)
 800cbc0:	10003826 	beq	r2,zero,800cca4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800cbc4:	e0bffc17 	ldw	r2,-16(fp)
 800cbc8:	e0fffe17 	ldw	r3,-8(fp)
 800cbcc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800cbd0:	e0bffc17 	ldw	r2,-16(fp)
 800cbd4:	e0ffff17 	ldw	r3,-4(fp)
 800cbd8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800cbdc:	0005303a 	rdctl	r2,status
 800cbe0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800cbe4:	e0fff917 	ldw	r3,-28(fp)
 800cbe8:	00bfff84 	movi	r2,-2
 800cbec:	1884703a 	and	r2,r3,r2
 800cbf0:	1001703a 	wrctl	status,r2
  
  return context;
 800cbf4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 800cbf8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800cbfc:	d0a73317 	ldw	r2,-25396(gp)
      
      current_nticks = alt_nticks();
 800cc00:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800cc04:	e0fffd17 	ldw	r3,-12(fp)
 800cc08:	e0bff617 	ldw	r2,-40(fp)
 800cc0c:	1885883a 	add	r2,r3,r2
 800cc10:	10c00044 	addi	r3,r2,1
 800cc14:	e0bffc17 	ldw	r2,-16(fp)
 800cc18:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800cc1c:	e0bffc17 	ldw	r2,-16(fp)
 800cc20:	10c00217 	ldw	r3,8(r2)
 800cc24:	e0bff617 	ldw	r2,-40(fp)
 800cc28:	1880042e 	bgeu	r3,r2,800cc3c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 800cc2c:	e0bffc17 	ldw	r2,-16(fp)
 800cc30:	00c00044 	movi	r3,1
 800cc34:	10c00405 	stb	r3,16(r2)
 800cc38:	00000206 	br	800cc44 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 800cc3c:	e0bffc17 	ldw	r2,-16(fp)
 800cc40:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800cc44:	e0bffc17 	ldw	r2,-16(fp)
 800cc48:	d0e00e04 	addi	r3,gp,-32712
 800cc4c:	e0fffa15 	stw	r3,-24(fp)
 800cc50:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800cc54:	e0bffb17 	ldw	r2,-20(fp)
 800cc58:	e0fffa17 	ldw	r3,-24(fp)
 800cc5c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800cc60:	e0bffa17 	ldw	r2,-24(fp)
 800cc64:	10c00017 	ldw	r3,0(r2)
 800cc68:	e0bffb17 	ldw	r2,-20(fp)
 800cc6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800cc70:	e0bffa17 	ldw	r2,-24(fp)
 800cc74:	10800017 	ldw	r2,0(r2)
 800cc78:	e0fffb17 	ldw	r3,-20(fp)
 800cc7c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800cc80:	e0bffa17 	ldw	r2,-24(fp)
 800cc84:	e0fffb17 	ldw	r3,-20(fp)
 800cc88:	10c00015 	stw	r3,0(r2)
 800cc8c:	e0bff817 	ldw	r2,-32(fp)
 800cc90:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800cc94:	e0bff717 	ldw	r2,-36(fp)
 800cc98:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800cc9c:	0005883a 	mov	r2,zero
 800cca0:	00000306 	br	800ccb0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 800cca4:	00bffa84 	movi	r2,-22
 800cca8:	00000106 	br	800ccb0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800ccac:	00bfde84 	movi	r2,-134
  }
}
 800ccb0:	e037883a 	mov	sp,fp
 800ccb4:	df000017 	ldw	fp,0(sp)
 800ccb8:	dec00104 	addi	sp,sp,4
 800ccbc:	f800283a 	ret

0800ccc0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800ccc0:	defffa04 	addi	sp,sp,-24
 800ccc4:	dfc00515 	stw	ra,20(sp)
 800ccc8:	df000415 	stw	fp,16(sp)
 800cccc:	df000404 	addi	fp,sp,16
 800ccd0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 800ccd4:	00800244 	movi	r2,9
 800ccd8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800ccdc:	014003f4 	movhi	r5,15
 800cce0:	29509004 	addi	r5,r5,16960
 800cce4:	e13ffd17 	ldw	r4,-12(fp)
 800cce8:	8000a240 	call	8000a24 <__mulsi3>
 800ccec:	100b883a 	mov	r5,r2
 800ccf0:	0100bef4 	movhi	r4,763
 800ccf4:	213c2004 	addi	r4,r4,-3968
 800ccf8:	80009680 	call	8000968 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 800ccfc:	100b883a 	mov	r5,r2
 800cd00:	01200034 	movhi	r4,32768
 800cd04:	213fffc4 	addi	r4,r4,-1
 800cd08:	80009680 	call	8000968 <__udivsi3>
 800cd0c:	100b883a 	mov	r5,r2
 800cd10:	e13fff17 	ldw	r4,-4(fp)
 800cd14:	80009680 	call	8000968 <__udivsi3>
 800cd18:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 800cd1c:	e0bffe17 	ldw	r2,-8(fp)
 800cd20:	10002a26 	beq	r2,zero,800cdcc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 800cd24:	e03ffc15 	stw	zero,-16(fp)
 800cd28:	00001706 	br	800cd88 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800cd2c:	00a00034 	movhi	r2,32768
 800cd30:	10bfffc4 	addi	r2,r2,-1
 800cd34:	10bfffc4 	addi	r2,r2,-1
 800cd38:	103ffe1e 	bne	r2,zero,800cd34 <__alt_data_end+0xfc00cd34>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800cd3c:	014003f4 	movhi	r5,15
 800cd40:	29509004 	addi	r5,r5,16960
 800cd44:	e13ffd17 	ldw	r4,-12(fp)
 800cd48:	8000a240 	call	8000a24 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800cd4c:	100b883a 	mov	r5,r2
 800cd50:	0100bef4 	movhi	r4,763
 800cd54:	213c2004 	addi	r4,r4,-3968
 800cd58:	80009680 	call	8000968 <__udivsi3>
 800cd5c:	100b883a 	mov	r5,r2
 800cd60:	01200034 	movhi	r4,32768
 800cd64:	213fffc4 	addi	r4,r4,-1
 800cd68:	80009680 	call	8000968 <__udivsi3>
 800cd6c:	1007883a 	mov	r3,r2
 800cd70:	e0bfff17 	ldw	r2,-4(fp)
 800cd74:	10c5c83a 	sub	r2,r2,r3
 800cd78:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 800cd7c:	e0bffc17 	ldw	r2,-16(fp)
 800cd80:	10800044 	addi	r2,r2,1
 800cd84:	e0bffc15 	stw	r2,-16(fp)
 800cd88:	e0fffc17 	ldw	r3,-16(fp)
 800cd8c:	e0bffe17 	ldw	r2,-8(fp)
 800cd90:	18bfe616 	blt	r3,r2,800cd2c <__alt_data_end+0xfc00cd2c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800cd94:	014003f4 	movhi	r5,15
 800cd98:	29509004 	addi	r5,r5,16960
 800cd9c:	e13ffd17 	ldw	r4,-12(fp)
 800cda0:	8000a240 	call	8000a24 <__mulsi3>
 800cda4:	100b883a 	mov	r5,r2
 800cda8:	0100bef4 	movhi	r4,763
 800cdac:	213c2004 	addi	r4,r4,-3968
 800cdb0:	80009680 	call	8000968 <__udivsi3>
 800cdb4:	e17fff17 	ldw	r5,-4(fp)
 800cdb8:	1009883a 	mov	r4,r2
 800cdbc:	8000a240 	call	8000a24 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800cdc0:	10bfffc4 	addi	r2,r2,-1
 800cdc4:	103ffe1e 	bne	r2,zero,800cdc0 <__alt_data_end+0xfc00cdc0>
 800cdc8:	00000d06 	br	800ce00 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800cdcc:	014003f4 	movhi	r5,15
 800cdd0:	29509004 	addi	r5,r5,16960
 800cdd4:	e13ffd17 	ldw	r4,-12(fp)
 800cdd8:	8000a240 	call	8000a24 <__mulsi3>
 800cddc:	100b883a 	mov	r5,r2
 800cde0:	0100bef4 	movhi	r4,763
 800cde4:	213c2004 	addi	r4,r4,-3968
 800cde8:	80009680 	call	8000968 <__udivsi3>
 800cdec:	e17fff17 	ldw	r5,-4(fp)
 800cdf0:	1009883a 	mov	r4,r2
 800cdf4:	8000a240 	call	8000a24 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800cdf8:	10bfffc4 	addi	r2,r2,-1
 800cdfc:	00bffe16 	blt	zero,r2,800cdf8 <__alt_data_end+0xfc00cdf8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800ce00:	0005883a 	mov	r2,zero
}
 800ce04:	e037883a 	mov	sp,fp
 800ce08:	dfc00117 	ldw	ra,4(sp)
 800ce0c:	df000017 	ldw	fp,0(sp)
 800ce10:	dec00204 	addi	sp,sp,8
 800ce14:	f800283a 	ret

0800ce18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ce18:	defffe04 	addi	sp,sp,-8
 800ce1c:	dfc00115 	stw	ra,4(sp)
 800ce20:	df000015 	stw	fp,0(sp)
 800ce24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ce28:	d0a00c17 	ldw	r2,-32720(gp)
 800ce2c:	10000326 	beq	r2,zero,800ce3c <alt_get_errno+0x24>
 800ce30:	d0a00c17 	ldw	r2,-32720(gp)
 800ce34:	103ee83a 	callr	r2
 800ce38:	00000106 	br	800ce40 <alt_get_errno+0x28>
 800ce3c:	d0a72d04 	addi	r2,gp,-25420
}
 800ce40:	e037883a 	mov	sp,fp
 800ce44:	dfc00117 	ldw	ra,4(sp)
 800ce48:	df000017 	ldw	fp,0(sp)
 800ce4c:	dec00204 	addi	sp,sp,8
 800ce50:	f800283a 	ret

0800ce54 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800ce54:	defffb04 	addi	sp,sp,-20
 800ce58:	dfc00415 	stw	ra,16(sp)
 800ce5c:	df000315 	stw	fp,12(sp)
 800ce60:	df000304 	addi	fp,sp,12
 800ce64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800ce68:	e0bfff17 	ldw	r2,-4(fp)
 800ce6c:	10000816 	blt	r2,zero,800ce90 <close+0x3c>
 800ce70:	01400304 	movi	r5,12
 800ce74:	e13fff17 	ldw	r4,-4(fp)
 800ce78:	8000a240 	call	8000a24 <__mulsi3>
 800ce7c:	1007883a 	mov	r3,r2
 800ce80:	00820074 	movhi	r2,2049
 800ce84:	10bf9e04 	addi	r2,r2,-392
 800ce88:	1885883a 	add	r2,r3,r2
 800ce8c:	00000106 	br	800ce94 <close+0x40>
 800ce90:	0005883a 	mov	r2,zero
 800ce94:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800ce98:	e0bffd17 	ldw	r2,-12(fp)
 800ce9c:	10001926 	beq	r2,zero,800cf04 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800cea0:	e0bffd17 	ldw	r2,-12(fp)
 800cea4:	10800017 	ldw	r2,0(r2)
 800cea8:	10800417 	ldw	r2,16(r2)
 800ceac:	10000626 	beq	r2,zero,800cec8 <close+0x74>
 800ceb0:	e0bffd17 	ldw	r2,-12(fp)
 800ceb4:	10800017 	ldw	r2,0(r2)
 800ceb8:	10800417 	ldw	r2,16(r2)
 800cebc:	e13ffd17 	ldw	r4,-12(fp)
 800cec0:	103ee83a 	callr	r2
 800cec4:	00000106 	br	800cecc <close+0x78>
 800cec8:	0005883a 	mov	r2,zero
 800cecc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800ced0:	e13fff17 	ldw	r4,-4(fp)
 800ced4:	800d7bc0 	call	800d7bc <alt_release_fd>
    if (rval < 0)
 800ced8:	e0bffe17 	ldw	r2,-8(fp)
 800cedc:	1000070e 	bge	r2,zero,800cefc <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800cee0:	800ce180 	call	800ce18 <alt_get_errno>
 800cee4:	1007883a 	mov	r3,r2
 800cee8:	e0bffe17 	ldw	r2,-8(fp)
 800ceec:	0085c83a 	sub	r2,zero,r2
 800cef0:	18800015 	stw	r2,0(r3)
      return -1;
 800cef4:	00bfffc4 	movi	r2,-1
 800cef8:	00000706 	br	800cf18 <close+0xc4>
    }
    return 0;
 800cefc:	0005883a 	mov	r2,zero
 800cf00:	00000506 	br	800cf18 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800cf04:	800ce180 	call	800ce18 <alt_get_errno>
 800cf08:	1007883a 	mov	r3,r2
 800cf0c:	00801444 	movi	r2,81
 800cf10:	18800015 	stw	r2,0(r3)
    return -1;
 800cf14:	00bfffc4 	movi	r2,-1
  }
}
 800cf18:	e037883a 	mov	sp,fp
 800cf1c:	dfc00117 	ldw	ra,4(sp)
 800cf20:	df000017 	ldw	fp,0(sp)
 800cf24:	dec00204 	addi	sp,sp,8
 800cf28:	f800283a 	ret

0800cf2c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800cf2c:	deffff04 	addi	sp,sp,-4
 800cf30:	df000015 	stw	fp,0(sp)
 800cf34:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800cf38:	0001883a 	nop
 800cf3c:	e037883a 	mov	sp,fp
 800cf40:	df000017 	ldw	fp,0(sp)
 800cf44:	dec00104 	addi	sp,sp,4
 800cf48:	f800283a 	ret

0800cf4c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800cf4c:	defffc04 	addi	sp,sp,-16
 800cf50:	df000315 	stw	fp,12(sp)
 800cf54:	df000304 	addi	fp,sp,12
 800cf58:	e13ffd15 	stw	r4,-12(fp)
 800cf5c:	e17ffe15 	stw	r5,-8(fp)
 800cf60:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800cf64:	e0bfff17 	ldw	r2,-4(fp)
}
 800cf68:	e037883a 	mov	sp,fp
 800cf6c:	df000017 	ldw	fp,0(sp)
 800cf70:	dec00104 	addi	sp,sp,4
 800cf74:	f800283a 	ret

0800cf78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cf78:	defffe04 	addi	sp,sp,-8
 800cf7c:	dfc00115 	stw	ra,4(sp)
 800cf80:	df000015 	stw	fp,0(sp)
 800cf84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cf88:	d0a00c17 	ldw	r2,-32720(gp)
 800cf8c:	10000326 	beq	r2,zero,800cf9c <alt_get_errno+0x24>
 800cf90:	d0a00c17 	ldw	r2,-32720(gp)
 800cf94:	103ee83a 	callr	r2
 800cf98:	00000106 	br	800cfa0 <alt_get_errno+0x28>
 800cf9c:	d0a72d04 	addi	r2,gp,-25420
}
 800cfa0:	e037883a 	mov	sp,fp
 800cfa4:	dfc00117 	ldw	ra,4(sp)
 800cfa8:	df000017 	ldw	fp,0(sp)
 800cfac:	dec00204 	addi	sp,sp,8
 800cfb0:	f800283a 	ret

0800cfb4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800cfb4:	defffa04 	addi	sp,sp,-24
 800cfb8:	dfc00515 	stw	ra,20(sp)
 800cfbc:	df000415 	stw	fp,16(sp)
 800cfc0:	df000404 	addi	fp,sp,16
 800cfc4:	e13ffe15 	stw	r4,-8(fp)
 800cfc8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800cfcc:	e0bffe17 	ldw	r2,-8(fp)
 800cfd0:	10000326 	beq	r2,zero,800cfe0 <alt_dev_llist_insert+0x2c>
 800cfd4:	e0bffe17 	ldw	r2,-8(fp)
 800cfd8:	10800217 	ldw	r2,8(r2)
 800cfdc:	1000061e 	bne	r2,zero,800cff8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800cfe0:	800cf780 	call	800cf78 <alt_get_errno>
 800cfe4:	1007883a 	mov	r3,r2
 800cfe8:	00800584 	movi	r2,22
 800cfec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800cff0:	00bffa84 	movi	r2,-22
 800cff4:	00001306 	br	800d044 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800cff8:	e0bffe17 	ldw	r2,-8(fp)
 800cffc:	e0ffff17 	ldw	r3,-4(fp)
 800d000:	e0fffc15 	stw	r3,-16(fp)
 800d004:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800d008:	e0bffd17 	ldw	r2,-12(fp)
 800d00c:	e0fffc17 	ldw	r3,-16(fp)
 800d010:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800d014:	e0bffc17 	ldw	r2,-16(fp)
 800d018:	10c00017 	ldw	r3,0(r2)
 800d01c:	e0bffd17 	ldw	r2,-12(fp)
 800d020:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800d024:	e0bffc17 	ldw	r2,-16(fp)
 800d028:	10800017 	ldw	r2,0(r2)
 800d02c:	e0fffd17 	ldw	r3,-12(fp)
 800d030:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800d034:	e0bffc17 	ldw	r2,-16(fp)
 800d038:	e0fffd17 	ldw	r3,-12(fp)
 800d03c:	10c00015 	stw	r3,0(r2)

  return 0;  
 800d040:	0005883a 	mov	r2,zero
}
 800d044:	e037883a 	mov	sp,fp
 800d048:	dfc00117 	ldw	ra,4(sp)
 800d04c:	df000017 	ldw	fp,0(sp)
 800d050:	dec00204 	addi	sp,sp,8
 800d054:	f800283a 	ret

0800d058 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800d058:	defffd04 	addi	sp,sp,-12
 800d05c:	dfc00215 	stw	ra,8(sp)
 800d060:	df000115 	stw	fp,4(sp)
 800d064:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800d068:	00820074 	movhi	r2,2049
 800d06c:	10b82404 	addi	r2,r2,-8048
 800d070:	e0bfff15 	stw	r2,-4(fp)
 800d074:	00000606 	br	800d090 <_do_ctors+0x38>
        (*ctor) (); 
 800d078:	e0bfff17 	ldw	r2,-4(fp)
 800d07c:	10800017 	ldw	r2,0(r2)
 800d080:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800d084:	e0bfff17 	ldw	r2,-4(fp)
 800d088:	10bfff04 	addi	r2,r2,-4
 800d08c:	e0bfff15 	stw	r2,-4(fp)
 800d090:	e0ffff17 	ldw	r3,-4(fp)
 800d094:	00820074 	movhi	r2,2049
 800d098:	10b82504 	addi	r2,r2,-8044
 800d09c:	18bff62e 	bgeu	r3,r2,800d078 <__alt_data_end+0xfc00d078>
        (*ctor) (); 
}
 800d0a0:	0001883a 	nop
 800d0a4:	e037883a 	mov	sp,fp
 800d0a8:	dfc00117 	ldw	ra,4(sp)
 800d0ac:	df000017 	ldw	fp,0(sp)
 800d0b0:	dec00204 	addi	sp,sp,8
 800d0b4:	f800283a 	ret

0800d0b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800d0b8:	defffd04 	addi	sp,sp,-12
 800d0bc:	dfc00215 	stw	ra,8(sp)
 800d0c0:	df000115 	stw	fp,4(sp)
 800d0c4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800d0c8:	00820074 	movhi	r2,2049
 800d0cc:	10b82404 	addi	r2,r2,-8048
 800d0d0:	e0bfff15 	stw	r2,-4(fp)
 800d0d4:	00000606 	br	800d0f0 <_do_dtors+0x38>
        (*dtor) (); 
 800d0d8:	e0bfff17 	ldw	r2,-4(fp)
 800d0dc:	10800017 	ldw	r2,0(r2)
 800d0e0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800d0e4:	e0bfff17 	ldw	r2,-4(fp)
 800d0e8:	10bfff04 	addi	r2,r2,-4
 800d0ec:	e0bfff15 	stw	r2,-4(fp)
 800d0f0:	e0ffff17 	ldw	r3,-4(fp)
 800d0f4:	00820074 	movhi	r2,2049
 800d0f8:	10b82504 	addi	r2,r2,-8044
 800d0fc:	18bff62e 	bgeu	r3,r2,800d0d8 <__alt_data_end+0xfc00d0d8>
        (*dtor) (); 
}
 800d100:	0001883a 	nop
 800d104:	e037883a 	mov	sp,fp
 800d108:	dfc00117 	ldw	ra,4(sp)
 800d10c:	df000017 	ldw	fp,0(sp)
 800d110:	dec00204 	addi	sp,sp,8
 800d114:	f800283a 	ret

0800d118 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800d118:	deffff04 	addi	sp,sp,-4
 800d11c:	df000015 	stw	fp,0(sp)
 800d120:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800d124:	0001883a 	nop
 800d128:	e037883a 	mov	sp,fp
 800d12c:	df000017 	ldw	fp,0(sp)
 800d130:	dec00104 	addi	sp,sp,4
 800d134:	f800283a 	ret

0800d138 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800d138:	defff904 	addi	sp,sp,-28
 800d13c:	dfc00615 	stw	ra,24(sp)
 800d140:	df000515 	stw	fp,20(sp)
 800d144:	df000504 	addi	fp,sp,20
 800d148:	e13ffc15 	stw	r4,-16(fp)
 800d14c:	e17ffd15 	stw	r5,-12(fp)
 800d150:	e1bffe15 	stw	r6,-8(fp)
 800d154:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800d158:	e0800217 	ldw	r2,8(fp)
 800d15c:	d8800015 	stw	r2,0(sp)
 800d160:	e1ffff17 	ldw	r7,-4(fp)
 800d164:	e1bffe17 	ldw	r6,-8(fp)
 800d168:	e17ffd17 	ldw	r5,-12(fp)
 800d16c:	e13ffc17 	ldw	r4,-16(fp)
 800d170:	800d2e80 	call	800d2e8 <alt_iic_isr_register>
}  
 800d174:	e037883a 	mov	sp,fp
 800d178:	dfc00117 	ldw	ra,4(sp)
 800d17c:	df000017 	ldw	fp,0(sp)
 800d180:	dec00204 	addi	sp,sp,8
 800d184:	f800283a 	ret

0800d188 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800d188:	defff904 	addi	sp,sp,-28
 800d18c:	df000615 	stw	fp,24(sp)
 800d190:	df000604 	addi	fp,sp,24
 800d194:	e13ffe15 	stw	r4,-8(fp)
 800d198:	e17fff15 	stw	r5,-4(fp)
 800d19c:	e0bfff17 	ldw	r2,-4(fp)
 800d1a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d1a4:	0005303a 	rdctl	r2,status
 800d1a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d1ac:	e0fffb17 	ldw	r3,-20(fp)
 800d1b0:	00bfff84 	movi	r2,-2
 800d1b4:	1884703a 	and	r2,r3,r2
 800d1b8:	1001703a 	wrctl	status,r2
  
  return context;
 800d1bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800d1c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800d1c4:	00c00044 	movi	r3,1
 800d1c8:	e0bffa17 	ldw	r2,-24(fp)
 800d1cc:	1884983a 	sll	r2,r3,r2
 800d1d0:	1007883a 	mov	r3,r2
 800d1d4:	d0a73117 	ldw	r2,-25404(gp)
 800d1d8:	1884b03a 	or	r2,r3,r2
 800d1dc:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800d1e0:	d0a73117 	ldw	r2,-25404(gp)
 800d1e4:	100170fa 	wrctl	ienable,r2
 800d1e8:	e0bffc17 	ldw	r2,-16(fp)
 800d1ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d1f0:	e0bffd17 	ldw	r2,-12(fp)
 800d1f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800d1f8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800d1fc:	0001883a 	nop
}
 800d200:	e037883a 	mov	sp,fp
 800d204:	df000017 	ldw	fp,0(sp)
 800d208:	dec00104 	addi	sp,sp,4
 800d20c:	f800283a 	ret

0800d210 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800d210:	defff904 	addi	sp,sp,-28
 800d214:	df000615 	stw	fp,24(sp)
 800d218:	df000604 	addi	fp,sp,24
 800d21c:	e13ffe15 	stw	r4,-8(fp)
 800d220:	e17fff15 	stw	r5,-4(fp)
 800d224:	e0bfff17 	ldw	r2,-4(fp)
 800d228:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d22c:	0005303a 	rdctl	r2,status
 800d230:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d234:	e0fffb17 	ldw	r3,-20(fp)
 800d238:	00bfff84 	movi	r2,-2
 800d23c:	1884703a 	and	r2,r3,r2
 800d240:	1001703a 	wrctl	status,r2
  
  return context;
 800d244:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800d248:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800d24c:	00c00044 	movi	r3,1
 800d250:	e0bffa17 	ldw	r2,-24(fp)
 800d254:	1884983a 	sll	r2,r3,r2
 800d258:	0084303a 	nor	r2,zero,r2
 800d25c:	1007883a 	mov	r3,r2
 800d260:	d0a73117 	ldw	r2,-25404(gp)
 800d264:	1884703a 	and	r2,r3,r2
 800d268:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800d26c:	d0a73117 	ldw	r2,-25404(gp)
 800d270:	100170fa 	wrctl	ienable,r2
 800d274:	e0bffc17 	ldw	r2,-16(fp)
 800d278:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d27c:	e0bffd17 	ldw	r2,-12(fp)
 800d280:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800d284:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800d288:	0001883a 	nop
}
 800d28c:	e037883a 	mov	sp,fp
 800d290:	df000017 	ldw	fp,0(sp)
 800d294:	dec00104 	addi	sp,sp,4
 800d298:	f800283a 	ret

0800d29c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800d29c:	defffc04 	addi	sp,sp,-16
 800d2a0:	df000315 	stw	fp,12(sp)
 800d2a4:	df000304 	addi	fp,sp,12
 800d2a8:	e13ffe15 	stw	r4,-8(fp)
 800d2ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800d2b0:	000530fa 	rdctl	r2,ienable
 800d2b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800d2b8:	00c00044 	movi	r3,1
 800d2bc:	e0bfff17 	ldw	r2,-4(fp)
 800d2c0:	1884983a 	sll	r2,r3,r2
 800d2c4:	1007883a 	mov	r3,r2
 800d2c8:	e0bffd17 	ldw	r2,-12(fp)
 800d2cc:	1884703a 	and	r2,r3,r2
 800d2d0:	1004c03a 	cmpne	r2,r2,zero
 800d2d4:	10803fcc 	andi	r2,r2,255
}
 800d2d8:	e037883a 	mov	sp,fp
 800d2dc:	df000017 	ldw	fp,0(sp)
 800d2e0:	dec00104 	addi	sp,sp,4
 800d2e4:	f800283a 	ret

0800d2e8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800d2e8:	defff504 	addi	sp,sp,-44
 800d2ec:	dfc00a15 	stw	ra,40(sp)
 800d2f0:	df000915 	stw	fp,36(sp)
 800d2f4:	df000904 	addi	fp,sp,36
 800d2f8:	e13ffc15 	stw	r4,-16(fp)
 800d2fc:	e17ffd15 	stw	r5,-12(fp)
 800d300:	e1bffe15 	stw	r6,-8(fp)
 800d304:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800d308:	00bffa84 	movi	r2,-22
 800d30c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800d310:	e0bffd17 	ldw	r2,-12(fp)
 800d314:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800d318:	e0bff817 	ldw	r2,-32(fp)
 800d31c:	10800808 	cmpgei	r2,r2,32
 800d320:	1000271e 	bne	r2,zero,800d3c0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d324:	0005303a 	rdctl	r2,status
 800d328:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d32c:	e0fffb17 	ldw	r3,-20(fp)
 800d330:	00bfff84 	movi	r2,-2
 800d334:	1884703a 	and	r2,r3,r2
 800d338:	1001703a 	wrctl	status,r2
  
  return context;
 800d33c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800d340:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 800d344:	00820074 	movhi	r2,2049
 800d348:	10873d04 	addi	r2,r2,7412
 800d34c:	e0fff817 	ldw	r3,-32(fp)
 800d350:	180690fa 	slli	r3,r3,3
 800d354:	10c5883a 	add	r2,r2,r3
 800d358:	e0fffe17 	ldw	r3,-8(fp)
 800d35c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800d360:	00820074 	movhi	r2,2049
 800d364:	10873d04 	addi	r2,r2,7412
 800d368:	e0fff817 	ldw	r3,-32(fp)
 800d36c:	180690fa 	slli	r3,r3,3
 800d370:	10c5883a 	add	r2,r2,r3
 800d374:	10800104 	addi	r2,r2,4
 800d378:	e0ffff17 	ldw	r3,-4(fp)
 800d37c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800d380:	e0bffe17 	ldw	r2,-8(fp)
 800d384:	10000526 	beq	r2,zero,800d39c <alt_iic_isr_register+0xb4>
 800d388:	e0bff817 	ldw	r2,-32(fp)
 800d38c:	100b883a 	mov	r5,r2
 800d390:	e13ffc17 	ldw	r4,-16(fp)
 800d394:	800d1880 	call	800d188 <alt_ic_irq_enable>
 800d398:	00000406 	br	800d3ac <alt_iic_isr_register+0xc4>
 800d39c:	e0bff817 	ldw	r2,-32(fp)
 800d3a0:	100b883a 	mov	r5,r2
 800d3a4:	e13ffc17 	ldw	r4,-16(fp)
 800d3a8:	800d2100 	call	800d210 <alt_ic_irq_disable>
 800d3ac:	e0bff715 	stw	r2,-36(fp)
 800d3b0:	e0bffa17 	ldw	r2,-24(fp)
 800d3b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d3b8:	e0bff917 	ldw	r2,-28(fp)
 800d3bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800d3c0:	e0bff717 	ldw	r2,-36(fp)
}
 800d3c4:	e037883a 	mov	sp,fp
 800d3c8:	dfc00117 	ldw	ra,4(sp)
 800d3cc:	df000017 	ldw	fp,0(sp)
 800d3d0:	dec00204 	addi	sp,sp,8
 800d3d4:	f800283a 	ret

0800d3d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800d3d8:	defff804 	addi	sp,sp,-32
 800d3dc:	dfc00715 	stw	ra,28(sp)
 800d3e0:	df000615 	stw	fp,24(sp)
 800d3e4:	dc000515 	stw	r16,20(sp)
 800d3e8:	df000604 	addi	fp,sp,24
 800d3ec:	e13ffb15 	stw	r4,-20(fp)
 800d3f0:	e17ffc15 	stw	r5,-16(fp)
 800d3f4:	e1bffd15 	stw	r6,-12(fp)
 800d3f8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 800d3fc:	e1bffe17 	ldw	r6,-8(fp)
 800d400:	e17ffd17 	ldw	r5,-12(fp)
 800d404:	e13ffc17 	ldw	r4,-16(fp)
 800d408:	800d6600 	call	800d660 <open>
 800d40c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 800d410:	e0bffa17 	ldw	r2,-24(fp)
 800d414:	10002216 	blt	r2,zero,800d4a0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800d418:	04020074 	movhi	r16,2049
 800d41c:	843f9e04 	addi	r16,r16,-392
 800d420:	e0bffa17 	ldw	r2,-24(fp)
 800d424:	01400304 	movi	r5,12
 800d428:	1009883a 	mov	r4,r2
 800d42c:	8000a240 	call	8000a24 <__mulsi3>
 800d430:	8085883a 	add	r2,r16,r2
 800d434:	10c00017 	ldw	r3,0(r2)
 800d438:	e0bffb17 	ldw	r2,-20(fp)
 800d43c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800d440:	04020074 	movhi	r16,2049
 800d444:	843f9e04 	addi	r16,r16,-392
 800d448:	e0bffa17 	ldw	r2,-24(fp)
 800d44c:	01400304 	movi	r5,12
 800d450:	1009883a 	mov	r4,r2
 800d454:	8000a240 	call	8000a24 <__mulsi3>
 800d458:	8085883a 	add	r2,r16,r2
 800d45c:	10800104 	addi	r2,r2,4
 800d460:	10c00017 	ldw	r3,0(r2)
 800d464:	e0bffb17 	ldw	r2,-20(fp)
 800d468:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800d46c:	04020074 	movhi	r16,2049
 800d470:	843f9e04 	addi	r16,r16,-392
 800d474:	e0bffa17 	ldw	r2,-24(fp)
 800d478:	01400304 	movi	r5,12
 800d47c:	1009883a 	mov	r4,r2
 800d480:	8000a240 	call	8000a24 <__mulsi3>
 800d484:	8085883a 	add	r2,r16,r2
 800d488:	10800204 	addi	r2,r2,8
 800d48c:	10c00017 	ldw	r3,0(r2)
 800d490:	e0bffb17 	ldw	r2,-20(fp)
 800d494:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800d498:	e13ffa17 	ldw	r4,-24(fp)
 800d49c:	800d7bc0 	call	800d7bc <alt_release_fd>
  }
} 
 800d4a0:	0001883a 	nop
 800d4a4:	e6ffff04 	addi	sp,fp,-4
 800d4a8:	dfc00217 	ldw	ra,8(sp)
 800d4ac:	df000117 	ldw	fp,4(sp)
 800d4b0:	dc000017 	ldw	r16,0(sp)
 800d4b4:	dec00304 	addi	sp,sp,12
 800d4b8:	f800283a 	ret

0800d4bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800d4bc:	defffb04 	addi	sp,sp,-20
 800d4c0:	dfc00415 	stw	ra,16(sp)
 800d4c4:	df000315 	stw	fp,12(sp)
 800d4c8:	df000304 	addi	fp,sp,12
 800d4cc:	e13ffd15 	stw	r4,-12(fp)
 800d4d0:	e17ffe15 	stw	r5,-8(fp)
 800d4d4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800d4d8:	01c07fc4 	movi	r7,511
 800d4dc:	01800044 	movi	r6,1
 800d4e0:	e17ffd17 	ldw	r5,-12(fp)
 800d4e4:	01020074 	movhi	r4,2049
 800d4e8:	213fa104 	addi	r4,r4,-380
 800d4ec:	800d3d80 	call	800d3d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800d4f0:	01c07fc4 	movi	r7,511
 800d4f4:	000d883a 	mov	r6,zero
 800d4f8:	e17ffe17 	ldw	r5,-8(fp)
 800d4fc:	01020074 	movhi	r4,2049
 800d500:	213f9e04 	addi	r4,r4,-392
 800d504:	800d3d80 	call	800d3d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800d508:	01c07fc4 	movi	r7,511
 800d50c:	01800044 	movi	r6,1
 800d510:	e17fff17 	ldw	r5,-4(fp)
 800d514:	01020074 	movhi	r4,2049
 800d518:	213fa404 	addi	r4,r4,-368
 800d51c:	800d3d80 	call	800d3d8 <alt_open_fd>
}  
 800d520:	0001883a 	nop
 800d524:	e037883a 	mov	sp,fp
 800d528:	dfc00117 	ldw	ra,4(sp)
 800d52c:	df000017 	ldw	fp,0(sp)
 800d530:	dec00204 	addi	sp,sp,8
 800d534:	f800283a 	ret

0800d538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d538:	defffe04 	addi	sp,sp,-8
 800d53c:	dfc00115 	stw	ra,4(sp)
 800d540:	df000015 	stw	fp,0(sp)
 800d544:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d548:	d0a00c17 	ldw	r2,-32720(gp)
 800d54c:	10000326 	beq	r2,zero,800d55c <alt_get_errno+0x24>
 800d550:	d0a00c17 	ldw	r2,-32720(gp)
 800d554:	103ee83a 	callr	r2
 800d558:	00000106 	br	800d560 <alt_get_errno+0x28>
 800d55c:	d0a72d04 	addi	r2,gp,-25420
}
 800d560:	e037883a 	mov	sp,fp
 800d564:	dfc00117 	ldw	ra,4(sp)
 800d568:	df000017 	ldw	fp,0(sp)
 800d56c:	dec00204 	addi	sp,sp,8
 800d570:	f800283a 	ret

0800d574 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800d574:	defffb04 	addi	sp,sp,-20
 800d578:	dfc00415 	stw	ra,16(sp)
 800d57c:	df000315 	stw	fp,12(sp)
 800d580:	dc000215 	stw	r16,8(sp)
 800d584:	df000304 	addi	fp,sp,12
 800d588:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800d58c:	e0bffe17 	ldw	r2,-8(fp)
 800d590:	10800217 	ldw	r2,8(r2)
 800d594:	10d00034 	orhi	r3,r2,16384
 800d598:	e0bffe17 	ldw	r2,-8(fp)
 800d59c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800d5a0:	e03ffd15 	stw	zero,-12(fp)
 800d5a4:	00002306 	br	800d634 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800d5a8:	04020074 	movhi	r16,2049
 800d5ac:	843f9e04 	addi	r16,r16,-392
 800d5b0:	e0bffd17 	ldw	r2,-12(fp)
 800d5b4:	01400304 	movi	r5,12
 800d5b8:	1009883a 	mov	r4,r2
 800d5bc:	8000a240 	call	8000a24 <__mulsi3>
 800d5c0:	8085883a 	add	r2,r16,r2
 800d5c4:	10c00017 	ldw	r3,0(r2)
 800d5c8:	e0bffe17 	ldw	r2,-8(fp)
 800d5cc:	10800017 	ldw	r2,0(r2)
 800d5d0:	1880151e 	bne	r3,r2,800d628 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800d5d4:	04020074 	movhi	r16,2049
 800d5d8:	843f9e04 	addi	r16,r16,-392
 800d5dc:	e0bffd17 	ldw	r2,-12(fp)
 800d5e0:	01400304 	movi	r5,12
 800d5e4:	1009883a 	mov	r4,r2
 800d5e8:	8000a240 	call	8000a24 <__mulsi3>
 800d5ec:	8085883a 	add	r2,r16,r2
 800d5f0:	10800204 	addi	r2,r2,8
 800d5f4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800d5f8:	10000b0e 	bge	r2,zero,800d628 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800d5fc:	01400304 	movi	r5,12
 800d600:	e13ffd17 	ldw	r4,-12(fp)
 800d604:	8000a240 	call	8000a24 <__mulsi3>
 800d608:	1007883a 	mov	r3,r2
 800d60c:	00820074 	movhi	r2,2049
 800d610:	10bf9e04 	addi	r2,r2,-392
 800d614:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800d618:	e0bffe17 	ldw	r2,-8(fp)
 800d61c:	18800226 	beq	r3,r2,800d628 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800d620:	00bffcc4 	movi	r2,-13
 800d624:	00000806 	br	800d648 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800d628:	e0bffd17 	ldw	r2,-12(fp)
 800d62c:	10800044 	addi	r2,r2,1
 800d630:	e0bffd15 	stw	r2,-12(fp)
 800d634:	d0a00b17 	ldw	r2,-32724(gp)
 800d638:	1007883a 	mov	r3,r2
 800d63c:	e0bffd17 	ldw	r2,-12(fp)
 800d640:	18bfd92e 	bgeu	r3,r2,800d5a8 <__alt_data_end+0xfc00d5a8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800d644:	0005883a 	mov	r2,zero
}
 800d648:	e6ffff04 	addi	sp,fp,-4
 800d64c:	dfc00217 	ldw	ra,8(sp)
 800d650:	df000117 	ldw	fp,4(sp)
 800d654:	dc000017 	ldw	r16,0(sp)
 800d658:	dec00304 	addi	sp,sp,12
 800d65c:	f800283a 	ret

0800d660 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800d660:	defff604 	addi	sp,sp,-40
 800d664:	dfc00915 	stw	ra,36(sp)
 800d668:	df000815 	stw	fp,32(sp)
 800d66c:	df000804 	addi	fp,sp,32
 800d670:	e13ffd15 	stw	r4,-12(fp)
 800d674:	e17ffe15 	stw	r5,-8(fp)
 800d678:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800d67c:	00bfffc4 	movi	r2,-1
 800d680:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800d684:	00bffb44 	movi	r2,-19
 800d688:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800d68c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800d690:	d1600904 	addi	r5,gp,-32732
 800d694:	e13ffd17 	ldw	r4,-12(fp)
 800d698:	800da080 	call	800da08 <alt_find_dev>
 800d69c:	e0bff815 	stw	r2,-32(fp)
 800d6a0:	e0bff817 	ldw	r2,-32(fp)
 800d6a4:	1000051e 	bne	r2,zero,800d6bc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800d6a8:	e13ffd17 	ldw	r4,-12(fp)
 800d6ac:	800da980 	call	800da98 <alt_find_file>
 800d6b0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800d6b4:	00800044 	movi	r2,1
 800d6b8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800d6bc:	e0bff817 	ldw	r2,-32(fp)
 800d6c0:	10002b26 	beq	r2,zero,800d770 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800d6c4:	e13ff817 	ldw	r4,-32(fp)
 800d6c8:	800dba00 	call	800dba0 <alt_get_fd>
 800d6cc:	e0bff915 	stw	r2,-28(fp)
 800d6d0:	e0bff917 	ldw	r2,-28(fp)
 800d6d4:	1000030e 	bge	r2,zero,800d6e4 <open+0x84>
    {
      status = index;
 800d6d8:	e0bff917 	ldw	r2,-28(fp)
 800d6dc:	e0bffa15 	stw	r2,-24(fp)
 800d6e0:	00002506 	br	800d778 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 800d6e4:	01400304 	movi	r5,12
 800d6e8:	e13ff917 	ldw	r4,-28(fp)
 800d6ec:	8000a240 	call	8000a24 <__mulsi3>
 800d6f0:	1007883a 	mov	r3,r2
 800d6f4:	00820074 	movhi	r2,2049
 800d6f8:	10bf9e04 	addi	r2,r2,-392
 800d6fc:	1885883a 	add	r2,r3,r2
 800d700:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800d704:	e0fffe17 	ldw	r3,-8(fp)
 800d708:	00900034 	movhi	r2,16384
 800d70c:	10bfffc4 	addi	r2,r2,-1
 800d710:	1886703a 	and	r3,r3,r2
 800d714:	e0bffc17 	ldw	r2,-16(fp)
 800d718:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800d71c:	e0bffb17 	ldw	r2,-20(fp)
 800d720:	1000051e 	bne	r2,zero,800d738 <open+0xd8>
 800d724:	e13ffc17 	ldw	r4,-16(fp)
 800d728:	800d5740 	call	800d574 <alt_file_locked>
 800d72c:	e0bffa15 	stw	r2,-24(fp)
 800d730:	e0bffa17 	ldw	r2,-24(fp)
 800d734:	10001016 	blt	r2,zero,800d778 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800d738:	e0bff817 	ldw	r2,-32(fp)
 800d73c:	10800317 	ldw	r2,12(r2)
 800d740:	10000826 	beq	r2,zero,800d764 <open+0x104>
 800d744:	e0bff817 	ldw	r2,-32(fp)
 800d748:	10800317 	ldw	r2,12(r2)
 800d74c:	e1ffff17 	ldw	r7,-4(fp)
 800d750:	e1bffe17 	ldw	r6,-8(fp)
 800d754:	e17ffd17 	ldw	r5,-12(fp)
 800d758:	e13ffc17 	ldw	r4,-16(fp)
 800d75c:	103ee83a 	callr	r2
 800d760:	00000106 	br	800d768 <open+0x108>
 800d764:	0005883a 	mov	r2,zero
 800d768:	e0bffa15 	stw	r2,-24(fp)
 800d76c:	00000206 	br	800d778 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800d770:	00bffb44 	movi	r2,-19
 800d774:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800d778:	e0bffa17 	ldw	r2,-24(fp)
 800d77c:	1000090e 	bge	r2,zero,800d7a4 <open+0x144>
  {
    alt_release_fd (index);  
 800d780:	e13ff917 	ldw	r4,-28(fp)
 800d784:	800d7bc0 	call	800d7bc <alt_release_fd>
    ALT_ERRNO = -status;
 800d788:	800d5380 	call	800d538 <alt_get_errno>
 800d78c:	1007883a 	mov	r3,r2
 800d790:	e0bffa17 	ldw	r2,-24(fp)
 800d794:	0085c83a 	sub	r2,zero,r2
 800d798:	18800015 	stw	r2,0(r3)
    return -1;
 800d79c:	00bfffc4 	movi	r2,-1
 800d7a0:	00000106 	br	800d7a8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 800d7a4:	e0bff917 	ldw	r2,-28(fp)
}
 800d7a8:	e037883a 	mov	sp,fp
 800d7ac:	dfc00117 	ldw	ra,4(sp)
 800d7b0:	df000017 	ldw	fp,0(sp)
 800d7b4:	dec00204 	addi	sp,sp,8
 800d7b8:	f800283a 	ret

0800d7bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800d7bc:	defffc04 	addi	sp,sp,-16
 800d7c0:	dfc00315 	stw	ra,12(sp)
 800d7c4:	df000215 	stw	fp,8(sp)
 800d7c8:	dc000115 	stw	r16,4(sp)
 800d7cc:	df000204 	addi	fp,sp,8
 800d7d0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800d7d4:	e0bffe17 	ldw	r2,-8(fp)
 800d7d8:	108000d0 	cmplti	r2,r2,3
 800d7dc:	1000111e 	bne	r2,zero,800d824 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800d7e0:	04020074 	movhi	r16,2049
 800d7e4:	843f9e04 	addi	r16,r16,-392
 800d7e8:	e0bffe17 	ldw	r2,-8(fp)
 800d7ec:	01400304 	movi	r5,12
 800d7f0:	1009883a 	mov	r4,r2
 800d7f4:	8000a240 	call	8000a24 <__mulsi3>
 800d7f8:	8085883a 	add	r2,r16,r2
 800d7fc:	10800204 	addi	r2,r2,8
 800d800:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800d804:	04020074 	movhi	r16,2049
 800d808:	843f9e04 	addi	r16,r16,-392
 800d80c:	e0bffe17 	ldw	r2,-8(fp)
 800d810:	01400304 	movi	r5,12
 800d814:	1009883a 	mov	r4,r2
 800d818:	8000a240 	call	8000a24 <__mulsi3>
 800d81c:	8085883a 	add	r2,r16,r2
 800d820:	10000015 	stw	zero,0(r2)
  }
}
 800d824:	0001883a 	nop
 800d828:	e6ffff04 	addi	sp,fp,-4
 800d82c:	dfc00217 	ldw	ra,8(sp)
 800d830:	df000117 	ldw	fp,4(sp)
 800d834:	dc000017 	ldw	r16,0(sp)
 800d838:	dec00304 	addi	sp,sp,12
 800d83c:	f800283a 	ret

0800d840 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800d840:	defffa04 	addi	sp,sp,-24
 800d844:	df000515 	stw	fp,20(sp)
 800d848:	df000504 	addi	fp,sp,20
 800d84c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d850:	0005303a 	rdctl	r2,status
 800d854:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d858:	e0fffc17 	ldw	r3,-16(fp)
 800d85c:	00bfff84 	movi	r2,-2
 800d860:	1884703a 	and	r2,r3,r2
 800d864:	1001703a 	wrctl	status,r2
  
  return context;
 800d868:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800d86c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800d870:	e0bfff17 	ldw	r2,-4(fp)
 800d874:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800d878:	e0bffd17 	ldw	r2,-12(fp)
 800d87c:	10800017 	ldw	r2,0(r2)
 800d880:	e0fffd17 	ldw	r3,-12(fp)
 800d884:	18c00117 	ldw	r3,4(r3)
 800d888:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800d88c:	e0bffd17 	ldw	r2,-12(fp)
 800d890:	10800117 	ldw	r2,4(r2)
 800d894:	e0fffd17 	ldw	r3,-12(fp)
 800d898:	18c00017 	ldw	r3,0(r3)
 800d89c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800d8a0:	e0bffd17 	ldw	r2,-12(fp)
 800d8a4:	e0fffd17 	ldw	r3,-12(fp)
 800d8a8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800d8ac:	e0bffd17 	ldw	r2,-12(fp)
 800d8b0:	e0fffd17 	ldw	r3,-12(fp)
 800d8b4:	10c00015 	stw	r3,0(r2)
 800d8b8:	e0bffb17 	ldw	r2,-20(fp)
 800d8bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d8c0:	e0bffe17 	ldw	r2,-8(fp)
 800d8c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800d8c8:	0001883a 	nop
 800d8cc:	e037883a 	mov	sp,fp
 800d8d0:	df000017 	ldw	fp,0(sp)
 800d8d4:	dec00104 	addi	sp,sp,4
 800d8d8:	f800283a 	ret

0800d8dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800d8dc:	defffb04 	addi	sp,sp,-20
 800d8e0:	dfc00415 	stw	ra,16(sp)
 800d8e4:	df000315 	stw	fp,12(sp)
 800d8e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800d8ec:	d0a00e17 	ldw	r2,-32712(gp)
 800d8f0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800d8f4:	d0a73317 	ldw	r2,-25396(gp)
 800d8f8:	10800044 	addi	r2,r2,1
 800d8fc:	d0a73315 	stw	r2,-25396(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800d900:	00002e06 	br	800d9bc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800d904:	e0bffd17 	ldw	r2,-12(fp)
 800d908:	10800017 	ldw	r2,0(r2)
 800d90c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800d910:	e0bffd17 	ldw	r2,-12(fp)
 800d914:	10800403 	ldbu	r2,16(r2)
 800d918:	10803fcc 	andi	r2,r2,255
 800d91c:	10000426 	beq	r2,zero,800d930 <alt_tick+0x54>
 800d920:	d0a73317 	ldw	r2,-25396(gp)
 800d924:	1000021e 	bne	r2,zero,800d930 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800d928:	e0bffd17 	ldw	r2,-12(fp)
 800d92c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800d930:	e0bffd17 	ldw	r2,-12(fp)
 800d934:	10800217 	ldw	r2,8(r2)
 800d938:	d0e73317 	ldw	r3,-25396(gp)
 800d93c:	18801d36 	bltu	r3,r2,800d9b4 <alt_tick+0xd8>
 800d940:	e0bffd17 	ldw	r2,-12(fp)
 800d944:	10800403 	ldbu	r2,16(r2)
 800d948:	10803fcc 	andi	r2,r2,255
 800d94c:	1000191e 	bne	r2,zero,800d9b4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800d950:	e0bffd17 	ldw	r2,-12(fp)
 800d954:	10800317 	ldw	r2,12(r2)
 800d958:	e0fffd17 	ldw	r3,-12(fp)
 800d95c:	18c00517 	ldw	r3,20(r3)
 800d960:	1809883a 	mov	r4,r3
 800d964:	103ee83a 	callr	r2
 800d968:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800d96c:	e0bfff17 	ldw	r2,-4(fp)
 800d970:	1000031e 	bne	r2,zero,800d980 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800d974:	e13ffd17 	ldw	r4,-12(fp)
 800d978:	800d8400 	call	800d840 <alt_alarm_stop>
 800d97c:	00000d06 	br	800d9b4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800d980:	e0bffd17 	ldw	r2,-12(fp)
 800d984:	10c00217 	ldw	r3,8(r2)
 800d988:	e0bfff17 	ldw	r2,-4(fp)
 800d98c:	1887883a 	add	r3,r3,r2
 800d990:	e0bffd17 	ldw	r2,-12(fp)
 800d994:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800d998:	e0bffd17 	ldw	r2,-12(fp)
 800d99c:	10c00217 	ldw	r3,8(r2)
 800d9a0:	d0a73317 	ldw	r2,-25396(gp)
 800d9a4:	1880032e 	bgeu	r3,r2,800d9b4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800d9a8:	e0bffd17 	ldw	r2,-12(fp)
 800d9ac:	00c00044 	movi	r3,1
 800d9b0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800d9b4:	e0bffe17 	ldw	r2,-8(fp)
 800d9b8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800d9bc:	e0fffd17 	ldw	r3,-12(fp)
 800d9c0:	d0a00e04 	addi	r2,gp,-32712
 800d9c4:	18bfcf1e 	bne	r3,r2,800d904 <__alt_data_end+0xfc00d904>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800d9c8:	0001883a 	nop
}
 800d9cc:	0001883a 	nop
 800d9d0:	e037883a 	mov	sp,fp
 800d9d4:	dfc00117 	ldw	ra,4(sp)
 800d9d8:	df000017 	ldw	fp,0(sp)
 800d9dc:	dec00204 	addi	sp,sp,8
 800d9e0:	f800283a 	ret

0800d9e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800d9e4:	deffff04 	addi	sp,sp,-4
 800d9e8:	df000015 	stw	fp,0(sp)
 800d9ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800d9f0:	000170fa 	wrctl	ienable,zero
}
 800d9f4:	0001883a 	nop
 800d9f8:	e037883a 	mov	sp,fp
 800d9fc:	df000017 	ldw	fp,0(sp)
 800da00:	dec00104 	addi	sp,sp,4
 800da04:	f800283a 	ret

0800da08 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800da08:	defffa04 	addi	sp,sp,-24
 800da0c:	dfc00515 	stw	ra,20(sp)
 800da10:	df000415 	stw	fp,16(sp)
 800da14:	df000404 	addi	fp,sp,16
 800da18:	e13ffe15 	stw	r4,-8(fp)
 800da1c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800da20:	e0bfff17 	ldw	r2,-4(fp)
 800da24:	10800017 	ldw	r2,0(r2)
 800da28:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800da2c:	e13ffe17 	ldw	r4,-8(fp)
 800da30:	8000b8c0 	call	8000b8c <strlen>
 800da34:	10800044 	addi	r2,r2,1
 800da38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800da3c:	00000d06 	br	800da74 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800da40:	e0bffc17 	ldw	r2,-16(fp)
 800da44:	10800217 	ldw	r2,8(r2)
 800da48:	e0fffd17 	ldw	r3,-12(fp)
 800da4c:	180d883a 	mov	r6,r3
 800da50:	e17ffe17 	ldw	r5,-8(fp)
 800da54:	1009883a 	mov	r4,r2
 800da58:	800dd4c0 	call	800dd4c <memcmp>
 800da5c:	1000021e 	bne	r2,zero,800da68 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800da60:	e0bffc17 	ldw	r2,-16(fp)
 800da64:	00000706 	br	800da84 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800da68:	e0bffc17 	ldw	r2,-16(fp)
 800da6c:	10800017 	ldw	r2,0(r2)
 800da70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800da74:	e0fffc17 	ldw	r3,-16(fp)
 800da78:	e0bfff17 	ldw	r2,-4(fp)
 800da7c:	18bff01e 	bne	r3,r2,800da40 <__alt_data_end+0xfc00da40>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800da80:	0005883a 	mov	r2,zero
}
 800da84:	e037883a 	mov	sp,fp
 800da88:	dfc00117 	ldw	ra,4(sp)
 800da8c:	df000017 	ldw	fp,0(sp)
 800da90:	dec00204 	addi	sp,sp,8
 800da94:	f800283a 	ret

0800da98 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800da98:	defffb04 	addi	sp,sp,-20
 800da9c:	dfc00415 	stw	ra,16(sp)
 800daa0:	df000315 	stw	fp,12(sp)
 800daa4:	df000304 	addi	fp,sp,12
 800daa8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800daac:	d0a00717 	ldw	r2,-32740(gp)
 800dab0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800dab4:	00003106 	br	800db7c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 800dab8:	e0bffd17 	ldw	r2,-12(fp)
 800dabc:	10800217 	ldw	r2,8(r2)
 800dac0:	1009883a 	mov	r4,r2
 800dac4:	8000b8c0 	call	8000b8c <strlen>
 800dac8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800dacc:	e0bffd17 	ldw	r2,-12(fp)
 800dad0:	10c00217 	ldw	r3,8(r2)
 800dad4:	e0bffe17 	ldw	r2,-8(fp)
 800dad8:	10bfffc4 	addi	r2,r2,-1
 800dadc:	1885883a 	add	r2,r3,r2
 800dae0:	10800003 	ldbu	r2,0(r2)
 800dae4:	10803fcc 	andi	r2,r2,255
 800dae8:	1080201c 	xori	r2,r2,128
 800daec:	10bfe004 	addi	r2,r2,-128
 800daf0:	10800bd8 	cmpnei	r2,r2,47
 800daf4:	1000031e 	bne	r2,zero,800db04 <alt_find_file+0x6c>
    {
      len -= 1;
 800daf8:	e0bffe17 	ldw	r2,-8(fp)
 800dafc:	10bfffc4 	addi	r2,r2,-1
 800db00:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800db04:	e0bffe17 	ldw	r2,-8(fp)
 800db08:	e0ffff17 	ldw	r3,-4(fp)
 800db0c:	1885883a 	add	r2,r3,r2
 800db10:	10800003 	ldbu	r2,0(r2)
 800db14:	10803fcc 	andi	r2,r2,255
 800db18:	1080201c 	xori	r2,r2,128
 800db1c:	10bfe004 	addi	r2,r2,-128
 800db20:	10800be0 	cmpeqi	r2,r2,47
 800db24:	1000081e 	bne	r2,zero,800db48 <alt_find_file+0xb0>
 800db28:	e0bffe17 	ldw	r2,-8(fp)
 800db2c:	e0ffff17 	ldw	r3,-4(fp)
 800db30:	1885883a 	add	r2,r3,r2
 800db34:	10800003 	ldbu	r2,0(r2)
 800db38:	10803fcc 	andi	r2,r2,255
 800db3c:	1080201c 	xori	r2,r2,128
 800db40:	10bfe004 	addi	r2,r2,-128
 800db44:	10000a1e 	bne	r2,zero,800db70 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800db48:	e0bffd17 	ldw	r2,-12(fp)
 800db4c:	10800217 	ldw	r2,8(r2)
 800db50:	e0fffe17 	ldw	r3,-8(fp)
 800db54:	180d883a 	mov	r6,r3
 800db58:	e17fff17 	ldw	r5,-4(fp)
 800db5c:	1009883a 	mov	r4,r2
 800db60:	800dd4c0 	call	800dd4c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800db64:	1000021e 	bne	r2,zero,800db70 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800db68:	e0bffd17 	ldw	r2,-12(fp)
 800db6c:	00000706 	br	800db8c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 800db70:	e0bffd17 	ldw	r2,-12(fp)
 800db74:	10800017 	ldw	r2,0(r2)
 800db78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800db7c:	e0fffd17 	ldw	r3,-12(fp)
 800db80:	d0a00704 	addi	r2,gp,-32740
 800db84:	18bfcc1e 	bne	r3,r2,800dab8 <__alt_data_end+0xfc00dab8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800db88:	0005883a 	mov	r2,zero
}
 800db8c:	e037883a 	mov	sp,fp
 800db90:	dfc00117 	ldw	ra,4(sp)
 800db94:	df000017 	ldw	fp,0(sp)
 800db98:	dec00204 	addi	sp,sp,8
 800db9c:	f800283a 	ret

0800dba0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800dba0:	defffa04 	addi	sp,sp,-24
 800dba4:	dfc00515 	stw	ra,20(sp)
 800dba8:	df000415 	stw	fp,16(sp)
 800dbac:	dc000315 	stw	r16,12(sp)
 800dbb0:	df000404 	addi	fp,sp,16
 800dbb4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 800dbb8:	00bffa04 	movi	r2,-24
 800dbbc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800dbc0:	e03ffc15 	stw	zero,-16(fp)
 800dbc4:	00001d06 	br	800dc3c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 800dbc8:	04020074 	movhi	r16,2049
 800dbcc:	843f9e04 	addi	r16,r16,-392
 800dbd0:	e0bffc17 	ldw	r2,-16(fp)
 800dbd4:	01400304 	movi	r5,12
 800dbd8:	1009883a 	mov	r4,r2
 800dbdc:	8000a240 	call	8000a24 <__mulsi3>
 800dbe0:	8085883a 	add	r2,r16,r2
 800dbe4:	10800017 	ldw	r2,0(r2)
 800dbe8:	1000111e 	bne	r2,zero,800dc30 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 800dbec:	04020074 	movhi	r16,2049
 800dbf0:	843f9e04 	addi	r16,r16,-392
 800dbf4:	e0bffc17 	ldw	r2,-16(fp)
 800dbf8:	01400304 	movi	r5,12
 800dbfc:	1009883a 	mov	r4,r2
 800dc00:	8000a240 	call	8000a24 <__mulsi3>
 800dc04:	8085883a 	add	r2,r16,r2
 800dc08:	e0fffe17 	ldw	r3,-8(fp)
 800dc0c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800dc10:	d0e00b17 	ldw	r3,-32724(gp)
 800dc14:	e0bffc17 	ldw	r2,-16(fp)
 800dc18:	1880020e 	bge	r3,r2,800dc24 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 800dc1c:	e0bffc17 	ldw	r2,-16(fp)
 800dc20:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 800dc24:	e0bffc17 	ldw	r2,-16(fp)
 800dc28:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 800dc2c:	00000606 	br	800dc48 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800dc30:	e0bffc17 	ldw	r2,-16(fp)
 800dc34:	10800044 	addi	r2,r2,1
 800dc38:	e0bffc15 	stw	r2,-16(fp)
 800dc3c:	e0bffc17 	ldw	r2,-16(fp)
 800dc40:	10800810 	cmplti	r2,r2,32
 800dc44:	103fe01e 	bne	r2,zero,800dbc8 <__alt_data_end+0xfc00dbc8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800dc48:	e0bffd17 	ldw	r2,-12(fp)
}
 800dc4c:	e6ffff04 	addi	sp,fp,-4
 800dc50:	dfc00217 	ldw	ra,8(sp)
 800dc54:	df000117 	ldw	fp,4(sp)
 800dc58:	dc000017 	ldw	r16,0(sp)
 800dc5c:	dec00304 	addi	sp,sp,12
 800dc60:	f800283a 	ret

0800dc64 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 800dc64:	defffe04 	addi	sp,sp,-8
 800dc68:	df000115 	stw	fp,4(sp)
 800dc6c:	df000104 	addi	fp,sp,4
 800dc70:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 800dc74:	e0bfff17 	ldw	r2,-4(fp)
 800dc78:	10bffe84 	addi	r2,r2,-6
 800dc7c:	10c00428 	cmpgeui	r3,r2,16
 800dc80:	18001a1e 	bne	r3,zero,800dcec <alt_exception_cause_generated_bad_addr+0x88>
 800dc84:	100690ba 	slli	r3,r2,2
 800dc88:	00820074 	movhi	r2,2049
 800dc8c:	10b72704 	addi	r2,r2,-9060
 800dc90:	1885883a 	add	r2,r3,r2
 800dc94:	10800017 	ldw	r2,0(r2)
 800dc98:	1000683a 	jmp	r2
 800dc9c:	0800dcdc 	xori	zero,at,883
 800dca0:	0800dcdc 	xori	zero,at,883
 800dca4:	0800dcec 	andhi	zero,at,883
 800dca8:	0800dcec 	andhi	zero,at,883
 800dcac:	0800dcec 	andhi	zero,at,883
 800dcb0:	0800dcdc 	xori	zero,at,883
 800dcb4:	0800dce4 	muli	zero,at,883
 800dcb8:	0800dcec 	andhi	zero,at,883
 800dcbc:	0800dcdc 	xori	zero,at,883
 800dcc0:	0800dcdc 	xori	zero,at,883
 800dcc4:	0800dcec 	andhi	zero,at,883
 800dcc8:	0800dcdc 	xori	zero,at,883
 800dccc:	0800dce4 	muli	zero,at,883
 800dcd0:	0800dcec 	andhi	zero,at,883
 800dcd4:	0800dcec 	andhi	zero,at,883
 800dcd8:	0800dcdc 	xori	zero,at,883
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 800dcdc:	00800044 	movi	r2,1
 800dce0:	00000306 	br	800dcf0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 800dce4:	0005883a 	mov	r2,zero
 800dce8:	00000106 	br	800dcf0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 800dcec:	0005883a 	mov	r2,zero
  }
}
 800dcf0:	e037883a 	mov	sp,fp
 800dcf4:	df000017 	ldw	fp,0(sp)
 800dcf8:	dec00104 	addi	sp,sp,4
 800dcfc:	f800283a 	ret

0800dd00 <atexit>:
 800dd00:	200b883a 	mov	r5,r4
 800dd04:	000f883a 	mov	r7,zero
 800dd08:	000d883a 	mov	r6,zero
 800dd0c:	0009883a 	mov	r4,zero
 800dd10:	800ddc81 	jmpi	800ddc8 <__register_exitproc>

0800dd14 <exit>:
 800dd14:	defffe04 	addi	sp,sp,-8
 800dd18:	000b883a 	mov	r5,zero
 800dd1c:	dc000015 	stw	r16,0(sp)
 800dd20:	dfc00115 	stw	ra,4(sp)
 800dd24:	2021883a 	mov	r16,r4
 800dd28:	800dee00 	call	800dee0 <__call_exitprocs>
 800dd2c:	00820074 	movhi	r2,2049
 800dd30:	10bfff04 	addi	r2,r2,-4
 800dd34:	11000017 	ldw	r4,0(r2)
 800dd38:	20800f17 	ldw	r2,60(r4)
 800dd3c:	10000126 	beq	r2,zero,800dd44 <exit+0x30>
 800dd40:	103ee83a 	callr	r2
 800dd44:	8009883a 	mov	r4,r16
 800dd48:	800e0600 	call	800e060 <_exit>

0800dd4c <memcmp>:
 800dd4c:	01c000c4 	movi	r7,3
 800dd50:	3980192e 	bgeu	r7,r6,800ddb8 <memcmp+0x6c>
 800dd54:	2144b03a 	or	r2,r4,r5
 800dd58:	11c4703a 	and	r2,r2,r7
 800dd5c:	10000f26 	beq	r2,zero,800dd9c <memcmp+0x50>
 800dd60:	20800003 	ldbu	r2,0(r4)
 800dd64:	28c00003 	ldbu	r3,0(r5)
 800dd68:	10c0151e 	bne	r2,r3,800ddc0 <memcmp+0x74>
 800dd6c:	31bfff84 	addi	r6,r6,-2
 800dd70:	01ffffc4 	movi	r7,-1
 800dd74:	00000406 	br	800dd88 <memcmp+0x3c>
 800dd78:	20800003 	ldbu	r2,0(r4)
 800dd7c:	28c00003 	ldbu	r3,0(r5)
 800dd80:	31bfffc4 	addi	r6,r6,-1
 800dd84:	10c00e1e 	bne	r2,r3,800ddc0 <memcmp+0x74>
 800dd88:	21000044 	addi	r4,r4,1
 800dd8c:	29400044 	addi	r5,r5,1
 800dd90:	31fff91e 	bne	r6,r7,800dd78 <__alt_data_end+0xfc00dd78>
 800dd94:	0005883a 	mov	r2,zero
 800dd98:	f800283a 	ret
 800dd9c:	20c00017 	ldw	r3,0(r4)
 800dda0:	28800017 	ldw	r2,0(r5)
 800dda4:	18bfee1e 	bne	r3,r2,800dd60 <__alt_data_end+0xfc00dd60>
 800dda8:	31bfff04 	addi	r6,r6,-4
 800ddac:	21000104 	addi	r4,r4,4
 800ddb0:	29400104 	addi	r5,r5,4
 800ddb4:	39bff936 	bltu	r7,r6,800dd9c <__alt_data_end+0xfc00dd9c>
 800ddb8:	303fe91e 	bne	r6,zero,800dd60 <__alt_data_end+0xfc00dd60>
 800ddbc:	003ff506 	br	800dd94 <__alt_data_end+0xfc00dd94>
 800ddc0:	10c5c83a 	sub	r2,r2,r3
 800ddc4:	f800283a 	ret

0800ddc8 <__register_exitproc>:
 800ddc8:	defffa04 	addi	sp,sp,-24
 800ddcc:	dc000315 	stw	r16,12(sp)
 800ddd0:	04020074 	movhi	r16,2049
 800ddd4:	843fff04 	addi	r16,r16,-4
 800ddd8:	80c00017 	ldw	r3,0(r16)
 800dddc:	dc400415 	stw	r17,16(sp)
 800dde0:	dfc00515 	stw	ra,20(sp)
 800dde4:	18805217 	ldw	r2,328(r3)
 800dde8:	2023883a 	mov	r17,r4
 800ddec:	10003726 	beq	r2,zero,800decc <__register_exitproc+0x104>
 800ddf0:	10c00117 	ldw	r3,4(r2)
 800ddf4:	010007c4 	movi	r4,31
 800ddf8:	20c00e16 	blt	r4,r3,800de34 <__register_exitproc+0x6c>
 800ddfc:	1a000044 	addi	r8,r3,1
 800de00:	8800221e 	bne	r17,zero,800de8c <__register_exitproc+0xc4>
 800de04:	18c00084 	addi	r3,r3,2
 800de08:	18c7883a 	add	r3,r3,r3
 800de0c:	18c7883a 	add	r3,r3,r3
 800de10:	12000115 	stw	r8,4(r2)
 800de14:	10c7883a 	add	r3,r2,r3
 800de18:	19400015 	stw	r5,0(r3)
 800de1c:	0005883a 	mov	r2,zero
 800de20:	dfc00517 	ldw	ra,20(sp)
 800de24:	dc400417 	ldw	r17,16(sp)
 800de28:	dc000317 	ldw	r16,12(sp)
 800de2c:	dec00604 	addi	sp,sp,24
 800de30:	f800283a 	ret
 800de34:	00800034 	movhi	r2,0
 800de38:	10800004 	addi	r2,r2,0
 800de3c:	10002626 	beq	r2,zero,800ded8 <__register_exitproc+0x110>
 800de40:	01006404 	movi	r4,400
 800de44:	d9400015 	stw	r5,0(sp)
 800de48:	d9800115 	stw	r6,4(sp)
 800de4c:	d9c00215 	stw	r7,8(sp)
 800de50:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800de54:	d9400017 	ldw	r5,0(sp)
 800de58:	d9800117 	ldw	r6,4(sp)
 800de5c:	d9c00217 	ldw	r7,8(sp)
 800de60:	10001d26 	beq	r2,zero,800ded8 <__register_exitproc+0x110>
 800de64:	81000017 	ldw	r4,0(r16)
 800de68:	10000115 	stw	zero,4(r2)
 800de6c:	02000044 	movi	r8,1
 800de70:	22405217 	ldw	r9,328(r4)
 800de74:	0007883a 	mov	r3,zero
 800de78:	12400015 	stw	r9,0(r2)
 800de7c:	20805215 	stw	r2,328(r4)
 800de80:	10006215 	stw	zero,392(r2)
 800de84:	10006315 	stw	zero,396(r2)
 800de88:	883fde26 	beq	r17,zero,800de04 <__alt_data_end+0xfc00de04>
 800de8c:	18c9883a 	add	r4,r3,r3
 800de90:	2109883a 	add	r4,r4,r4
 800de94:	1109883a 	add	r4,r2,r4
 800de98:	21802215 	stw	r6,136(r4)
 800de9c:	01800044 	movi	r6,1
 800dea0:	12406217 	ldw	r9,392(r2)
 800dea4:	30cc983a 	sll	r6,r6,r3
 800dea8:	4992b03a 	or	r9,r9,r6
 800deac:	12406215 	stw	r9,392(r2)
 800deb0:	21c04215 	stw	r7,264(r4)
 800deb4:	01000084 	movi	r4,2
 800deb8:	893fd21e 	bne	r17,r4,800de04 <__alt_data_end+0xfc00de04>
 800debc:	11006317 	ldw	r4,396(r2)
 800dec0:	218cb03a 	or	r6,r4,r6
 800dec4:	11806315 	stw	r6,396(r2)
 800dec8:	003fce06 	br	800de04 <__alt_data_end+0xfc00de04>
 800decc:	18805304 	addi	r2,r3,332
 800ded0:	18805215 	stw	r2,328(r3)
 800ded4:	003fc606 	br	800ddf0 <__alt_data_end+0xfc00ddf0>
 800ded8:	00bfffc4 	movi	r2,-1
 800dedc:	003fd006 	br	800de20 <__alt_data_end+0xfc00de20>

0800dee0 <__call_exitprocs>:
 800dee0:	defff504 	addi	sp,sp,-44
 800dee4:	df000915 	stw	fp,36(sp)
 800dee8:	dd400615 	stw	r21,24(sp)
 800deec:	dc800315 	stw	r18,12(sp)
 800def0:	dfc00a15 	stw	ra,40(sp)
 800def4:	ddc00815 	stw	r23,32(sp)
 800def8:	dd800715 	stw	r22,28(sp)
 800defc:	dd000515 	stw	r20,20(sp)
 800df00:	dcc00415 	stw	r19,16(sp)
 800df04:	dc400215 	stw	r17,8(sp)
 800df08:	dc000115 	stw	r16,4(sp)
 800df0c:	d9000015 	stw	r4,0(sp)
 800df10:	2839883a 	mov	fp,r5
 800df14:	04800044 	movi	r18,1
 800df18:	057fffc4 	movi	r21,-1
 800df1c:	00820074 	movhi	r2,2049
 800df20:	10bfff04 	addi	r2,r2,-4
 800df24:	12000017 	ldw	r8,0(r2)
 800df28:	45005217 	ldw	r20,328(r8)
 800df2c:	44c05204 	addi	r19,r8,328
 800df30:	a0001c26 	beq	r20,zero,800dfa4 <__call_exitprocs+0xc4>
 800df34:	a0800117 	ldw	r2,4(r20)
 800df38:	15ffffc4 	addi	r23,r2,-1
 800df3c:	b8000d16 	blt	r23,zero,800df74 <__call_exitprocs+0x94>
 800df40:	14000044 	addi	r16,r2,1
 800df44:	8421883a 	add	r16,r16,r16
 800df48:	8421883a 	add	r16,r16,r16
 800df4c:	84402004 	addi	r17,r16,128
 800df50:	a463883a 	add	r17,r20,r17
 800df54:	a421883a 	add	r16,r20,r16
 800df58:	e0001e26 	beq	fp,zero,800dfd4 <__call_exitprocs+0xf4>
 800df5c:	80804017 	ldw	r2,256(r16)
 800df60:	e0801c26 	beq	fp,r2,800dfd4 <__call_exitprocs+0xf4>
 800df64:	bdffffc4 	addi	r23,r23,-1
 800df68:	843fff04 	addi	r16,r16,-4
 800df6c:	8c7fff04 	addi	r17,r17,-4
 800df70:	bd7ff91e 	bne	r23,r21,800df58 <__alt_data_end+0xfc00df58>
 800df74:	00800034 	movhi	r2,0
 800df78:	10800004 	addi	r2,r2,0
 800df7c:	10000926 	beq	r2,zero,800dfa4 <__call_exitprocs+0xc4>
 800df80:	a0800117 	ldw	r2,4(r20)
 800df84:	1000301e 	bne	r2,zero,800e048 <__call_exitprocs+0x168>
 800df88:	a0800017 	ldw	r2,0(r20)
 800df8c:	10003226 	beq	r2,zero,800e058 <__call_exitprocs+0x178>
 800df90:	a009883a 	mov	r4,r20
 800df94:	98800015 	stw	r2,0(r19)
 800df98:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800df9c:	9d000017 	ldw	r20,0(r19)
 800dfa0:	a03fe41e 	bne	r20,zero,800df34 <__alt_data_end+0xfc00df34>
 800dfa4:	dfc00a17 	ldw	ra,40(sp)
 800dfa8:	df000917 	ldw	fp,36(sp)
 800dfac:	ddc00817 	ldw	r23,32(sp)
 800dfb0:	dd800717 	ldw	r22,28(sp)
 800dfb4:	dd400617 	ldw	r21,24(sp)
 800dfb8:	dd000517 	ldw	r20,20(sp)
 800dfbc:	dcc00417 	ldw	r19,16(sp)
 800dfc0:	dc800317 	ldw	r18,12(sp)
 800dfc4:	dc400217 	ldw	r17,8(sp)
 800dfc8:	dc000117 	ldw	r16,4(sp)
 800dfcc:	dec00b04 	addi	sp,sp,44
 800dfd0:	f800283a 	ret
 800dfd4:	a0800117 	ldw	r2,4(r20)
 800dfd8:	80c00017 	ldw	r3,0(r16)
 800dfdc:	10bfffc4 	addi	r2,r2,-1
 800dfe0:	15c01426 	beq	r2,r23,800e034 <__call_exitprocs+0x154>
 800dfe4:	80000015 	stw	zero,0(r16)
 800dfe8:	183fde26 	beq	r3,zero,800df64 <__alt_data_end+0xfc00df64>
 800dfec:	95c8983a 	sll	r4,r18,r23
 800dff0:	a0806217 	ldw	r2,392(r20)
 800dff4:	a5800117 	ldw	r22,4(r20)
 800dff8:	2084703a 	and	r2,r4,r2
 800dffc:	10000b26 	beq	r2,zero,800e02c <__call_exitprocs+0x14c>
 800e000:	a0806317 	ldw	r2,396(r20)
 800e004:	2088703a 	and	r4,r4,r2
 800e008:	20000c1e 	bne	r4,zero,800e03c <__call_exitprocs+0x15c>
 800e00c:	89400017 	ldw	r5,0(r17)
 800e010:	d9000017 	ldw	r4,0(sp)
 800e014:	183ee83a 	callr	r3
 800e018:	a0800117 	ldw	r2,4(r20)
 800e01c:	15bfbf1e 	bne	r2,r22,800df1c <__alt_data_end+0xfc00df1c>
 800e020:	98800017 	ldw	r2,0(r19)
 800e024:	153fcf26 	beq	r2,r20,800df64 <__alt_data_end+0xfc00df64>
 800e028:	003fbc06 	br	800df1c <__alt_data_end+0xfc00df1c>
 800e02c:	183ee83a 	callr	r3
 800e030:	003ff906 	br	800e018 <__alt_data_end+0xfc00e018>
 800e034:	a5c00115 	stw	r23,4(r20)
 800e038:	003feb06 	br	800dfe8 <__alt_data_end+0xfc00dfe8>
 800e03c:	89000017 	ldw	r4,0(r17)
 800e040:	183ee83a 	callr	r3
 800e044:	003ff406 	br	800e018 <__alt_data_end+0xfc00e018>
 800e048:	a0800017 	ldw	r2,0(r20)
 800e04c:	a027883a 	mov	r19,r20
 800e050:	1029883a 	mov	r20,r2
 800e054:	003fb606 	br	800df30 <__alt_data_end+0xfc00df30>
 800e058:	0005883a 	mov	r2,zero
 800e05c:	003ffb06 	br	800e04c <__alt_data_end+0xfc00e04c>

0800e060 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800e060:	defffd04 	addi	sp,sp,-12
 800e064:	df000215 	stw	fp,8(sp)
 800e068:	df000204 	addi	fp,sp,8
 800e06c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800e070:	0001883a 	nop
 800e074:	e0bfff17 	ldw	r2,-4(fp)
 800e078:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800e07c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800e080:	10000226 	beq	r2,zero,800e08c <_exit+0x2c>
    ALT_SIM_FAIL();
 800e084:	002af070 	cmpltui	zero,zero,43969
 800e088:	00000106 	br	800e090 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800e08c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800e090:	003fff06 	br	800e090 <__alt_data_end+0xfc00e090>
